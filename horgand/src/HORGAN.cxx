// generated by Fast Light User Interface Designer (fluid) version 1.0108

#include <libintl.h>
#include "HORGAN.h"
//Copyright (c) 2003-2004 Josep Andreu (Holborn)
//License: GNU GPL version 2
#include <horgand128.xpm>

Drawbar::Drawbar(int x,int y, int w, int h, const char *label):Fl_Slider(x,y,w,h,label) {
}

int Drawbar::handle(int event) {
  switch(event)
{

case FL_RELEASE:
{
draw();
Signal_for_Cb_Sliders=1;
do_callback();
return 1;
}


case FL_DRAG: 
{
Fl_Slider::handle(FL_DRAG,x(),y(),w(),h());
draw();
do_callback();
return 1;
}

case FL_SHORTCUT:
return 0;

default:
return 1;
}
}

Rueda::Rueda(int x,int y, int w, int h, const char *label):Fl_Dial(x,y,w,h,label) {
}

int Rueda::handle(int event) {
  switch(event)
{

case FL_RELEASE:
{
draw();
Signal_for_Cb_Sliders=1;
do_callback();
return 1;
}


case FL_DRAG: 
{
Fl_Dial::handle(FL_DRAG,x(),y(),w(),h());
draw();
do_callback();
return 1;
}

case FL_SHORTCUT:
return 0;

default:
return 1;
}
}

void HORGAN::cb_HORwindow_i(Fl_Double_Window* o, void*) {
  Guarda_Pref(0);
Pexitprogram=1;
o->hide();
exit(0);
}
void HORGAN::cb_HORwindow(Fl_Double_Window* o, void* v) {
  ((HORGAN*)(o->user_data()))->cb_HORwindow_i(o,v);
}

void HORGAN::cb_PANICO_i(Fl_Button*, void*) {
  hor->panic();
}
void HORGAN::cb_PANICO(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_PANICO_i(o,v);
}

void HORGAN::cb_MFile_i(Fl_Menu_*, void*) {
  Fl::focus(PANICO);
}
void HORGAN::cb_MFile(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_MFile_i(o,v);
}

void HORGAN::cb_New_i(Fl_Menu_*, void*) {
  hor->New();
ApagaTodo();
meteprog();
Actu();
hor->PutPrim();
sprintf(hor->temporal, "--"); 
DispNumber->label(hor->temporal);
CPrograma->value(0);
}
void HORGAN::cb_New(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_New_i(o,v);
}

void HORGAN::cb_Load_i(Fl_Menu_*, void*) {
  char *filename;
Fl::focus(PANICO);
filename=fl_file_chooser("Load:","(*.hor)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".hor");
hor->loadfile(filename);
meteprog();
Actu();
hor->PutPrim();
sprintf(hor->temporal,"--");
DispNumber->label(hor->temporal);
}
void HORGAN::cb_Load(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Load_i(o,v);
}

void HORGAN::cb_Save_i(Fl_Menu_*, void*) {
  char *filename;
#define EXT ".hor"
filename=fl_file_chooser("Save:","(*"EXT")",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
#undef EXT
hor->savefile(filename);
hor->PutPrim();
}
void HORGAN::cb_Save(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Save_i(o,v);
}

void HORGAN::cb_Load1_i(Fl_Menu_* o, void*) {
  BLoad->do_callback(o);
}
void HORGAN::cb_Load1(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Load1_i(o,v);
}

void HORGAN::cb_Save1_i(Fl_Menu_* o, void*) {
  BSave->do_callback(o);
}
void HORGAN::cb_Save1(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Save1_i(o,v);
}

void HORGAN::cb_Load2_i(Fl_Menu_*, void*) {
  char *filename;
Fl::focus(PANICO);
filename=fl_file_chooser("Load:","(*.txt)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".txt");
hor->loadrhyt(filename);
meteritmos();
}
void HORGAN::cb_Load2(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Load2_i(o,v);
}

void HORGAN::cb_Save2_i(Fl_Menu_*, void*) {
  char *filename;
#define EXT ".txt"
filename=fl_file_chooser("Save:","(*"EXT")",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
#undef EXT
hor->saverhyt(filename);
}
void HORGAN::cb_Save2(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Save2_i(o,v);
}

void HORGAN::cb_About_i(Fl_Menu_*, void*) {
  aboutwindow->position(HORwindow->x()+200,HORwindow->y()+200);
aboutwindow->show();
}
void HORGAN::cb_About(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_About_i(o,v);
}

void HORGAN::cb_E_i(Fl_Menu_*, void*) {
  HORwindow->do_callback();
}
void HORGAN::cb_E(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_E_i(o,v);
}

void HORGAN::cb_Undo_i(Fl_Menu_*, void*) {
  Undo();
}
void HORGAN::cb_Undo(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Undo_i(o,v);
}

void HORGAN::cb_Redo_i(Fl_Menu_*, void*) {
  Redo();
}
void HORGAN::cb_Redo(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Redo_i(o,v);
}

void HORGAN::cb_Synthesizer_i(Fl_Menu_*, void*) {
  ADSRwin->hide();




D_Freq->value(1);
D_Freq_F->value(1);
D_FFval->lstep(0.001);

metesynth();

Fl_Preferences horgand (Fl_Preferences::USER, WEBSITE , PACKAGE);

int x,y;

horgand.get("Synth X",x,1);
horgand.get("Synth Y",y,1);

ADSRwin->position(x,y);
ADSRwin->show();
}
void HORGAN::cb_Synthesizer(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Synthesizer_i(o,v);
}

void HORGAN::cb_MBank_i(Fl_Menu_*, void*) {
  int x,y;
Fl_Preferences horgand (Fl_Preferences::USER, WEBSITE , PACKAGE);
horgand.get("HORBank X",x,1);
horgand.get("HORBank Y",y,1);
HORBank->position(x,y);

HORBank->show();
Fl::focus(BClose);
}
void HORGAN::cb_MBank(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_MBank_i(o,v);
}

void HORGAN::cb_Settings_i(Fl_Menu_*, void*) {
  MiraClientes();
MiraConfig();
Settingswindow->position(HORwindow->x(),HORwindow->y());
Settingswindow->show();
Fl::focus(SClose);
}
void HORGAN::cb_Settings(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Settings_i(o,v);
}

Fl_Menu_Item HORGAN::menu_MenuPrincipal[] = {
 {gettext("&File"), 0,  (Fl_Callback*)HORGAN::cb_MFile, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&New..."), 0,  (Fl_Callback*)HORGAN::cb_New, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&Load..."), 0,  (Fl_Callback*)HORGAN::cb_Load, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&Save..."), 0,  (Fl_Callback*)HORGAN::cb_Save, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Load Bank..."), 0,  (Fl_Callback*)HORGAN::cb_Load1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Save Bank..."), 0,  (Fl_Callback*)HORGAN::cb_Save1, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Load Rhythm..."), 0,  (Fl_Callback*)HORGAN::cb_Load2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Save Rhythm..."), 0,  (Fl_Callback*)HORGAN::cb_Save2, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&About..."), 0,  (Fl_Callback*)HORGAN::cb_About, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("E&xit"), 0,  (Fl_Callback*)HORGAN::cb_E, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {gettext("&Edit"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&Undo"), 0x4007a,  (Fl_Callback*)HORGAN::cb_Undo, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&Redo"), 0x40072,  (Fl_Callback*)HORGAN::cb_Redo, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&Synthesizer"), 0x40073,  (Fl_Callback*)HORGAN::cb_Synthesizer, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {gettext("&Bank"), 0x80062,  (Fl_Callback*)HORGAN::cb_MBank, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&Settings"), 0x80073,  (Fl_Callback*)HORGAN::cb_Settings, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* HORGAN::MFile = HORGAN::menu_MenuPrincipal + 0;
Fl_Menu_Item* HORGAN::MEdit = HORGAN::menu_MenuPrincipal + 11;
Fl_Menu_Item* HORGAN::MBank = HORGAN::menu_MenuPrincipal + 16;

void HORGAN::cb_CF_i(Fl_Light_Button* o, void*) {
  if (o->value() != 0 ) {
CL->deactivate();
MFile->deactivate();
MBank->deactivate();
MEdit->deactivate();
CPrograma->deactivate();
}
else {
CL->activate();
CPrograma->activate();
MFile->activate();
MBank->activate();
MEdit->activate();
}

if ( o->value() != 0 )
{
 
 GetPrim();
} 
else
{
UndoCount++;
Undo();
};
}
void HORGAN::cb_CF(Fl_Light_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_CF_i(o,v);
}

void HORGAN::cb_CL_i(Fl_Light_Button* o, void*) {
  if (o->value() != 0 ) {
CF->deactivate();
MFile->deactivate();
MBank->deactivate();
MEdit->deactivate();
CPrograma->deactivate();
}
else{

CF->activate();
CPrograma->activate();
MFile->activate();
MBank->activate();
MEdit->activate();
}

if ( o->value() != 0 ) Undo(); else Redo();
}
void HORGAN::cb_CL(Fl_Light_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_CL_i(o,v);
}

void HORGAN::cb_VUI1_i(Fl_Slider* o, void*) {
  o->value(MidiInLevel);
}
void HORGAN::cb_VUI1(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_VUI1_i(o,v);
}

void HORGAN::cb_DMIN1_i(Fl_Box* o, void*) {
  o->label(hor->MID);
}
void HORGAN::cb_DMIN1(Fl_Box* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_DMIN1_i(o,v);
}

void HORGAN::cb_Transpose_i(Fl_Counter* o, void*) {
  hor->transpose = (int) o->value();
calbtrans();
Actu();
}
void HORGAN::cb_Transpose(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Transpose_i(o,v);
}

void HORGAN::cb_Master_i(Drawbar* o, void*) {
  hor->Master_Volume = (float) o->value() / 100.0;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_Master(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Master_i(o,v);
}

void HORGAN::cb_Nombre_i(Fl_Input* o, void*) {
  hor->c_name=(char*) o->value();
strncpy(hor->Name,hor->c_name,24);
Actu();
}
void HORGAN::cb_Nombre(Fl_Input* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Nombre_i(o,v);
}

void HORGAN::cb_MasterT_i(Fl_Counter* o, void*) {
  hor->mastertune = 1 + (float) (o->value() / 1600);
calbtune();
}
void HORGAN::cb_MasterT(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_MasterT_i(o,v);
}

void HORGAN::cb_V1_i(Drawbar* o, void*) {
  hor->Operator[1].volumen = (float) o->value() / 100.0;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V1(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V1_i(o,v);
}

void HORGAN::cb_V2_i(Drawbar* o, void*) {
  hor->Operator[2].volumen = (float) o->value() / 100.0;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V2(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V2_i(o,v);
}

void HORGAN::cb_V3_i(Drawbar* o, void*) {
  hor->Operator[3].volumen = (float) o->value() / 100.0;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V3(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V3_i(o,v);
}

void HORGAN::cb_V4_i(Drawbar* o, void*) {
  hor->Operator[4].volumen = (float) o->value() / 100.0;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V4(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V4_i(o,v);
}

void HORGAN::cb_V5_i(Drawbar* o, void*) {
  hor->Operator[5].volumen = (float) o->value() / 100.0;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V5(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V5_i(o,v);
}

void HORGAN::cb_V6_i(Drawbar* o, void*) {
  hor->Operator[6].volumen = (float) o->value() / 100.0;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V6(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V6_i(o,v);
}

void HORGAN::cb_V7_i(Drawbar* o, void*) {
  hor->Operator[7].volumen = (float) o->value() / 100.0;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V7(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V7_i(o,v);
}

void HORGAN::cb_V8_i(Drawbar* o, void*) {
  hor->Operator[8].volumen = (float) o->value() / 100.0;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V8(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V8_i(o,v);
}

void HORGAN::cb_V9_i(Drawbar* o, void*) {
  hor->Operator[9].volumen = (float) o->value() / 100.0;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V9(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V9_i(o,v);
}

void HORGAN::cb_V10_i(Drawbar* o, void*) {
  hor->Operator[10].volumen = (float) o->value() / 100.0;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V10(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V10_i(o,v);
}

void HORGAN::cb_Detune_i(Rueda* o, void*) {
  hor->detune = (float) o->value();
D_FFval->value(hor->Operator[(int)D_Freq_F->value()].harmonic_fine);
int i;
float k;
for (i=1; i<=10; i++)
{

k = (16 -hor->Operator[i].harmonic);
if (k==0) k=1.0;

hor->Operator[i].harmonic_fine = (float) ((o->value()) / (k * i * 1000.0));
 
}
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_Detune(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Detune_i(o,v);
}

void HORGAN::cb_LFOSpeed_i(Rueda* o, void*) {
  hor->Rotary_LFO_Speed = (float) o->value();
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_LFOSpeed(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_LFOSpeed_i(o,v);
}

void HORGAN::cb_LFOPitch_i(Rueda* o, void*) {
  hor->LFOpitch = (float) o->value();
hor->Calc_LFO_Frequency();
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_LFOPitch(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_LFOPitch_i(o,v);
}

void HORGAN::cb_PLFOSpeed_i(Rueda* o, void*) {
  hor->Pitch_LFO_Speed = (float) o->value();
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_PLFOSpeed(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_PLFOSpeed_i(o,v);
}

void HORGAN::cb_PLFODelay_i(Rueda* o, void*) {
  hor->Pitch_LFO_Delay = (float) o->value() / 10;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_PLFODelay(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_PLFODelay_i(o,v);
}

void HORGAN::cb_EchoVol_i(Fl_Counter* o, void*) {
  hor->Delay_Volume = (float) o->value() / 100;
Actu();
}
void HORGAN::cb_EchoVol(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_EchoVol_i(o,v);
}

void HORGAN::cb_EchoDelay_i(Fl_Counter* o, void*) {
  hor->Delay_Delay = (float) o->value() * 131200;
Actu();
}
void HORGAN::cb_EchoDelay(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_EchoDelay_i(o,v);
}

void HORGAN::cb_H1_i(Fl_Slider* o, void*) {
  hor->Operator[1].harmonic = (int) o->value();
NV1->value(hor->lasfreq[(int) o->value()]);

Actu();
}
void HORGAN::cb_H1(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H1_i(o,v);
}

void HORGAN::cb_H2_i(Fl_Slider* o, void*) {
  hor->Operator[2].harmonic = (int) o->value();
NV2->value(hor->lasfreq[(int) o->value()]);
Actu();
}
void HORGAN::cb_H2(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H2_i(o,v);
}

void HORGAN::cb_H3_i(Fl_Slider* o, void*) {
  hor->Operator[3].harmonic = (int) o->value();
NV3->value(hor->lasfreq[(int) o->value()]);

Actu();
}
void HORGAN::cb_H3(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H3_i(o,v);
}

void HORGAN::cb_H4_i(Fl_Slider* o, void*) {
  hor->Operator[4].harmonic = (int) o->value();
NV4->value(hor->lasfreq[(int) o->value()]);

Actu();
}
void HORGAN::cb_H4(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H4_i(o,v);
}

void HORGAN::cb_H5_i(Fl_Slider* o, void*) {
  hor->Operator[5].harmonic = (int) o->value();
NV5->value(hor->lasfreq[(int) o->value()]);
Actu();
}
void HORGAN::cb_H5(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H5_i(o,v);
}

void HORGAN::cb_H6_i(Fl_Slider* o, void*) {
  hor->Operator[6].harmonic = (int) o->value();
NV6->value(hor->lasfreq[(int) o->value()]);
Actu();
}
void HORGAN::cb_H6(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H6_i(o,v);
}

void HORGAN::cb_H7_i(Fl_Slider* o, void*) {
  hor->Operator[7].harmonic = (int) o->value();
NV7->value(hor->lasfreq[(int) o->value()]);

Actu();
}
void HORGAN::cb_H7(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H7_i(o,v);
}

void HORGAN::cb_H8_i(Fl_Slider* o, void*) {
  hor->Operator[8].harmonic = (int) o->value();
NV8->value(hor->lasfreq[(int) o->value()]);

Actu();
}
void HORGAN::cb_H8(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H8_i(o,v);
}

void HORGAN::cb_H9_i(Fl_Slider* o, void*) {
  hor->Operator[9].harmonic = (int) o->value();
NV9->value(hor->lasfreq[(int) o->value()]);
Actu();
}
void HORGAN::cb_H9(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H9_i(o,v);
}

void HORGAN::cb_H10_i(Fl_Slider* o, void*) {
  hor->Operator[10].harmonic = (int) o->value();
NV10->value(hor->lasfreq[(int) o->value()]);
Actu();
}
void HORGAN::cb_H10(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H10_i(o,v);
}

void HORGAN::cb_Rota_i(Fl_Button*, void*) {
  if (hor->E_Rotary_On == 0) hor->E_Rotary_On = 1; else hor->E_Rotary_On = 0;
Actu();
}
void HORGAN::cb_Rota(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Rota_i(o,v);
}

void HORGAN::cb_ELFOSpeed_i(Rueda* o, void*) {
  hor->Chorus_LFO_Speed = (float) o->value();
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_ELFOSpeed(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_ELFOSpeed_i(o,v);
}

void HORGAN::cb_ELFOAmplitude_i(Drawbar* o, void*) {
  hor->Chorus_LFO_Amplitude = (float) o->value();
hor->Calc_Chorus_LFO_Frequency();
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_ELFOAmplitude(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_ELFOAmplitude_i(o,v);
}

void HORGAN::cb_POPO_i(Drawbar* o, void*) {
  hor->Chorus_Delay = (float) o->value();

if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_POPO(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_POPO_i(o,v);
}

void HORGAN::cb_ChorVol_i(Fl_Counter* o, void*) {
  hor->Chorus_Volume = (float) o->value() / 100.0;
Actu();
}
void HORGAN::cb_ChorVol(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_ChorVol_i(o,v);
}

void HORGAN::cb_Split_i(Fl_Button*, void*) {
  if (hor->split == 0) hor->split = 1; else hor->split = 0;
Actu();
}
void HORGAN::cb_Split(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Split_i(o,v);
}

void HORGAN::cb_DMIN2_i(Fl_Box* o, void*) {
  switch (hor->Salida)
{
 case 1:
        o->label("OSS");
        break;
 case 2:
        o->label("Alsa");
        break;
 case 3:
        o->label("Jack");
        break;
};
}
void HORGAN::cb_DMIN2(Fl_Box* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_DMIN2_i(o,v);
}

void HORGAN::cb_EchoOn_i(Fl_Button* o, void*) {
  hor->E_Delay_On =  o->value();
hor->Clean_Buffer_Effects();
Actu();
}
void HORGAN::cb_EchoOn(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_EchoOn_i(o,v);
}

void HORGAN::cb_ChorusOn_i(Fl_Button* o, void*) {
  hor->E_Chorus_On =  o->value();
hor->Clean_Buffer_Effects();
Actu();
}
void HORGAN::cb_ChorusOn(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_ChorusOn_i(o,v);
}

void HORGAN::cb_R1_i(Fl_Button*, void*) {
  hor->Reverb_Preset = 1;
ponreverb();
Actu();
}
void HORGAN::cb_R1(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_R1_i(o,v);
}

void HORGAN::cb_R2_i(Fl_Button*, void*) {
  hor->Reverb_Preset = 2;
ponreverb();
Actu();
}
void HORGAN::cb_R2(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_R2_i(o,v);
}

void HORGAN::cb_R3_i(Fl_Button*, void*) {
  hor->Reverb_Preset = 3;
ponreverb();
Actu();
}
void HORGAN::cb_R3(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_R3_i(o,v);
}

void HORGAN::cb_R4_i(Fl_Button*, void*) {
  hor->Reverb_Preset = 4;
ponreverb();
Actu();
}
void HORGAN::cb_R4(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_R4_i(o,v);
}

void HORGAN::cb_R5_i(Fl_Button*, void*) {
  hor->Reverb_Preset = 5;
ponreverb();
Actu();
}
void HORGAN::cb_R5(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_R5_i(o,v);
}

void HORGAN::cb_R6_i(Fl_Button*, void*) {
  hor->Reverb_Preset = 6;
ponreverb();
Actu();
}
void HORGAN::cb_R6(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_R6_i(o,v);
}

void HORGAN::cb_R7_i(Fl_Button*, void*) {
  hor->Reverb_Preset = 7;
ponreverb();
Actu();
}
void HORGAN::cb_R7(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_R7_i(o,v);
}

void HORGAN::cb_R8_i(Fl_Button*, void*) {
  hor->Reverb_Preset = 8;
ponreverb();
Actu();
}
void HORGAN::cb_R8(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_R8_i(o,v);
}

void HORGAN::cb_Rev_i(Fl_Button* o, void*) {
  if (o->value()== 0) 
{
hor->E_Reverb_On= 0;
R1->value(0);
R2->value(0);
R3->value(0);
R4->value(0);
R5->value(0);
R6->value(0);
R7->value(0);
R8->value(0);
R1->deactivate();
R2->deactivate();
R3->deactivate();
R4->deactivate();
R5->deactivate();
R6->deactivate();
R7->deactivate();
R8->deactivate();


}
else
{
hor->E_Reverb_On = 1;
R1->activate();
R2->activate();
R3->activate();
R4->activate();
R5->activate();
R6->activate();
R7->activate();
R8->activate();
if (hor->Reverb_Preset==0) hor->Reverb_Preset = 1;

switch((int) hor->Reverb_Preset)
{
case 1:
R1->setonly();
break;
case 2:
R2->setonly();
break;
case 3:
R3->setonly();
break;
case 4:
R4->setonly();
break;
case 5:
R5->setonly();
break;
case 6:
R6->setonly();
break;
case 7:
R7->setonly();
break;
case 8:
R8->setonly();
break;
}
}
hor->Clean_Buffer_Effects();
Actu();
}
void HORGAN::cb_Rev(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Rev_i(o,v);
}

void HORGAN::cb_RitVol_i(Fl_Slider* o, void*) {
  hor->Rhythm_Volume = o->value();
}
void HORGAN::cb_RitVol(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_RitVol_i(o,v);
}

void HORGAN::cb_Tempo_i(Fl_Dial* o, void*) {
  hor->tempo = (float) o->value();
hor->frame_total_size = (int) (hor->tempo * hor->sfinfo.frames);
hor->fractional_position = hor->frame_total_size /(4 * hor->quarter_note * hor->bars);
}
void HORGAN::cb_Tempo(Fl_Dial* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Tempo_i(o,v);
}

void HORGAN::cb_VUI2_i(Fl_Slider* o, void*) {
  o->value(BarLead);
}
void HORGAN::cb_VUI2(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_VUI2_i(o,v);
}

void HORGAN::cb_RitOn_i(Fl_Button* o, void*) {
  StStRiton->value(o->value());
BarLead = 0;
hor->Rhythm_On =  o->value();
VUI2->value(0);
}
void HORGAN::cb_RitOn(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_RitOn_i(o,v);
}

void HORGAN::cb_StStRiton_i(Fl_Button* o, void*) {
  if (Selected_Rhythm != 0)
{
// int readcounts = sf_seek (hor->infile, 0, SEEK_SET);
RitOn->value(o->value());
BarLead = 0;
hor->Rhythm_On =  o->value();
}

VUI2->value(0);
}
void HORGAN::cb_StStRiton(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_StStRiton_i(o,v);
}

void HORGAN::cb_Rit1_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 1;
if (Fl::event_button()==3) 
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit1(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit1_i(o,v);
}

void HORGAN::cb_Rit2_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 2;
if (Fl::event_button()==3)
{
 GetRit(Selected_Rhythm);
 EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit2(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit2_i(o,v);
}

void HORGAN::cb_Rit3_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 3;
if (Fl::event_button()==3)
{
 GetRit(Selected_Rhythm);
 EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit3(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit3_i(o,v);
}

void HORGAN::cb_Rit4_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 4;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit4(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit4_i(o,v);
}

void HORGAN::cb_Rit5_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 5;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit5(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit5_i(o,v);
}

void HORGAN::cb_Rit6_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 6;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit6(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit6_i(o,v);
}

void HORGAN::cb_Rit7_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 7;
if (Fl::event_button()==3) 
{
EditRit(Selected_Rhythm);
GetRit(Selected_Rhythm);
}

if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit7(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit7_i(o,v);
}

void HORGAN::cb_Rit8_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 8;
if (Fl::event_button()==3)
{
EditRit(Selected_Rhythm);
GetRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit8(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit8_i(o,v);
}

void HORGAN::cb_Rit9_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 9;
if (Fl::event_button()==3)
{
EditRit(Selected_Rhythm);
GetRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit9(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit9_i(o,v);
}

void HORGAN::cb_Rit10_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 10;
if (Fl::event_button()==3)
{
EditRit(Selected_Rhythm);
GetRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit10(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit10_i(o,v);
}

void HORGAN::cb_Rit11_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 11;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit11(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit11_i(o,v);
}

void HORGAN::cb_Rit12_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 12;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit12(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit12_i(o,v);
}

void HORGAN::cb_Rit13_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 13;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit13(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit13_i(o,v);
}

void HORGAN::cb_Rit14_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 14;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit14(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit14_i(o,v);
}

void HORGAN::cb_Rit15_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 15;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit15(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit15_i(o,v);
}

void HORGAN::cb_Rit16_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 16;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit16(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit16_i(o,v);
}

void HORGAN::cb_Rit17_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 17;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit17(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit17_i(o,v);
}

void HORGAN::cb_Rit18_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 18;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit18(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit18_i(o,v);
}

void HORGAN::cb_Rit19_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 19;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit19(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit19_i(o,v);
}

void HORGAN::cb_Rit20_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 20;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit20(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit20_i(o,v);
}

void HORGAN::cb_BassVol_i(Fl_Slider* o, void*) {
  hor->Bass_Volume = o->value();
}
void HORGAN::cb_BassVol(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_BassVol_i(o,v);
}

void HORGAN::cb_Basson_i(Fl_Button* o, void*) {
  //int readcounts = sf_seek (hor->infileb, 0, SEEK_SET);
BarLead = 0;
hor->split = o->value();
Split->value(o->value());
hor->Bass_On =  o->value();
}
void HORGAN::cb_Basson(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Basson_i(o,v);
}

void HORGAN::cb_Bass1_i(Fl_Button*, void*) {
  SetBassType(0);
}
void HORGAN::cb_Bass1(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Bass1_i(o,v);
}

void HORGAN::cb_Bass2_i(Fl_Button*, void*) {
  SetBassType(1);
}
void HORGAN::cb_Bass2(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Bass2_i(o,v);
}

void HORGAN::cb_Bass3_i(Fl_Button*, void*) {
  SetBassType(2);
}
void HORGAN::cb_Bass3(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Bass3_i(o,v);
}

void HORGAN::cb_CPrograma_i(Fl_Counter* o, void*) {
  hor->cpreset = (int) o->value();
PutCombi(hor->cpreset);
Actu();
}
void HORGAN::cb_CPrograma(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_CPrograma_i(o,v);
}

void HORGAN::cb_OMaster_i(Drawbar* o, void*) {
  hor->Organ_Master_Volume = (float) o->value() / 100.0;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_OMaster(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_OMaster_i(o,v);
}

void HORGAN::cb_Mar1_i(Fl_Light_Button* o, void*) {
  hor->Operator[1].marimba=o->value();
}
void HORGAN::cb_Mar1(Fl_Light_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Mar1_i(o,v);
}

void HORGAN::cb_Mar2_i(Fl_Light_Button* o, void*) {
  hor->Operator[2].marimba=o->value();
}
void HORGAN::cb_Mar2(Fl_Light_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Mar2_i(o,v);
}

void HORGAN::cb_Mar3_i(Fl_Light_Button* o, void*) {
  hor->Operator[3].marimba=o->value();
}
void HORGAN::cb_Mar3(Fl_Light_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Mar3_i(o,v);
}

void HORGAN::cb_Mar4_i(Fl_Light_Button* o, void*) {
  hor->Operator[4].marimba=o->value();
}
void HORGAN::cb_Mar4(Fl_Light_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Mar4_i(o,v);
}

void HORGAN::cb_Mar5_i(Fl_Light_Button* o, void*) {
  hor->Operator[5].marimba=o->value();
}
void HORGAN::cb_Mar5(Fl_Light_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Mar5_i(o,v);
}

void HORGAN::cb_Mar6_i(Fl_Light_Button* o, void*) {
  hor->Operator[6].marimba=o->value();
}
void HORGAN::cb_Mar6(Fl_Light_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Mar6_i(o,v);
}

void HORGAN::cb_Mar7_i(Fl_Light_Button* o, void*) {
  hor->Operator[7].marimba=o->value();
}
void HORGAN::cb_Mar7(Fl_Light_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Mar7_i(o,v);
}

void HORGAN::cb_Mar8_i(Fl_Light_Button* o, void*) {
  hor->Operator[8].marimba=o->value();
}
void HORGAN::cb_Mar8(Fl_Light_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Mar8_i(o,v);
}

void HORGAN::cb_Mar9_i(Fl_Light_Button* o, void*) {
  hor->Operator[9].marimba=o->value();
}
void HORGAN::cb_Mar9(Fl_Light_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Mar9_i(o,v);
}

void HORGAN::cb_Mar10_i(Fl_Light_Button* o, void*) {
  hor->Operator[10].marimba=o->value();
}
void HORGAN::cb_Mar10(Fl_Light_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Mar10_i(o,v);
}

void HORGAN::cb_aboutwindow_i(Fl_Double_Window*, void*) {
  aboutwindow->hide();
}
void HORGAN::cb_aboutwindow(Fl_Double_Window* o, void* v) {
  ((HORGAN*)(o->user_data()))->cb_aboutwindow_i(o,v);
}

void HORGAN::cb_OK_i(Fl_Button*, void*) {
  aboutwindow->do_callback();
}
void HORGAN::cb_OK(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_OK_i(o,v);
}

void HORGAN::cb_Settingswindow_i(Fl_Double_Window*, void*) {
  Settingswindow->hide();
}
void HORGAN::cb_Settingswindow(Fl_Double_Window* o, void* v) {
  ((HORGAN*)(o->user_data()))->cb_Settingswindow_i(o,v);
}

void HORGAN::cb_SClose_i(Fl_Button*, void*) {
  Settingswindow->do_callback();
}
void HORGAN::cb_SClose(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_SClose_i(o,v);
}

void HORGAN::cb_Save3_i(Fl_Button*, void*) {
  Guarda_Pref(1);
fl_message("Audio device changes will take effect the next time you restart the program");
Settingswindow->hide();
}
void HORGAN::cb_Save3(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Save3_i(o,v);
}

void HORGAN::cb_BMidiIn_i(Fl_Browser* o, void*) {
  int valor;
valor = (int) o->value();
strcpy(hor->MID,o->text(valor));
o->select(valor,1);
hor->Conecta();
DMIN1->do_callback();
}
void HORGAN::cb_BMidiIn(Fl_Browser* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_BMidiIn_i(o,v);
}

void HORGAN::cb_Browse_i(Fl_Button*, void*) {
  char *filename;
filename=fl_file_chooser("Browse:","(*.horeb)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".horeb");
BFiname->value(filename);
strcpy(hor->BankFilename,filename);
}
void HORGAN::cb_Browse(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Browse_i(o,v);
}

void HORGAN::cb_Browse1_i(Fl_Button*, void*) {
  char *filename;
filename=fl_file_chooser("Browse:","(*.txt)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".txt");
RFiname->value(filename);
strcpy(hor->RhythmFilename,filename);
}
void HORGAN::cb_Browse1(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Browse1_i(o,v);
}

void HORGAN::cb_HORBank_i(Fl_Double_Window*, void*) {
  Guarda_Pref(2);
HORBank->hide();
Fl::focus(PANICO);
}
void HORGAN::cb_HORBank(Fl_Double_Window* o, void* v) {
  ((HORGAN*)(o->user_data()))->cb_HORBank_i(o,v);
}

void HORGAN::cb_BClose_i(Fl_Button*, void*) {
  HORBank->do_callback();
}
void HORGAN::cb_BClose(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_BClose_i(o,v);
}

void HORGAN::cb_BLoad_i(Fl_Menu_*, void*) {
  char *filename;
filename=fl_file_chooser("Load:","(*.horeb)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".horeb");
hor->loadbank(filename);
metebanco();
}
void HORGAN::cb_BLoad(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_BLoad_i(o,v);
}

void HORGAN::cb_BSave_i(Fl_Menu_*, void*) {
  char *filename;
#define EXT ".horeb"
filename=fl_file_chooser("Save:","(*"EXT")",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
#undef EXT
hor->savebank(filename);
}
void HORGAN::cb_BSave(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_BSave_i(o,v);
}

void HORGAN::cb_Close_i(Fl_Menu_*, void*) {
  HORBank->do_callback();
}
void HORGAN::cb_Close(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

Fl_Menu_Item HORGAN::menu_[] = {
 {gettext("&File"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&Load Bank"), 0,  (Fl_Callback*)HORGAN::cb_BLoad, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&Save Bank"), 0,  (Fl_Callback*)HORGAN::cb_BSave, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&Close"), 0,  (Fl_Callback*)HORGAN::cb_Close, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* HORGAN::BFile = HORGAN::menu_ + 0;
Fl_Menu_Item* HORGAN::BLoad = HORGAN::menu_ + 1;
Fl_Menu_Item* HORGAN::BSave = HORGAN::menu_ + 2;

void HORGAN::cb_Banco1_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(1);
if (Fl::event_button()==1) PutCombi(1);
o->label(hor->Banco[1].Name);
}
void HORGAN::cb_Banco1(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco1_i(o,v);
}

void HORGAN::cb_Banco2_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(2);
if (Fl::event_button()==1) PutCombi(2);
o->label(hor->Banco[2].Name);
}
void HORGAN::cb_Banco2(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco2_i(o,v);
}

void HORGAN::cb_Banco3_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(3);
if (Fl::event_button()==1) PutCombi(3);
o->label(hor->Banco[3].Name);
}
void HORGAN::cb_Banco3(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco3_i(o,v);
}

void HORGAN::cb_Banco4_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(4);
if (Fl::event_button()==1) PutCombi(4);
o->label(hor->Banco[4].Name);
}
void HORGAN::cb_Banco4(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco4_i(o,v);
}

void HORGAN::cb_Banco5_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(5);
if (Fl::event_button()==1) PutCombi(5);
o->label(hor->Banco[5].Name);
}
void HORGAN::cb_Banco5(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco5_i(o,v);
}

void HORGAN::cb_Banco6_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(6);
if (Fl::event_button()==1) PutCombi(6);
o->label(hor->Banco[6].Name);
}
void HORGAN::cb_Banco6(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco6_i(o,v);
}

void HORGAN::cb_Banco7_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(7);
if (Fl::event_button()==1) PutCombi(7);
o->label(hor->Banco[7].Name);
}
void HORGAN::cb_Banco7(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco7_i(o,v);
}

void HORGAN::cb_Banco8_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(8);
if (Fl::event_button()==1) PutCombi(8);
o->label(hor->Banco[8].Name);
}
void HORGAN::cb_Banco8(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco8_i(o,v);
}

void HORGAN::cb_Banco9_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(9);
if (Fl::event_button()==1) PutCombi(9);
o->label(hor->Banco[9].Name);
}
void HORGAN::cb_Banco9(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco9_i(o,v);
}

void HORGAN::cb_Banco10_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(10);
if (Fl::event_button()==1) PutCombi(10);
o->label(hor->Banco[10].Name);
}
void HORGAN::cb_Banco10(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco10_i(o,v);
}

void HORGAN::cb_Banco11_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(11);
if (Fl::event_button()==1) PutCombi(11);
o->label(hor->Banco[11].Name);
}
void HORGAN::cb_Banco11(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco11_i(o,v);
}

void HORGAN::cb_Banco12_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(12);
if (Fl::event_button()==1) PutCombi(12);
o->label(hor->Banco[12].Name);
}
void HORGAN::cb_Banco12(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco12_i(o,v);
}

void HORGAN::cb_Banco13_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(13);
if (Fl::event_button()==1) PutCombi(13);
o->label(hor->Banco[13].Name);
}
void HORGAN::cb_Banco13(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco13_i(o,v);
}

void HORGAN::cb_Banco14_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(14);
if (Fl::event_button()==1) PutCombi(14);
o->label(hor->Banco[14].Name);
}
void HORGAN::cb_Banco14(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco14_i(o,v);
}

void HORGAN::cb_Banco15_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(15);
if (Fl::event_button()==1) PutCombi(15);
o->label(hor->Banco[15].Name);
}
void HORGAN::cb_Banco15(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco15_i(o,v);
}

void HORGAN::cb_Banco16_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(16);
if (Fl::event_button()==1) PutCombi(16);
o->label(hor->Banco[16].Name);
}
void HORGAN::cb_Banco16(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco16_i(o,v);
}

void HORGAN::cb_Banco17_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(17);
if (Fl::event_button()==1) PutCombi(17);
o->label(hor->Banco[17].Name);
}
void HORGAN::cb_Banco17(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco17_i(o,v);
}

void HORGAN::cb_Banco18_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(18);
if (Fl::event_button()==1) PutCombi(18);
o->label(hor->Banco[18].Name);
}
void HORGAN::cb_Banco18(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco18_i(o,v);
}

void HORGAN::cb_Banco19_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(19);
if (Fl::event_button()==1) PutCombi(19);
o->label(hor->Banco[19].Name);
}
void HORGAN::cb_Banco19(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco19_i(o,v);
}

void HORGAN::cb_Banco20_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(20);
if (Fl::event_button()==1) PutCombi(20);
o->label(hor->Banco[20].Name);
}
void HORGAN::cb_Banco20(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco20_i(o,v);
}

void HORGAN::cb_Banco21_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(21);
if (Fl::event_button()==1) PutCombi(21);
o->label(hor->Banco[21].Name);
}
void HORGAN::cb_Banco21(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco21_i(o,v);
}

void HORGAN::cb_Banco22_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(22);
if (Fl::event_button()==1) PutCombi(22);
o->label(hor->Banco[22].Name);
}
void HORGAN::cb_Banco22(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco22_i(o,v);
}

void HORGAN::cb_Banco23_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(23);
if (Fl::event_button()==1) PutCombi(23);
o->label(hor->Banco[23].Name);
}
void HORGAN::cb_Banco23(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco23_i(o,v);
}

void HORGAN::cb_Banco24_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(24);
if (Fl::event_button()==1) PutCombi(24);
o->label(hor->Banco[24].Name);
}
void HORGAN::cb_Banco24(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco24_i(o,v);
}

void HORGAN::cb_Banco25_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(25);
if (Fl::event_button()==1) PutCombi(25);
o->label(hor->Banco[25].Name);
}
void HORGAN::cb_Banco25(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco25_i(o,v);
}

void HORGAN::cb_Banco26_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(26);
if (Fl::event_button()==1) PutCombi(26);
o->label(hor->Banco[26].Name);
}
void HORGAN::cb_Banco26(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco26_i(o,v);
}

void HORGAN::cb_Banco27_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(27);
if (Fl::event_button()==1) PutCombi(27);
o->label(hor->Banco[27].Name);
}
void HORGAN::cb_Banco27(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco27_i(o,v);
}

void HORGAN::cb_Banco28_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(28);
if (Fl::event_button()==1) PutCombi(28);
o->label(hor->Banco[28].Name);
}
void HORGAN::cb_Banco28(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco28_i(o,v);
}

void HORGAN::cb_Banco29_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(29);
if (Fl::event_button()==1) PutCombi(29);
o->label(hor->Banco[29].Name);
}
void HORGAN::cb_Banco29(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco29_i(o,v);
}

void HORGAN::cb_Banco30_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(30);
if (Fl::event_button()==1) PutCombi(30);
o->label(hor->Banco[30].Name);
}
void HORGAN::cb_Banco30(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco30_i(o,v);
}

void HORGAN::cb_Banco31_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(31);
if (Fl::event_button()==1) PutCombi(31);
o->label(hor->Banco[31].Name);
}
void HORGAN::cb_Banco31(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco31_i(o,v);
}

void HORGAN::cb_Banco32_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(32);
if (Fl::event_button()==1) PutCombi(32);
o->label(hor->Banco[32].Name);
}
void HORGAN::cb_Banco32(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco32_i(o,v);
}

void HORGAN::cb_RitEdit_i(Fl_Double_Window*, void*) {
  if((hor->Rt[hor->ae].bars < 1) || (hor->Rt[hor->ae].bars > 4))
{
fl_alert("Bars error.");
return;
}  

if((hor->Rt[hor->ae].quarter_note < 2) || (hor->Rt[hor->ae].quarter_note > 4))
{
fl_alert("Nom. error");
return;
}  
if (hor->file_ok == 1)
{
GetRit(hor->ae);
}
RitEdit->hide();
}
void HORGAN::cb_RitEdit(Fl_Double_Window* o, void* v) {
  ((HORGAN*)(o->user_data()))->cb_RitEdit_i(o,v);
}

void HORGAN::cb_RtName_i(Fl_Input* o, void*) {
  strcpy(hor->Rt[hor->ae].Nom , o->value());
}
void HORGAN::cb_RtName(Fl_Input* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_RtName_i(o,v);
}

void HORGAN::cb_RtFile_i(Fl_Input* o, void*) {
  strcpy(hor->Rt[hor->ae].Nfile, o->value());
}
void HORGAN::cb_RtFile(Fl_Input* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_RtFile_i(o,v);
}

void HORGAN::cb_RtBars_i(Fl_Value_Input* o, void*) {
  hor->Rt[hor->ae].bars = (int) o->value();
}
void HORGAN::cb_RtBars(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_RtBars_i(o,v);
}

void HORGAN::cb_RtDen_i(Fl_Value_Input* o, void*) {
  hor->Rt[hor->ae].quarter_note = (int)o->value();
QuitaPon();
}
void HORGAN::cb_RtDen(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_RtDen_i(o,v);
}

void HORGAN::cb_lb1_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 1;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb1(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb1_i(o,v);
}

void HORGAN::cb_lb2_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 2;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb2(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb2_i(o,v);
}

void HORGAN::cb_lb3_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 3;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb3(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb3_i(o,v);
}

void HORGAN::cb_lb4_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 4;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb4(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb4_i(o,v);
}

void HORGAN::cb_lbv1_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 1;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv1(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv1_i(o,v);
}

void HORGAN::cb_lbv2_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 2;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv2(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv2_i(o,v);
}

void HORGAN::cb_lbv3_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 3;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv3(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv3_i(o,v);
}

void HORGAN::cb_lbv4_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 4;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv4(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv4_i(o,v);
}

void HORGAN::cb_lb5_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 5;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb5(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb5_i(o,v);
}

void HORGAN::cb_lb6_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 6;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb6(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb6_i(o,v);
}

void HORGAN::cb_lb7_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 7;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb7(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb7_i(o,v);
}

void HORGAN::cb_lb8_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 8;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb8(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb8_i(o,v);
}

void HORGAN::cb_lbv5_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 5;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv5(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv5_i(o,v);
}

void HORGAN::cb_lbv6_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 6;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv6(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv6_i(o,v);
}

void HORGAN::cb_lbv7_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 7;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv7(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv7_i(o,v);
}

void HORGAN::cb_lbv8_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 8;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv8(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv8_i(o,v);
}

void HORGAN::cb_lb9_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 9;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb9(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb9_i(o,v);
}

void HORGAN::cb_lb10_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 10;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb10(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb10_i(o,v);
}

void HORGAN::cb_lb11_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 11;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb11(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb11_i(o,v);
}

void HORGAN::cb_lb12_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 12;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb12(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb12_i(o,v);
}

void HORGAN::cb_lbv9_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 9;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv9(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv9_i(o,v);
}

void HORGAN::cb_lbv10_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 10;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv10(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv10_i(o,v);
}

void HORGAN::cb_lbv11_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 11;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv11(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv11_i(o,v);
}

void HORGAN::cb_lbv12_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 12;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv12(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv12_i(o,v);
}

void HORGAN::cb_lb13_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 13;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb13(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb13_i(o,v);
}

void HORGAN::cb_lb14_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 14;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb14(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb14_i(o,v);
}

void HORGAN::cb_lb15_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 15;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb15(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb15_i(o,v);
}

void HORGAN::cb_lb16_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 16;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb16(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb16_i(o,v);
}

void HORGAN::cb_lbv13_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 13;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv13(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv13_i(o,v);
}

void HORGAN::cb_lbv14_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 14;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv14(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv14_i(o,v);
}

void HORGAN::cb_lbv15_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 15;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv15(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv15_i(o,v);
}

void HORGAN::cb_lbv16_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 16;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv16(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv16_i(o,v);
}

void HORGAN::cb_SBar_i(Fl_Counter* o, void*) {
  if (o->value() > hor->Rt[hor->ae].bars) o->value(hor->Rt[hor->ae].bars);
hor->pattern_bars = (int) o->value();
meteval();
}
void HORGAN::cb_SBar(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_SBar_i(o,v);
}

void HORGAN::cb_CloRit_i(Fl_Button*, void*) {
  RitEdit->do_callback();
}
void HORGAN::cb_CloRit(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_CloRit_i(o,v);
}

void HORGAN::cb_ADSRwin_i(Fl_Double_Window* o, void*) {
  Guarda_Pref(3);
o->hide();
}
void HORGAN::cb_ADSRwin(Fl_Double_Window* o, void* v) {
  ((HORGAN*)(o->user_data()))->cb_ADSRwin_i(o,v);
}

void HORGAN::cb_D_attack_i(Rueda* o, void*) {
  hor->attack=o->value();
hor->u_attack = 1.0 / hor->attack;
ponvalor(o->value());
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_D_attack(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_attack_i(o,v);
}

void HORGAN::cb_D_decay_i(Rueda* o, void*) {
  hor->decay=o->value();
hor->u_decay= 1.0 / hor->decay;
ponvalor(o->value());
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_D_decay(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_decay_i(o,v);
}

void HORGAN::cb_D_sustain_i(Rueda* o, void*) {
  hor->sustain=o->value();
ponvalor(o->value());
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_D_sustain(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_sustain_i(o,v);
}

void HORGAN::cb_D_p_attack_i(Rueda* o, void*) {
  hor->p_attack=o->value();
hor->u_p_attack= 1.0 / hor->p_attack;
ponvalor(o->value());
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_D_p_attack(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_p_attack_i(o,v);
}

void HORGAN::cb_D_p_decay_i(Rueda* o, void*) {
  hor->p_decay=o->value();
hor->u_p_decay= 1.0 / hor->p_decay;
ponvalor(o->value());
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_D_p_decay(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_p_decay_i(o,v);
}

void HORGAN::cb_D_Freq_i(Fl_Counter* o, void*) {
  D_Att->value(hor->Normalize[(int)o->value()]);

char temp[32];
bzero(temp,sizeof(temp));
sprintf(temp,"Drawbar %.1f",hor->lasfreq[(int)o->value()]);
Saca->copy_label(temp);
}
void HORGAN::cb_D_Freq(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_Freq_i(o,v);
}

void HORGAN::cb_D_Att_i(Fl_Counter* o, void*) {
  hor->Normalize[(int) D_Freq->value()]=o->value();
Actu();
}
void HORGAN::cb_D_Att(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_Att_i(o,v);
}

void HORGAN::cb_D_Freq_F_i(Fl_Counter* o, void*) {
  D_FFval->value(hor->Operator[(int)o->value()].harmonic_fine);

char temp[32];
bzero(temp,sizeof(temp));
sprintf(temp,"Drawbar %d",(int)o->value());
Saca->copy_label(temp);
}
void HORGAN::cb_D_Freq_F(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_Freq_F_i(o,v);
}

void HORGAN::cb_D_FFval_i(Fl_Counter* o, void*) {
  hor->Operator[(int) D_Freq_F->value()].harmonic_fine=o->value();
Actu();
}
void HORGAN::cb_D_FFval(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_FFval_i(o,v);
}

void HORGAN::cb_D_Rot_Amp_i(Fl_Counter* o, void*) {
  hor->Rotary_LFO_Amplitude=o->value();
Actu();
}
void HORGAN::cb_D_Rot_Amp(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_Rot_Amp_i(o,v);
}

void HORGAN::cb_D_O_Transpose_i(Fl_Counter* o, void*) {
  hor->organ_transpose=(int)o->value();
Actu();
}
void HORGAN::cb_D_O_Transpose(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_O_Transpose_i(o,v);
}

Fl_Double_Window* HORGAN::make_window() {
  { HORwindow = new Fl_Double_Window(825, 595);
    HORwindow->color(FL_LIGHT1);
    HORwindow->labelcolor((Fl_Color)208);
    HORwindow->callback((Fl_Callback*)cb_HORwindow, (void*)(this));
    HORwindow->hotspot(HORwindow);
    { Fl_Box* o = new Fl_Box(595, 405, 230, 190);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(17);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(0, 310, 595, 285);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(385, 235, 75, 75);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(17);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(530, 95, 65, 215);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(17);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(0, 95, 105, 215);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(19);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(-30, 25, 855, 70);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(460, 95, 70, 215);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(105, 95, 65, 215);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(19);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(235, 235, 150, 75);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(17);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(385, 95, 75, 140);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(17);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(170, 95, 65, 215);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(19);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    } // Fl_Box* o
    { PANICO = new Fl_Button(5, 275, 95, 30, gettext("Panic!!"));
      PANICO->box(FL_PLASTIC_UP_BOX);
      PANICO->shortcut(0xff0d);
      PANICO->color((Fl_Color)1);
      PANICO->labelsize(15);
      PANICO->labelcolor(FL_BACKGROUND2_COLOR);
      PANICO->callback((Fl_Callback*)cb_PANICO);
    } // Fl_Button* PANICO
    { MenuPrincipal = new Fl_Menu_Bar(0, 0, 1030, 25);
      MenuPrincipal->box(FL_THIN_UP_BOX);
      MenuPrincipal->menu(menu_MenuPrincipal);
    } // Fl_Menu_Bar* MenuPrincipal
    { Fl_Box* o = new Fl_Box(180, 245, 46, 46);
      o->box(FL_OVAL_FRAME);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(240, 139, 46, 46);
      o->box(FL_OVAL_FRAME);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(115, 244, 46, 46);
      o->box(FL_OVAL_FRAME);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(305, 115, 31, 90);
      o->box(FL_DOWN_FRAME);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(180, 99, 46, 46);
      o->box(FL_OVAL_FRAME);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(235, 95, 150, 140);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(19);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(115, 99, 46, 46);
      o->box(FL_OVAL_FRAME);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(115, 174, 46, 46);
      o->box(FL_OVAL_FRAME);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(250, 210, 55, 20, gettext("Volume"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(10);
      o->labelcolor((Fl_Color)208);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(385, 240, 75, 15, gettext("Master Tune"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(10);
      o->labelcolor((Fl_Color)208);
      o->align(192|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(320, 240, 45, 15, gettext("Delay"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(10);
      o->labelcolor((Fl_Color)208);
      o->align(192|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(385, 273, 75, 15, gettext("Transpose"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(10);
      o->labelcolor((Fl_Color)208);
      o->align(192|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(240, 139, 46, 46);
      o->box(FL_OVAL_FRAME);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(315, 273, 50, 15, gettext("Volume"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(10);
      o->labelcolor((Fl_Color)208);
      o->align(192|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(655, 525, 46, 45);
      o->box(FL_OVAL_FRAME);
    } // Fl_Box* o
    { CF = new Fl_Light_Button(5, 235, 95, 40, gettext("Compare First"));
      CF->box(FL_PLASTIC_UP_BOX);
      CF->color(FL_FOREGROUND_COLOR);
      CF->labelcolor(FL_BACKGROUND2_COLOR);
      CF->callback((Fl_Callback*)cb_CF);
      CF->align(196|FL_ALIGN_INSIDE);
      CF->when(FL_WHEN_CHANGED);
    } // Fl_Light_Button* CF
    { CL = new Fl_Light_Button(5, 195, 95, 40, gettext("Compare Last"));
      CL->box(FL_PLASTIC_UP_BOX);
      CL->color(FL_FOREGROUND_COLOR);
      CL->labelcolor(FL_BACKGROUND2_COLOR);
      CL->callback((Fl_Callback*)cb_CL);
      CL->align(196|FL_ALIGN_INSIDE);
      CL->when(FL_WHEN_CHANGED);
    } // Fl_Light_Button* CL
    { VUI1 = new Fl_Slider(795, 35, 25, 50);
      VUI1->type(2);
      VUI1->color((Fl_Color)30);
      VUI1->selection_color((Fl_Color)79);
      VUI1->minimum(127);
      VUI1->maximum(0);
      VUI1->step(1);
      VUI1->callback((Fl_Callback*)cb_VUI1);
    } // Fl_Slider* VUI1
    { Fl_Box* o = new Fl_Box(725, 65, 65, 20, gettext("MIDI IN"));
      o->labelsize(9);
      o->align(FL_ALIGN_CLIP);
    } // Fl_Box* o
    { Fl_Box* o = DMIN1 = new Fl_Box(530, 35, 260, 25);
      DMIN1->box(FL_PLASTIC_DOWN_BOX);
      DMIN1->color((Fl_Color)40);
      DMIN1->labelsize(12);
      DMIN1->callback((Fl_Callback*)cb_DMIN1);
      DMIN1->align(68|FL_ALIGN_INSIDE);
      o->label(hor->MID);
    } // Fl_Box* DMIN1
    { DispNumber = new Fl_Box(15, 100, 75, 60, gettext("--"));
      DispNumber->box(FL_SHADOW_BOX);
      DispNumber->color(FL_FOREGROUND_COLOR);
      DispNumber->selection_color(FL_BACKGROUND2_COLOR);
      DispNumber->labeltype(FL_ENGRAVED_LABEL);
      DispNumber->labelfont(14);
      DispNumber->labelsize(37);
      DispNumber->labelcolor((Fl_Color)128);
      DispNumber->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* DispNumber
    { Transpose = new Fl_Counter(395, 285, 55, 20);
      Transpose->type(1);
      Transpose->labeltype(FL_EMBOSSED_LABEL);
      Transpose->labelcolor((Fl_Color)208);
      Transpose->minimum(-48);
      Transpose->maximum(48);
      Transpose->step(1);
      Transpose->callback((Fl_Callback*)cb_Transpose);
      Transpose->align(FL_ALIGN_LEFT);
      Transpose->when(FL_WHEN_RELEASE);
    } // Fl_Counter* Transpose
    { Master = new Drawbar(535, 100, 55, 190, gettext("Volume"));
      Master->type(4);
      Master->box(FL_PLASTIC_DOWN_BOX);
      Master->color(FL_FOREGROUND_COLOR);
      Master->selection_color((Fl_Color)1);
      Master->labeltype(FL_ENGRAVED_LABEL);
      Master->labelfont(0);
      Master->labelsize(12);
      Master->labelcolor((Fl_Color)4);
      Master->minimum(100);
      Master->maximum(0);
      Master->step(1);
      Master->value(70);
      Master->callback((Fl_Callback*)cb_Master);
      Master->align(FL_ALIGN_BOTTOM);
      Master->when(FL_WHEN_CHANGED);
    } // Drawbar* Master
    { Nombre = new Fl_Input(5, 35, 300, 50, gettext("  "));
      Nombre->box(FL_PLASTIC_DOWN_BOX);
      Nombre->color((Fl_Color)219);
      Nombre->labeltype(FL_ENGRAVED_LABEL);
      Nombre->labelsize(21);
      Nombre->labelcolor((Fl_Color)208);
      Nombre->textsize(29);
      Nombre->textcolor(88);
      Nombre->callback((Fl_Callback*)cb_Nombre);
      Nombre->align(68);
    } // Fl_Input* Nombre
    { MasterT = new Fl_Counter(395, 255, 55, 20);
      MasterT->type(1);
      MasterT->labeltype(FL_EMBOSSED_LABEL);
      MasterT->labelcolor((Fl_Color)208);
      MasterT->minimum(-99);
      MasterT->maximum(99);
      MasterT->step(1);
      MasterT->callback((Fl_Callback*)cb_MasterT);
      MasterT->align(FL_ALIGN_LEFT);
    } // Fl_Counter* MasterT
    { V1 = new Drawbar(2, 335, 55, 205);
      V1->type(4);
      V1->box(FL_PLASTIC_DOWN_BOX);
      V1->color((Fl_Color)24);
      V1->selection_color(FL_GREEN);
      V1->labeltype(FL_ENGRAVED_LABEL);
      V1->labelfont(0);
      V1->labelsize(14);
      V1->labelcolor((Fl_Color)4);
      V1->maximum(99);
      V1->step(1);
      V1->callback((Fl_Callback*)cb_V1);
      V1->align(66);
      V1->when(FL_WHEN_CHANGED);
    } // Drawbar* V1
    { V2 = new Drawbar(61, 335, 55, 205);
      V2->type(4);
      V2->box(FL_PLASTIC_DOWN_BOX);
      V2->color((Fl_Color)24);
      V2->selection_color(FL_GREEN);
      V2->labeltype(FL_ENGRAVED_LABEL);
      V2->labelfont(0);
      V2->labelsize(14);
      V2->labelcolor((Fl_Color)4);
      V2->maximum(99);
      V2->step(1);
      V2->callback((Fl_Callback*)cb_V2);
      V2->align(66);
      V2->when(FL_WHEN_CHANGED);
    } // Drawbar* V2
    { V3 = new Drawbar(120, 335, 55, 205);
      V3->type(4);
      V3->box(FL_PLASTIC_DOWN_BOX);
      V3->color((Fl_Color)24);
      V3->selection_color(FL_GREEN);
      V3->labeltype(FL_ENGRAVED_LABEL);
      V3->labelfont(0);
      V3->labelsize(14);
      V3->labelcolor((Fl_Color)4);
      V3->maximum(99);
      V3->step(1);
      V3->callback((Fl_Callback*)cb_V3);
      V3->align(66);
      V3->when(FL_WHEN_CHANGED);
    } // Drawbar* V3
    { V4 = new Drawbar(180, 335, 55, 205);
      V4->type(4);
      V4->box(FL_PLASTIC_DOWN_BOX);
      V4->color((Fl_Color)24);
      V4->selection_color(FL_GREEN);
      V4->labeltype(FL_ENGRAVED_LABEL);
      V4->labelfont(0);
      V4->labelsize(14);
      V4->labelcolor((Fl_Color)4);
      V4->maximum(99);
      V4->step(1);
      V4->callback((Fl_Callback*)cb_V4);
      V4->align(66);
      V4->when(FL_WHEN_CHANGED);
    } // Drawbar* V4
    { V5 = new Drawbar(238, 335, 55, 205);
      V5->type(4);
      V5->box(FL_PLASTIC_DOWN_BOX);
      V5->color((Fl_Color)24);
      V5->selection_color(FL_GREEN);
      V5->labeltype(FL_ENGRAVED_LABEL);
      V5->labelfont(0);
      V5->labelsize(14);
      V5->labelcolor((Fl_Color)4);
      V5->maximum(99);
      V5->step(1);
      V5->callback((Fl_Callback*)cb_V5);
      V5->align(66);
      V5->when(FL_WHEN_CHANGED);
    } // Drawbar* V5
    { V6 = new Drawbar(295, 335, 55, 205);
      V6->type(4);
      V6->box(FL_PLASTIC_DOWN_BOX);
      V6->color((Fl_Color)24);
      V6->selection_color(FL_GREEN);
      V6->labeltype(FL_ENGRAVED_LABEL);
      V6->labelfont(0);
      V6->labelsize(14);
      V6->labelcolor((Fl_Color)4);
      V6->maximum(99);
      V6->step(1);
      V6->callback((Fl_Callback*)cb_V6);
      V6->align(66);
      V6->when(FL_WHEN_CHANGED);
    } // Drawbar* V6
    { V7 = new Drawbar(355, 335, 55, 205);
      V7->type(4);
      V7->box(FL_PLASTIC_DOWN_BOX);
      V7->color((Fl_Color)24);
      V7->selection_color(FL_GREEN);
      V7->labeltype(FL_ENGRAVED_LABEL);
      V7->labelfont(0);
      V7->labelsize(14);
      V7->labelcolor((Fl_Color)4);
      V7->maximum(99);
      V7->step(1);
      V7->callback((Fl_Callback*)cb_V7);
      V7->align(66);
      V7->when(FL_WHEN_CHANGED);
    } // Drawbar* V7
    { V8 = new Drawbar(415, 335, 55, 205);
      V8->type(4);
      V8->box(FL_PLASTIC_DOWN_BOX);
      V8->color((Fl_Color)24);
      V8->selection_color(FL_GREEN);
      V8->labeltype(FL_ENGRAVED_LABEL);
      V8->labelfont(0);
      V8->labelsize(14);
      V8->labelcolor((Fl_Color)4);
      V8->maximum(99);
      V8->step(1);
      V8->callback((Fl_Callback*)cb_V8);
      V8->align(66);
      V8->when(FL_WHEN_CHANGED);
    } // Drawbar* V8
    { V9 = new Drawbar(474, 335, 55, 205);
      V9->type(4);
      V9->box(FL_PLASTIC_DOWN_BOX);
      V9->color((Fl_Color)24);
      V9->selection_color(FL_GREEN);
      V9->labeltype(FL_ENGRAVED_LABEL);
      V9->labelfont(0);
      V9->labelsize(14);
      V9->labelcolor((Fl_Color)4);
      V9->maximum(99);
      V9->step(1);
      V9->callback((Fl_Callback*)cb_V9);
      V9->align(66);
      V9->when(FL_WHEN_CHANGED);
    } // Drawbar* V9
    { V10 = new Drawbar(533, 335, 55, 205);
      V10->type(4);
      V10->box(FL_PLASTIC_DOWN_BOX);
      V10->color((Fl_Color)24);
      V10->selection_color(FL_GREEN);
      V10->labeltype(FL_ENGRAVED_LABEL);
      V10->labelfont(0);
      V10->labelsize(14);
      V10->labelcolor((Fl_Color)4);
      V10->maximum(99);
      V10->step(1);
      V10->callback((Fl_Callback*)cb_V10);
      V10->align(66);
      V10->when(FL_WHEN_CHANGED);
    } // Drawbar* V10
    { Detune = new Rueda(180, 245, 45, 45, gettext("Detune"));
      Detune->box(FL_OSHADOW_BOX);
      Detune->color(FL_DARK1);
      Detune->selection_color(FL_INACTIVE_COLOR);
      Detune->labeltype(FL_ENGRAVED_LABEL);
      Detune->labelfont(0);
      Detune->labelsize(12);
      Detune->labelcolor((Fl_Color)4);
      Detune->maximum(100);
      Detune->step(0.1);
      Detune->callback((Fl_Callback*)cb_Detune);
      Detune->align(FL_ALIGN_BOTTOM);
      Detune->when(FL_WHEN_RELEASE);
    } // Rueda* Detune
    { LFOSpeed = new Rueda(180, 100, 45, 45, gettext("Speed"));
      LFOSpeed->box(FL_OSHADOW_BOX);
      LFOSpeed->color(FL_DARK1);
      LFOSpeed->selection_color(FL_INACTIVE_COLOR);
      LFOSpeed->labeltype(FL_ENGRAVED_LABEL);
      LFOSpeed->labelfont(0);
      LFOSpeed->labelsize(12);
      LFOSpeed->labelcolor((Fl_Color)4);
      LFOSpeed->maximum(40);
      LFOSpeed->step(0.1);
      LFOSpeed->callback((Fl_Callback*)cb_LFOSpeed);
      LFOSpeed->align(FL_ALIGN_BOTTOM);
      LFOSpeed->when(FL_WHEN_CHANGED);
    } // Rueda* LFOSpeed
    { LFOPitch = new Rueda(115, 245, 45, 45, gettext("Tremolo"));
      LFOPitch->box(FL_OSHADOW_BOX);
      LFOPitch->color(FL_DARK1);
      LFOPitch->selection_color(FL_INACTIVE_COLOR);
      LFOPitch->labeltype(FL_ENGRAVED_LABEL);
      LFOPitch->labelfont(0);
      LFOPitch->labelsize(12);
      LFOPitch->labelcolor((Fl_Color)4);
      LFOPitch->maximum(200);
      LFOPitch->step(1);
      LFOPitch->callback((Fl_Callback*)cb_LFOPitch);
      LFOPitch->align(FL_ALIGN_BOTTOM);
      LFOPitch->when(FL_WHEN_CHANGED);
    } // Rueda* LFOPitch
    { PLFOSpeed = new Rueda(115, 100, 45, 45, gettext("Speed"));
      PLFOSpeed->box(FL_OSHADOW_BOX);
      PLFOSpeed->color(FL_DARK1);
      PLFOSpeed->selection_color(FL_INACTIVE_COLOR);
      PLFOSpeed->labeltype(FL_ENGRAVED_LABEL);
      PLFOSpeed->labelfont(0);
      PLFOSpeed->labelsize(12);
      PLFOSpeed->labelcolor((Fl_Color)4);
      PLFOSpeed->maximum(30);
      PLFOSpeed->step(0.01);
      PLFOSpeed->callback((Fl_Callback*)cb_PLFOSpeed);
      PLFOSpeed->align(FL_ALIGN_BOTTOM);
      PLFOSpeed->when(FL_WHEN_CHANGED);
    } // Rueda* PLFOSpeed
    { PLFODelay = new Rueda(115, 175, 45, 45, gettext("Delay"));
      PLFODelay->box(FL_OSHADOW_BOX);
      PLFODelay->color(FL_DARK1);
      PLFODelay->selection_color(FL_INACTIVE_COLOR);
      PLFODelay->labeltype(FL_ENGRAVED_LABEL);
      PLFODelay->labelfont(0);
      PLFODelay->labelsize(12);
      PLFODelay->labelcolor((Fl_Color)4);
      PLFODelay->maximum(99);
      PLFODelay->step(1);
      PLFODelay->callback((Fl_Callback*)cb_PLFODelay);
      PLFODelay->align(FL_ALIGN_BOTTOM);
      PLFODelay->when(FL_WHEN_CHANGED);
    } // Rueda* PLFODelay
    { EchoVol = new Fl_Counter(310, 285, 65, 20);
      EchoVol->type(1);
      EchoVol->labelcolor((Fl_Color)208);
      EchoVol->minimum(0);
      EchoVol->maximum(99);
      EchoVol->step(1);
      EchoVol->callback((Fl_Callback*)cb_EchoVol);
      EchoVol->when(FL_WHEN_RELEASE);
    } // Fl_Counter* EchoVol
    { EchoDelay = new Fl_Counter(310, 255, 65, 20);
      EchoDelay->type(1);
      EchoDelay->labelcolor((Fl_Color)208);
      EchoDelay->minimum(0);
      EchoDelay->maximum(1);
      EchoDelay->step(0.01);
      EchoDelay->callback((Fl_Callback*)cb_EchoDelay);
      EchoDelay->when(FL_WHEN_RELEASE);
    } // Fl_Counter* EchoDelay
    { H1 = new Fl_Slider(2, 563, 55, 25);
      H1->type(5);
      H1->box(FL_PLASTIC_DOWN_BOX);
      H1->color(FL_FOREGROUND_COLOR);
      H1->selection_color((Fl_Color)3);
      H1->labeltype(FL_ENGRAVED_LABEL);
      H1->labelcolor((Fl_Color)4);
      H1->minimum(1);
      H1->maximum(22);
      H1->step(1);
      H1->callback((Fl_Callback*)cb_H1);
      H1->align(FL_ALIGN_TOP);
      H1->when(FL_WHEN_RELEASE);
    } // Fl_Slider* H1
    { H2 = new Fl_Slider(61, 563, 55, 25);
      H2->type(5);
      H2->box(FL_PLASTIC_DOWN_BOX);
      H2->color(FL_FOREGROUND_COLOR);
      H2->selection_color((Fl_Color)3);
      H2->labeltype(FL_ENGRAVED_LABEL);
      H2->labelcolor((Fl_Color)4);
      H2->minimum(1);
      H2->maximum(22);
      H2->step(1);
      H2->callback((Fl_Callback*)cb_H2);
      H2->when(FL_WHEN_RELEASE);
    } // Fl_Slider* H2
    { H3 = new Fl_Slider(120, 565, 55, 25);
      H3->type(5);
      H3->box(FL_PLASTIC_DOWN_BOX);
      H3->color(FL_FOREGROUND_COLOR);
      H3->selection_color((Fl_Color)3);
      H3->labeltype(FL_ENGRAVED_LABEL);
      H3->labelcolor((Fl_Color)4);
      H3->minimum(1);
      H3->maximum(22);
      H3->step(1);
      H3->callback((Fl_Callback*)cb_H3);
      H3->when(FL_WHEN_RELEASE);
    } // Fl_Slider* H3
    { H4 = new Fl_Slider(179, 565, 55, 25);
      H4->type(5);
      H4->box(FL_PLASTIC_DOWN_BOX);
      H4->color(FL_FOREGROUND_COLOR);
      H4->selection_color((Fl_Color)3);
      H4->labeltype(FL_ENGRAVED_LABEL);
      H4->labelcolor((Fl_Color)4);
      H4->minimum(1);
      H4->maximum(22);
      H4->step(1);
      H4->callback((Fl_Callback*)cb_H4);
      H4->when(FL_WHEN_RELEASE);
    } // Fl_Slider* H4
    { H5 = new Fl_Slider(238, 565, 55, 25);
      H5->type(5);
      H5->box(FL_PLASTIC_DOWN_BOX);
      H5->color(FL_FOREGROUND_COLOR);
      H5->selection_color((Fl_Color)3);
      H5->labeltype(FL_ENGRAVED_LABEL);
      H5->labelcolor((Fl_Color)4);
      H5->minimum(1);
      H5->maximum(22);
      H5->step(1);
      H5->callback((Fl_Callback*)cb_H5);
      H5->when(FL_WHEN_RELEASE);
    } // Fl_Slider* H5
    { H6 = new Fl_Slider(297, 565, 55, 25);
      H6->type(5);
      H6->box(FL_PLASTIC_DOWN_BOX);
      H6->color(FL_FOREGROUND_COLOR);
      H6->selection_color((Fl_Color)3);
      H6->labeltype(FL_ENGRAVED_LABEL);
      H6->labelcolor((Fl_Color)4);
      H6->minimum(1);
      H6->maximum(22);
      H6->step(1);
      H6->callback((Fl_Callback*)cb_H6);
      H6->when(FL_WHEN_RELEASE);
    } // Fl_Slider* H6
    { H7 = new Fl_Slider(356, 565, 55, 25);
      H7->type(5);
      H7->box(FL_PLASTIC_DOWN_BOX);
      H7->color(FL_FOREGROUND_COLOR);
      H7->selection_color((Fl_Color)3);
      H7->labeltype(FL_ENGRAVED_LABEL);
      H7->labelcolor((Fl_Color)4);
      H7->minimum(1);
      H7->maximum(22);
      H7->step(1);
      H7->callback((Fl_Callback*)cb_H7);
      H7->when(FL_WHEN_RELEASE);
    } // Fl_Slider* H7
    { H8 = new Fl_Slider(415, 565, 55, 25);
      H8->type(5);
      H8->box(FL_PLASTIC_DOWN_BOX);
      H8->color(FL_FOREGROUND_COLOR);
      H8->selection_color((Fl_Color)3);
      H8->labeltype(FL_ENGRAVED_LABEL);
      H8->labelcolor((Fl_Color)4);
      H8->minimum(1);
      H8->maximum(22);
      H8->step(1);
      H8->callback((Fl_Callback*)cb_H8);
      H8->when(FL_WHEN_RELEASE);
    } // Fl_Slider* H8
    { H9 = new Fl_Slider(474, 565, 55, 25);
      H9->type(5);
      H9->box(FL_PLASTIC_DOWN_BOX);
      H9->color(FL_FOREGROUND_COLOR);
      H9->selection_color((Fl_Color)3);
      H9->labeltype(FL_ENGRAVED_LABEL);
      H9->labelcolor((Fl_Color)4);
      H9->minimum(1);
      H9->maximum(22);
      H9->step(1);
      H9->callback((Fl_Callback*)cb_H9);
      H9->when(FL_WHEN_RELEASE);
    } // Fl_Slider* H9
    { H10 = new Fl_Slider(533, 565, 55, 25);
      H10->type(5);
      H10->box(FL_PLASTIC_DOWN_BOX);
      H10->color(FL_FOREGROUND_COLOR);
      H10->selection_color((Fl_Color)3);
      H10->labeltype(FL_ENGRAVED_LABEL);
      H10->labelcolor((Fl_Color)4);
      H10->minimum(1);
      H10->maximum(22);
      H10->step(1);
      H10->callback((Fl_Callback*)cb_H10);
      H10->when(FL_WHEN_RELEASE);
    } // Fl_Slider* H10
    { Rota = new Fl_Button(180, 170, 45, 30, gettext("Rotary"));
      Rota->type(1);
      Rota->box(FL_PLASTIC_UP_BOX);
      Rota->color((Fl_Color)31);
      Rota->selection_color((Fl_Color)135);
      Rota->labeltype(FL_ENGRAVED_LABEL);
      Rota->labelsize(10);
      Rota->callback((Fl_Callback*)cb_Rota);
      Rota->align(FL_ALIGN_CLIP);
    } // Fl_Button* Rota
    { ELFOSpeed = new Rueda(240, 140, 45, 45, gettext("Speed"));
      ELFOSpeed->box(FL_OSHADOW_BOX);
      ELFOSpeed->color(FL_DARK1);
      ELFOSpeed->selection_color(FL_INACTIVE_COLOR);
      ELFOSpeed->labeltype(FL_ENGRAVED_LABEL);
      ELFOSpeed->labelfont(0);
      ELFOSpeed->labelsize(12);
      ELFOSpeed->labelcolor((Fl_Color)4);
      ELFOSpeed->maximum(5);
      ELFOSpeed->step(0.01);
      ELFOSpeed->callback((Fl_Callback*)cb_ELFOSpeed);
      ELFOSpeed->align(FL_ALIGN_BOTTOM);
      ELFOSpeed->when(FL_WHEN_CHANGED);
    } // Rueda* ELFOSpeed
    { ELFOAmplitude = new Drawbar(310, 115, 30, 90, gettext("Amp"));
      ELFOAmplitude->type(4);
      ELFOAmplitude->box(FL_PLASTIC_DOWN_BOX);
      ELFOAmplitude->color((Fl_Color)24);
      ELFOAmplitude->selection_color((Fl_Color)1);
      ELFOAmplitude->labeltype(FL_ENGRAVED_LABEL);
      ELFOAmplitude->labelfont(0);
      ELFOAmplitude->labelsize(12);
      ELFOAmplitude->labelcolor((Fl_Color)4);
      ELFOAmplitude->maximum(99);
      ELFOAmplitude->step(1);
      ELFOAmplitude->callback((Fl_Callback*)cb_ELFOAmplitude);
      ELFOAmplitude->align(65);
      ELFOAmplitude->when(FL_WHEN_CHANGED);
    } // Drawbar* ELFOAmplitude
    { POPO = new Drawbar(345, 115, 30, 90, gettext("Del."));
      POPO->type(4);
      POPO->box(FL_PLASTIC_DOWN_BOX);
      POPO->color((Fl_Color)24);
      POPO->selection_color((Fl_Color)3);
      POPO->labeltype(FL_ENGRAVED_LABEL);
      POPO->labelfont(0);
      POPO->labelsize(12);
      POPO->labelcolor((Fl_Color)4);
      POPO->maximum(99);
      POPO->step(0.1);
      POPO->callback((Fl_Callback*)cb_POPO);
      POPO->align(65);
      POPO->when(FL_WHEN_CHANGED);
    } // Drawbar* POPO
    { ChorVol = new Fl_Counter(310, 210, 65, 20);
      ChorVol->type(1);
      ChorVol->labelcolor((Fl_Color)208);
      ChorVol->minimum(0);
      ChorVol->maximum(99);
      ChorVol->step(1);
      ChorVol->callback((Fl_Callback*)cb_ChorVol);
      ChorVol->when(FL_WHEN_RELEASE);
    } // Fl_Counter* ChorVol
    { Split = new Fl_Button(180, 205, 45, 30, gettext("Split"));
      Split->type(1);
      Split->box(FL_PLASTIC_UP_BOX);
      Split->color((Fl_Color)31);
      Split->selection_color((Fl_Color)135);
      Split->labeltype(FL_ENGRAVED_LABEL);
      Split->labelsize(10);
      Split->callback((Fl_Callback*)cb_Split);
      Split->align(FL_ALIGN_CLIP);
    } // Fl_Button* Split
    { DMIN2 = new Fl_Box(530, 60, 85, 25);
      DMIN2->box(FL_PLASTIC_DOWN_BOX);
      DMIN2->color((Fl_Color)40);
      DMIN2->labelsize(12);
      DMIN2->callback((Fl_Callback*)cb_DMIN2);
      DMIN2->align(68|FL_ALIGN_INSIDE);
    } // Fl_Box* DMIN2
    { EchoOn = new Fl_Button(240, 245, 55, 30, gettext("Delay"));
      EchoOn->type(1);
      EchoOn->box(FL_PLASTIC_UP_BOX);
      EchoOn->color((Fl_Color)31);
      EchoOn->selection_color((Fl_Color)135);
      EchoOn->labeltype(FL_ENGRAVED_LABEL);
      EchoOn->labelsize(10);
      EchoOn->callback((Fl_Callback*)cb_EchoOn);
      EchoOn->align(FL_ALIGN_CLIP);
    } // Fl_Button* EchoOn
    { ChorusOn = new Fl_Button(240, 100, 55, 30, gettext("Chorus"));
      ChorusOn->type(1);
      ChorusOn->box(FL_PLASTIC_UP_BOX);
      ChorusOn->color((Fl_Color)31);
      ChorusOn->selection_color((Fl_Color)135);
      ChorusOn->labeltype(FL_ENGRAVED_LABEL);
      ChorusOn->labelsize(10);
      ChorusOn->callback((Fl_Callback*)cb_ChorusOn);
      ChorusOn->align(FL_ALIGN_CLIP);
    } // Fl_Button* ChorusOn
    { Fl_Group* o = new Fl_Group(385, 135, 75, 100);
      { R1 = new Fl_Button(395, 135, 25, 20, gettext("1"));
        R1->type(102);
        R1->box(FL_PLASTIC_UP_BOX);
        R1->color((Fl_Color)31);
        R1->selection_color((Fl_Color)1);
        R1->labeltype(FL_ENGRAVED_LABEL);
        R1->labelsize(9);
        R1->callback((Fl_Callback*)cb_R1);
        R1->deactivate();
      } // Fl_Button* R1
      { R2 = new Fl_Button(425, 135, 25, 20, gettext("2"));
        R2->type(102);
        R2->box(FL_PLASTIC_UP_BOX);
        R2->color((Fl_Color)31);
        R2->selection_color((Fl_Color)1);
        R2->labeltype(FL_ENGRAVED_LABEL);
        R2->labelsize(9);
        R2->callback((Fl_Callback*)cb_R2);
        R2->deactivate();
      } // Fl_Button* R2
      { R3 = new Fl_Button(395, 160, 25, 20, gettext("3"));
        R3->type(102);
        R3->box(FL_PLASTIC_UP_BOX);
        R3->color((Fl_Color)31);
        R3->selection_color((Fl_Color)1);
        R3->labeltype(FL_ENGRAVED_LABEL);
        R3->labelsize(9);
        R3->callback((Fl_Callback*)cb_R3);
        R3->deactivate();
      } // Fl_Button* R3
      { R4 = new Fl_Button(425, 160, 25, 20, gettext("4"));
        R4->type(102);
        R4->box(FL_PLASTIC_UP_BOX);
        R4->color((Fl_Color)31);
        R4->selection_color((Fl_Color)1);
        R4->labeltype(FL_ENGRAVED_LABEL);
        R4->labelsize(9);
        R4->callback((Fl_Callback*)cb_R4);
        R4->deactivate();
      } // Fl_Button* R4
      { R5 = new Fl_Button(395, 185, 25, 20, gettext("5"));
        R5->type(102);
        R5->box(FL_PLASTIC_UP_BOX);
        R5->color((Fl_Color)31);
        R5->selection_color((Fl_Color)1);
        R5->labeltype(FL_ENGRAVED_LABEL);
        R5->labelsize(9);
        R5->callback((Fl_Callback*)cb_R5);
        R5->deactivate();
      } // Fl_Button* R5
      { R6 = new Fl_Button(425, 185, 25, 20, gettext("6"));
        R6->type(102);
        R6->box(FL_PLASTIC_UP_BOX);
        R6->color((Fl_Color)31);
        R6->selection_color((Fl_Color)1);
        R6->labeltype(FL_ENGRAVED_LABEL);
        R6->labelsize(9);
        R6->callback((Fl_Callback*)cb_R6);
        R6->deactivate();
      } // Fl_Button* R6
      { R7 = new Fl_Button(395, 210, 25, 20, gettext("7"));
        R7->type(102);
        R7->box(FL_PLASTIC_UP_BOX);
        R7->color((Fl_Color)31);
        R7->selection_color((Fl_Color)1);
        R7->labeltype(FL_ENGRAVED_LABEL);
        R7->labelsize(9);
        R7->callback((Fl_Callback*)cb_R7);
        R7->deactivate();
      } // Fl_Button* R7
      { R8 = new Fl_Button(425, 210, 25, 20, gettext("8"));
        R8->type(102);
        R8->box(FL_PLASTIC_UP_BOX);
        R8->color((Fl_Color)31);
        R8->selection_color((Fl_Color)1);
        R8->labeltype(FL_ENGRAVED_LABEL);
        R8->labelsize(9);
        R8->callback((Fl_Callback*)cb_R8);
        R8->deactivate();
      } // Fl_Button* R8
      o->end();
    } // Fl_Group* o
    { Rev = new Fl_Button(395, 100, 55, 30, gettext("Reverb"));
      Rev->type(1);
      Rev->box(FL_PLASTIC_UP_BOX);
      Rev->color((Fl_Color)31);
      Rev->selection_color((Fl_Color)3);
      Rev->labeltype(FL_ENGRAVED_LABEL);
      Rev->labelsize(10);
      Rev->callback((Fl_Callback*)cb_Rev);
      Rev->align(FL_ALIGN_CLIP);
    } // Fl_Button* Rev
    { RitVol = new Fl_Slider(605, 415, 40, 155, gettext("Vol."));
      RitVol->type(4);
      RitVol->box(FL_PLASTIC_DOWN_BOX);
      RitVol->color((Fl_Color)24);
      RitVol->selection_color((Fl_Color)3);
      RitVol->labeltype(FL_ENGRAVED_LABEL);
      RitVol->labelsize(12);
      RitVol->labelcolor((Fl_Color)4);
      RitVol->minimum(0.99);
      RitVol->maximum(0);
      RitVol->step(0.01);
      RitVol->value(0.5);
      RitVol->callback((Fl_Callback*)cb_RitVol);
      RitVol->align(194);
    } // Fl_Slider* RitVol
    { Tempo = new Fl_Dial(655, 525, 45, 45, gettext("Tempo"));
      Tempo->box(FL_OSHADOW_BOX);
      Tempo->color(FL_DARK1);
      Tempo->labeltype(FL_ENGRAVED_LABEL);
      Tempo->labelsize(12);
      Tempo->labelcolor((Fl_Color)4);
      Tempo->minimum(1.7);
      Tempo->maximum(2.7);
      Tempo->step(0.01);
      Tempo->value(2);
      Tempo->callback((Fl_Callback*)cb_Tempo);
      Tempo->align(194);
      Tempo->deactivate();
    } // Fl_Dial* Tempo
    { VUI2 = new Fl_Slider(650, 510, 15, 15);
      VUI2->type(2);
      VUI2->color((Fl_Color)30);
      VUI2->selection_color((Fl_Color)1);
      VUI2->minimum(127);
      VUI2->maximum(0);
      VUI2->step(1);
      VUI2->callback((Fl_Callback*)cb_VUI2);
    } // Fl_Slider* VUI2
    { RitOn = new Fl_Button(650, 465, 50, 35, gettext("Stop/Cont"));
      RitOn->type(1);
      RitOn->box(FL_PLASTIC_UP_BOX);
      RitOn->color((Fl_Color)31);
      RitOn->selection_color((Fl_Color)135);
      RitOn->labeltype(FL_ENGRAVED_LABEL);
      RitOn->labelsize(8);
      RitOn->callback((Fl_Callback*)cb_RitOn);
      RitOn->align(FL_ALIGN_CLIP);
    } // Fl_Button* RitOn
    { StStRiton = new Fl_Button(650, 425, 50, 35, gettext("Start/Stop"));
      StStRiton->type(1);
      StStRiton->box(FL_PLASTIC_UP_BOX);
      StStRiton->color((Fl_Color)31);
      StStRiton->selection_color((Fl_Color)135);
      StStRiton->labeltype(FL_ENGRAVED_LABEL);
      StStRiton->labelsize(8);
      StStRiton->callback((Fl_Callback*)cb_StStRiton);
      StStRiton->align(FL_ALIGN_CLIP);
    } // Fl_Button* StStRiton
    { Fl_Box* o = new Fl_Box(595, 95, 230, 310);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(17);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    } // Fl_Box* o
    { RitButtons = new Fl_Group(595, 93, 230, 312);
      { Rit1 = new Fl_Button(605, 105, 95, 25);
        Rit1->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit1->type(1);
        Rit1->box(FL_PLASTIC_UP_BOX);
        Rit1->color((Fl_Color)31);
        Rit1->selection_color(FL_GREEN);
        Rit1->labeltype(FL_ENGRAVED_LABEL);
        Rit1->labelsize(12);
        Rit1->callback((Fl_Callback*)cb_Rit1);
        Rit1->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit1
      { Rit2 = new Fl_Button(605, 135, 95, 25);
        Rit2->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit2->type(1);
        Rit2->box(FL_PLASTIC_UP_BOX);
        Rit2->color((Fl_Color)31);
        Rit2->selection_color(FL_GREEN);
        Rit2->labeltype(FL_ENGRAVED_LABEL);
        Rit2->labelsize(12);
        Rit2->callback((Fl_Callback*)cb_Rit2);
        Rit2->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit2
      { Rit3 = new Fl_Button(605, 165, 95, 25);
        Rit3->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit3->type(1);
        Rit3->box(FL_PLASTIC_UP_BOX);
        Rit3->color((Fl_Color)31);
        Rit3->selection_color(FL_GREEN);
        Rit3->labeltype(FL_ENGRAVED_LABEL);
        Rit3->labelsize(12);
        Rit3->callback((Fl_Callback*)cb_Rit3);
        Rit3->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit3
      { Rit4 = new Fl_Button(605, 195, 95, 25);
        Rit4->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit4->type(1);
        Rit4->box(FL_PLASTIC_UP_BOX);
        Rit4->color((Fl_Color)31);
        Rit4->selection_color(FL_GREEN);
        Rit4->labeltype(FL_ENGRAVED_LABEL);
        Rit4->labelsize(12);
        Rit4->callback((Fl_Callback*)cb_Rit4);
        Rit4->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit4
      { Rit5 = new Fl_Button(605, 225, 95, 25);
        Rit5->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit5->type(1);
        Rit5->box(FL_PLASTIC_UP_BOX);
        Rit5->color((Fl_Color)31);
        Rit5->selection_color(FL_GREEN);
        Rit5->labeltype(FL_ENGRAVED_LABEL);
        Rit5->labelsize(12);
        Rit5->callback((Fl_Callback*)cb_Rit5);
        Rit5->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit5
      { Rit6 = new Fl_Button(605, 255, 95, 25);
        Rit6->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit6->type(1);
        Rit6->box(FL_PLASTIC_UP_BOX);
        Rit6->color((Fl_Color)31);
        Rit6->selection_color(FL_GREEN);
        Rit6->labeltype(FL_ENGRAVED_LABEL);
        Rit6->labelsize(12);
        Rit6->callback((Fl_Callback*)cb_Rit6);
        Rit6->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit6
      { Rit7 = new Fl_Button(605, 285, 95, 25);
        Rit7->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit7->type(1);
        Rit7->box(FL_PLASTIC_UP_BOX);
        Rit7->color((Fl_Color)31);
        Rit7->selection_color(FL_GREEN);
        Rit7->labeltype(FL_ENGRAVED_LABEL);
        Rit7->labelsize(12);
        Rit7->callback((Fl_Callback*)cb_Rit7);
        Rit7->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit7
      { Rit8 = new Fl_Button(605, 315, 95, 25);
        Rit8->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit8->type(1);
        Rit8->box(FL_PLASTIC_UP_BOX);
        Rit8->color((Fl_Color)31);
        Rit8->selection_color(FL_GREEN);
        Rit8->labeltype(FL_ENGRAVED_LABEL);
        Rit8->labelsize(12);
        Rit8->callback((Fl_Callback*)cb_Rit8);
        Rit8->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit8
      { Rit9 = new Fl_Button(605, 345, 95, 25);
        Rit9->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit9->type(1);
        Rit9->box(FL_PLASTIC_UP_BOX);
        Rit9->color((Fl_Color)31);
        Rit9->selection_color(FL_GREEN);
        Rit9->labeltype(FL_ENGRAVED_LABEL);
        Rit9->labelsize(12);
        Rit9->callback((Fl_Callback*)cb_Rit9);
        Rit9->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit9
      { Rit10 = new Fl_Button(605, 375, 95, 25);
        Rit10->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit10->type(1);
        Rit10->box(FL_PLASTIC_UP_BOX);
        Rit10->color((Fl_Color)31);
        Rit10->selection_color(FL_GREEN);
        Rit10->labeltype(FL_ENGRAVED_LABEL);
        Rit10->labelsize(12);
        Rit10->callback((Fl_Callback*)cb_Rit10);
        Rit10->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit10
      { Rit11 = new Fl_Button(720, 105, 95, 25);
        Rit11->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit11->type(1);
        Rit11->box(FL_PLASTIC_UP_BOX);
        Rit11->color((Fl_Color)31);
        Rit11->selection_color(FL_GREEN);
        Rit11->labeltype(FL_ENGRAVED_LABEL);
        Rit11->labelsize(12);
        Rit11->callback((Fl_Callback*)cb_Rit11);
        Rit11->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit11
      { Rit12 = new Fl_Button(720, 135, 95, 25);
        Rit12->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit12->type(1);
        Rit12->box(FL_PLASTIC_UP_BOX);
        Rit12->color((Fl_Color)31);
        Rit12->selection_color(FL_GREEN);
        Rit12->labeltype(FL_ENGRAVED_LABEL);
        Rit12->labelsize(12);
        Rit12->callback((Fl_Callback*)cb_Rit12);
        Rit12->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit12
      { Rit13 = new Fl_Button(720, 165, 95, 25);
        Rit13->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit13->type(1);
        Rit13->box(FL_PLASTIC_UP_BOX);
        Rit13->color((Fl_Color)31);
        Rit13->selection_color(FL_GREEN);
        Rit13->labeltype(FL_ENGRAVED_LABEL);
        Rit13->labelsize(12);
        Rit13->callback((Fl_Callback*)cb_Rit13);
        Rit13->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit13
      { Rit14 = new Fl_Button(720, 195, 95, 25);
        Rit14->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit14->type(1);
        Rit14->box(FL_PLASTIC_UP_BOX);
        Rit14->color((Fl_Color)31);
        Rit14->selection_color(FL_GREEN);
        Rit14->labeltype(FL_ENGRAVED_LABEL);
        Rit14->labelsize(12);
        Rit14->callback((Fl_Callback*)cb_Rit14);
        Rit14->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit14
      { Rit15 = new Fl_Button(720, 226, 95, 25);
        Rit15->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit15->type(1);
        Rit15->box(FL_PLASTIC_UP_BOX);
        Rit15->color((Fl_Color)31);
        Rit15->selection_color(FL_GREEN);
        Rit15->labeltype(FL_ENGRAVED_LABEL);
        Rit15->labelsize(12);
        Rit15->callback((Fl_Callback*)cb_Rit15);
        Rit15->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit15
      { Rit16 = new Fl_Button(720, 255, 95, 25);
        Rit16->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit16->type(1);
        Rit16->box(FL_PLASTIC_UP_BOX);
        Rit16->color((Fl_Color)31);
        Rit16->selection_color(FL_GREEN);
        Rit16->labeltype(FL_ENGRAVED_LABEL);
        Rit16->labelsize(12);
        Rit16->callback((Fl_Callback*)cb_Rit16);
        Rit16->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit16
      { Rit17 = new Fl_Button(720, 285, 95, 25);
        Rit17->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit17->type(1);
        Rit17->box(FL_PLASTIC_UP_BOX);
        Rit17->color((Fl_Color)31);
        Rit17->selection_color(FL_GREEN);
        Rit17->labeltype(FL_ENGRAVED_LABEL);
        Rit17->labelsize(12);
        Rit17->callback((Fl_Callback*)cb_Rit17);
        Rit17->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit17
      { Rit18 = new Fl_Button(720, 315, 95, 25);
        Rit18->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit18->type(1);
        Rit18->box(FL_PLASTIC_UP_BOX);
        Rit18->color((Fl_Color)31);
        Rit18->selection_color(FL_GREEN);
        Rit18->labeltype(FL_ENGRAVED_LABEL);
        Rit18->labelsize(12);
        Rit18->callback((Fl_Callback*)cb_Rit18);
        Rit18->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit18
      { Rit19 = new Fl_Button(720, 345, 95, 25);
        Rit19->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit19->type(1);
        Rit19->box(FL_PLASTIC_UP_BOX);
        Rit19->color((Fl_Color)31);
        Rit19->selection_color(FL_GREEN);
        Rit19->labeltype(FL_ENGRAVED_LABEL);
        Rit19->labelsize(12);
        Rit19->callback((Fl_Callback*)cb_Rit19);
        Rit19->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit19
      { Rit20 = new Fl_Button(720, 375, 95, 25);
        Rit20->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit20->type(1);
        Rit20->box(FL_PLASTIC_UP_BOX);
        Rit20->color((Fl_Color)31);
        Rit20->selection_color(FL_GREEN);
        Rit20->labeltype(FL_ENGRAVED_LABEL);
        Rit20->labelsize(12);
        Rit20->callback((Fl_Callback*)cb_Rit20);
        Rit20->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit20
      RitButtons->end();
    } // Fl_Group* RitButtons
    { BassVol = new Fl_Slider(710, 415, 40, 155, gettext("Vol."));
      BassVol->type(4);
      BassVol->box(FL_PLASTIC_DOWN_BOX);
      BassVol->color((Fl_Color)24);
      BassVol->selection_color((Fl_Color)3);
      BassVol->labeltype(FL_ENGRAVED_LABEL);
      BassVol->labelsize(12);
      BassVol->labelcolor((Fl_Color)4);
      BassVol->minimum(0.99);
      BassVol->maximum(0);
      BassVol->step(0.01);
      BassVol->value(0.5);
      BassVol->callback((Fl_Callback*)cb_BassVol);
      BassVol->align(194);
    } // Fl_Slider* BassVol
    { Basson = new Fl_Button(755, 425, 50, 35, gettext("Bass"));
      Basson->type(1);
      Basson->box(FL_PLASTIC_UP_BOX);
      Basson->color((Fl_Color)31);
      Basson->selection_color((Fl_Color)135);
      Basson->labeltype(FL_ENGRAVED_LABEL);
      Basson->labelsize(10);
      Basson->callback((Fl_Callback*)cb_Basson);
      Basson->align(FL_ALIGN_CLIP);
    } // Fl_Button* Basson
    { Fl_Group* o = new Fl_Group(755, 470, 70, 85);
      { Bass1 = new Fl_Button(755, 470, 65, 25, gettext("Acoustic"));
        Bass1->type(102);
        Bass1->box(FL_PLASTIC_UP_BOX);
        Bass1->color((Fl_Color)31);
        Bass1->selection_color(FL_GREEN);
        Bass1->labeltype(FL_ENGRAVED_LABEL);
        Bass1->labelsize(12);
        Bass1->callback((Fl_Callback*)cb_Bass1);
        Bass1->align(FL_ALIGN_CLIP);
      } // Fl_Button* Bass1
      { Bass2 = new Fl_Button(755, 500, 65, 25, gettext("Electric"));
        Bass2->type(102);
        Bass2->box(FL_PLASTIC_UP_BOX);
        Bass2->color((Fl_Color)31);
        Bass2->selection_color(FL_GREEN);
        Bass2->labeltype(FL_ENGRAVED_LABEL);
        Bass2->labelsize(12);
        Bass2->callback((Fl_Callback*)cb_Bass2);
        Bass2->align(FL_ALIGN_CLIP);
      } // Fl_Button* Bass2
      { Bass3 = new Fl_Button(755, 530, 65, 25, gettext("Fretless"));
        Bass3->type(102);
        Bass3->box(FL_PLASTIC_UP_BOX);
        Bass3->color((Fl_Color)31);
        Bass3->selection_color(FL_GREEN);
        Bass3->labeltype(FL_ENGRAVED_LABEL);
        Bass3->labelsize(12);
        Bass3->callback((Fl_Callback*)cb_Bass3);
        Bass3->align(FL_ALIGN_CLIP);
      } // Fl_Button* Bass3
      o->end();
    } // Fl_Group* o
    { ACI = new Fl_Box(315, 35, 205, 50);
      ACI->box(FL_PLASTIC_DOWN_BOX);
      ACI->color((Fl_Color)219);
      ACI->labeltype(FL_ENGRAVED_LABEL);
      ACI->labelfont(1);
      ACI->labelsize(22);
      ACI->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* ACI
    { NV1 = new Fl_Value_Output(2, 543, 55, 20);
      NV1->color(FL_DARK1);
      NV1->selection_color((Fl_Color)1);
      NV1->labelfont(1);
      NV1->maximum(16);
      NV1->step(0.5);
      NV1->textfont(1);
      NV1->textcolor(4);
      NV1->align(200|FL_ALIGN_INSIDE);
    } // Fl_Value_Output* NV1
    { NV2 = new Fl_Value_Output(61, 543, 55, 20);
      NV2->color(FL_DARK1);
      NV2->selection_color((Fl_Color)1);
      NV2->maximum(16);
      NV2->step(0.5);
      NV2->textfont(1);
      NV2->textcolor(4);
      NV2->align(200|FL_ALIGN_INSIDE);
    } // Fl_Value_Output* NV2
    { NV3 = new Fl_Value_Output(120, 543, 55, 20);
      NV3->color(FL_DARK1);
      NV3->selection_color((Fl_Color)1);
      NV3->maximum(16);
      NV3->step(0.5);
      NV3->textfont(1);
      NV3->textcolor(4);
      NV3->align(200|FL_ALIGN_INSIDE);
    } // Fl_Value_Output* NV3
    { NV4 = new Fl_Value_Output(179, 543, 55, 20);
      NV4->color(FL_DARK1);
      NV4->selection_color((Fl_Color)1);
      NV4->maximum(16);
      NV4->step(0.5);
      NV4->textfont(1);
      NV4->textcolor(4);
      NV4->align(200|FL_ALIGN_INSIDE);
    } // Fl_Value_Output* NV4
    { NV5 = new Fl_Value_Output(238, 543, 55, 20);
      NV5->color(FL_DARK1);
      NV5->selection_color((Fl_Color)1);
      NV5->maximum(16);
      NV5->step(0.5);
      NV5->textfont(1);
      NV5->textcolor(4);
      NV5->align(200|FL_ALIGN_INSIDE);
    } // Fl_Value_Output* NV5
    { NV6 = new Fl_Value_Output(297, 543, 55, 20);
      NV6->color(FL_DARK1);
      NV6->selection_color((Fl_Color)1);
      NV6->maximum(16);
      NV6->step(0.5);
      NV6->textfont(1);
      NV6->textcolor(4);
      NV6->align(200|FL_ALIGN_INSIDE);
    } // Fl_Value_Output* NV6
    { NV7 = new Fl_Value_Output(356, 543, 55, 20);
      NV7->color(FL_DARK1);
      NV7->selection_color((Fl_Color)1);
      NV7->maximum(16);
      NV7->step(0.5);
      NV7->textfont(1);
      NV7->textcolor(4);
      NV7->align(200|FL_ALIGN_INSIDE);
    } // Fl_Value_Output* NV7
    { NV8 = new Fl_Value_Output(415, 543, 55, 20);
      NV8->color(FL_DARK1);
      NV8->selection_color((Fl_Color)1);
      NV8->maximum(16);
      NV8->step(0.5);
      NV8->textfont(1);
      NV8->textcolor(4);
      NV8->align(200|FL_ALIGN_INSIDE);
    } // Fl_Value_Output* NV8
    { NV9 = new Fl_Value_Output(474, 543, 55, 20);
      NV9->color(FL_DARK1);
      NV9->selection_color((Fl_Color)1);
      NV9->maximum(16);
      NV9->step(0.5);
      NV9->textfont(1);
      NV9->textcolor(4);
      NV9->align(200|FL_ALIGN_INSIDE);
    } // Fl_Value_Output* NV9
    { NV10 = new Fl_Value_Output(533, 543, 55, 20);
      NV10->color(FL_DARK1);
      NV10->selection_color((Fl_Color)1);
      NV10->maximum(16);
      NV10->step(0.5);
      NV10->textfont(1);
      NV10->textcolor(4);
      NV10->align(200|FL_ALIGN_INSIDE);
    } // Fl_Value_Output* NV10
    { CPrograma = new Fl_Counter(15, 165, 75, 25);
      CPrograma->type(1);
      CPrograma->labeltype(FL_EMBOSSED_LABEL);
      CPrograma->labelcolor((Fl_Color)208);
      CPrograma->minimum(1);
      CPrograma->maximum(32);
      CPrograma->step(1);
      CPrograma->callback((Fl_Callback*)cb_CPrograma);
      CPrograma->align(FL_ALIGN_LEFT);
      CPrograma->when(FL_WHEN_RELEASE);
    } // Fl_Counter* CPrograma
    { OMaster = new Drawbar(470, 100, 55, 190, gettext("Volume"));
      OMaster->type(4);
      OMaster->box(FL_PLASTIC_DOWN_BOX);
      OMaster->color((Fl_Color)24);
      OMaster->selection_color((Fl_Color)2);
      OMaster->labeltype(FL_ENGRAVED_LABEL);
      OMaster->labelfont(0);
      OMaster->labelsize(12);
      OMaster->labelcolor((Fl_Color)4);
      OMaster->minimum(100);
      OMaster->maximum(0);
      OMaster->step(1);
      OMaster->value(70);
      OMaster->callback((Fl_Callback*)cb_OMaster);
      OMaster->align(FL_ALIGN_BOTTOM);
      OMaster->when(FL_WHEN_CHANGED);
    } // Drawbar* OMaster
    { Mar1 = new Fl_Light_Button(5, 317, 50, 15, gettext("Perc"));
      Mar1->box(FL_PLASTIC_UP_BOX);
      Mar1->labelsize(11);
      Mar1->callback((Fl_Callback*)cb_Mar1);
      Mar1->align(196|FL_ALIGN_INSIDE);
    } // Fl_Light_Button* Mar1
    { Mar2 = new Fl_Light_Button(64, 317, 50, 15, gettext("Perc"));
      Mar2->box(FL_PLASTIC_UP_BOX);
      Mar2->labelsize(11);
      Mar2->callback((Fl_Callback*)cb_Mar2);
      Mar2->align(196|FL_ALIGN_INSIDE);
    } // Fl_Light_Button* Mar2
    { Mar3 = new Fl_Light_Button(120, 317, 50, 15, gettext("Perc"));
      Mar3->box(FL_PLASTIC_UP_BOX);
      Mar3->labelsize(11);
      Mar3->callback((Fl_Callback*)cb_Mar3);
      Mar3->align(196|FL_ALIGN_INSIDE);
    } // Fl_Light_Button* Mar3
    { Mar4 = new Fl_Light_Button(180, 317, 50, 15, gettext("Perc"));
      Mar4->box(FL_PLASTIC_UP_BOX);
      Mar4->labelsize(11);
      Mar4->callback((Fl_Callback*)cb_Mar4);
      Mar4->align(196|FL_ALIGN_INSIDE);
    } // Fl_Light_Button* Mar4
    { Mar5 = new Fl_Light_Button(240, 317, 50, 15, gettext("Perc"));
      Mar5->box(FL_PLASTIC_UP_BOX);
      Mar5->labelsize(11);
      Mar5->callback((Fl_Callback*)cb_Mar5);
      Mar5->align(196|FL_ALIGN_INSIDE);
    } // Fl_Light_Button* Mar5
    { Mar6 = new Fl_Light_Button(295, 317, 50, 15, gettext("Perc"));
      Mar6->box(FL_PLASTIC_UP_BOX);
      Mar6->labelsize(11);
      Mar6->callback((Fl_Callback*)cb_Mar6);
      Mar6->align(196|FL_ALIGN_INSIDE);
    } // Fl_Light_Button* Mar6
    { Mar7 = new Fl_Light_Button(355, 317, 50, 15, gettext("Perc"));
      Mar7->box(FL_PLASTIC_UP_BOX);
      Mar7->labelsize(11);
      Mar7->callback((Fl_Callback*)cb_Mar7);
      Mar7->align(196|FL_ALIGN_INSIDE);
    } // Fl_Light_Button* Mar7
    { Mar8 = new Fl_Light_Button(415, 317, 50, 15, gettext("Perc"));
      Mar8->box(FL_PLASTIC_UP_BOX);
      Mar8->labelsize(11);
      Mar8->callback((Fl_Callback*)cb_Mar8);
      Mar8->align(196|FL_ALIGN_INSIDE);
    } // Fl_Light_Button* Mar8
    { Mar9 = new Fl_Light_Button(475, 317, 50, 15, gettext("Perc"));
      Mar9->box(FL_PLASTIC_UP_BOX);
      Mar9->labelsize(11);
      Mar9->callback((Fl_Callback*)cb_Mar9);
      Mar9->align(196|FL_ALIGN_INSIDE);
    } // Fl_Light_Button* Mar9
    { Mar10 = new Fl_Light_Button(535, 317, 50, 15, gettext("Perc"));
      Mar10->box(FL_PLASTIC_UP_BOX);
      Mar10->labelsize(11);
      Mar10->callback((Fl_Callback*)cb_Mar10);
      Mar10->align(196|FL_ALIGN_INSIDE);
    } // Fl_Light_Button* Mar10
    HORwindow->end();
    HORwindow->resizable(HORwindow);
  } // Fl_Double_Window* HORwindow
  { aboutwindow = new Fl_Double_Window(380, 300, gettext("About..."));
    aboutwindow->callback((Fl_Callback*)cb_aboutwindow, (void*)(this));
    { Fl_Box* o = new Fl_Box(65, 5, 260, 40, gettext("Horgand"));
      o->labelfont(1);
      o->labelsize(24);
      o->align(FL_ALIGN_CLIP);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(15, 45, 345, 70, gettext("Copyright (C) 2003-2007 by Josep Andreu\n     (Holborn) \n      holborn@@tele\
fonica.net "));
      o->labelfont(1);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(20, 115, 340, 130, gettext("This is free software. you may redistribute and/or modify it under the terms \
of the version 2 of the GNU General Public License as published by the Free So\
ftware Fundation.\n This program comes with \n ABSOLUTE NO WARRANTY. \n See th\
e version 2 of the \n GNU General Public License for details."));
      o->labelfont(1);
      o->labelsize(11);
      o->align(194|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(150, 250, 70, 40, gettext("OK"));
      o->shortcut(0xff0d);
      o->callback((Fl_Callback*)cb_OK);
    } // Fl_Button* o
    aboutwindow->end();
  } // Fl_Double_Window* aboutwindow
  { Settingswindow = new Fl_Double_Window(495, 310, gettext("Settings"));
    Settingswindow->callback((Fl_Callback*)cb_Settingswindow, (void*)(this));
    { new Fl_Box(5, 0, 151, 30, gettext("Midi Input to:"));
    } // Fl_Box* o
    { SClose = new Fl_Button(350, 180, 120, 30, gettext("Close"));
      SClose->shortcut(0xff0d);
      SClose->callback((Fl_Callback*)cb_SClose);
    } // Fl_Button* SClose
    { Fl_Button* o = new Fl_Button(350, 145, 120, 30, gettext("Save"));
      o->callback((Fl_Callback*)cb_Save3);
    } // Fl_Button* o
    { BMidiIn = new Fl_Browser(5, 25, 295, 185);
      BMidiIn->type(2);
      BMidiIn->selection_color(FL_FOREGROUND_COLOR);
      BMidiIn->callback((Fl_Callback*)cb_BMidiIn);
    } // Fl_Browser* BMidiIn
    { Fl_Group* o = new Fl_Group(315, 25, 155, 95, gettext("Audio Output"));
      o->box(FL_DOWN_BOX);
      o->color((Fl_Color)25);
      { OSS = new Fl_Check_Button(340, 30, 100, 25, gettext(" OSS"));
        OSS->type(102);
        OSS->down_box(FL_DOWN_BOX);
        OSS->align(68|FL_ALIGN_INSIDE);
      } // Fl_Check_Button* OSS
      { Alsa = new Fl_Check_Button(340, 60, 100, 25, gettext(" Alsa"));
        Alsa->type(102);
        Alsa->down_box(FL_DOWN_BOX);
        Alsa->align(68|FL_ALIGN_INSIDE);
      } // Fl_Check_Button* Alsa
      { Jack = new Fl_Check_Button(340, 90, 100, 25, gettext(" Jack"));
        Jack->type(102);
        Jack->down_box(FL_DOWN_BOX);
        Jack->align(68|FL_ALIGN_INSIDE);
      } // Fl_Check_Button* Jack
      o->end();
    } // Fl_Group* o
    { BFiname = new Fl_File_Input(0, 230, 390, 30, gettext("  Bank Filename"));
      BFiname->labelsize(12);
      BFiname->align(FL_ALIGN_TOP_LEFT);
    } // Fl_File_Input* BFiname
    { Fl_Button* o = new Fl_Button(405, 230, 65, 30, gettext("Browse"));
      o->callback((Fl_Callback*)cb_Browse);
    } // Fl_Button* o
    { RFiname = new Fl_File_Input(0, 280, 390, 30, gettext("  Rhythm Filename"));
      RFiname->labelsize(12);
      RFiname->align(FL_ALIGN_TOP_LEFT);
    } // Fl_File_Input* RFiname
    { Fl_Button* o = new Fl_Button(405, 270, 65, 30, gettext("Browse"));
      o->callback((Fl_Callback*)cb_Browse1);
    } // Fl_Button* o
    Settingswindow->end();
  } // Fl_Double_Window* Settingswindow
  { HORBank = new Fl_Double_Window(710, 360, gettext("horgand Bank"));
    HORBank->tooltip(gettext("Right Click Get  - Left Click Put"));
    HORBank->callback((Fl_Callback*)cb_HORBank, (void*)(this));
    { BClose = new Fl_Button(290, 310, 145, 40, gettext("Close"));
      BClose->box(FL_PLASTIC_UP_BOX);
      BClose->shortcut(0xff0d);
      BClose->labeltype(FL_ENGRAVED_LABEL);
      BClose->callback((Fl_Callback*)cb_BClose);
    } // Fl_Button* BClose
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 760, 30);
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { Banco1 = new Fl_Button(30, 60, 145, 25);
      Banco1->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco1->box(FL_PLASTIC_UP_BOX);
      Banco1->color((Fl_Color)6);
      Banco1->labeltype(FL_ENGRAVED_LABEL);
      Banco1->labelsize(12);
      Banco1->callback((Fl_Callback*)cb_Banco1);
      Banco1->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco1
    { Fl_Box* o = new Fl_Box(0, 60, 30, 25, gettext("1"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco2 = new Fl_Button(205, 60, 145, 25);
      Banco2->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco2->box(FL_PLASTIC_UP_BOX);
      Banco2->color((Fl_Color)6);
      Banco2->labeltype(FL_ENGRAVED_LABEL);
      Banco2->labelsize(12);
      Banco2->callback((Fl_Callback*)cb_Banco2);
      Banco2->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco2
    { Fl_Box* o = new Fl_Box(175, 60, 30, 25, gettext("2"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco3 = new Fl_Button(380, 60, 145, 25);
      Banco3->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco3->box(FL_PLASTIC_UP_BOX);
      Banco3->color((Fl_Color)6);
      Banco3->labeltype(FL_ENGRAVED_LABEL);
      Banco3->labelsize(12);
      Banco3->callback((Fl_Callback*)cb_Banco3);
      Banco3->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco3
    { Fl_Box* o = new Fl_Box(350, 60, 30, 25, gettext("3"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco4 = new Fl_Button(555, 60, 145, 25);
      Banco4->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco4->box(FL_PLASTIC_UP_BOX);
      Banco4->color((Fl_Color)6);
      Banco4->labeltype(FL_ENGRAVED_LABEL);
      Banco4->labelsize(12);
      Banco4->callback((Fl_Callback*)cb_Banco4);
      Banco4->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco4
    { Fl_Box* o = new Fl_Box(525, 60, 30, 25, gettext("4"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco5 = new Fl_Button(30, 90, 145, 25);
      Banco5->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco5->box(FL_PLASTIC_UP_BOX);
      Banco5->color((Fl_Color)6);
      Banco5->labeltype(FL_ENGRAVED_LABEL);
      Banco5->labelsize(12);
      Banco5->callback((Fl_Callback*)cb_Banco5);
      Banco5->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco5
    { Fl_Box* o = new Fl_Box(0, 90, 30, 25, gettext("5"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco6 = new Fl_Button(205, 90, 145, 25);
      Banco6->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco6->box(FL_PLASTIC_UP_BOX);
      Banco6->color((Fl_Color)6);
      Banco6->labeltype(FL_ENGRAVED_LABEL);
      Banco6->labelsize(12);
      Banco6->callback((Fl_Callback*)cb_Banco6);
      Banco6->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco6
    { Fl_Box* o = new Fl_Box(175, 90, 30, 25, gettext("6"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco7 = new Fl_Button(380, 90, 145, 25);
      Banco7->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco7->box(FL_PLASTIC_UP_BOX);
      Banco7->color((Fl_Color)6);
      Banco7->labeltype(FL_ENGRAVED_LABEL);
      Banco7->labelsize(12);
      Banco7->callback((Fl_Callback*)cb_Banco7);
      Banco7->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco7
    { Fl_Box* o = new Fl_Box(350, 90, 30, 25, gettext("7"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco8 = new Fl_Button(555, 90, 145, 25);
      Banco8->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco8->box(FL_PLASTIC_UP_BOX);
      Banco8->color((Fl_Color)6);
      Banco8->labeltype(FL_ENGRAVED_LABEL);
      Banco8->labelsize(12);
      Banco8->callback((Fl_Callback*)cb_Banco8);
      Banco8->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco8
    { Fl_Box* o = new Fl_Box(525, 90, 30, 25, gettext("8"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco9 = new Fl_Button(30, 120, 145, 25);
      Banco9->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco9->box(FL_PLASTIC_UP_BOX);
      Banco9->color((Fl_Color)6);
      Banco9->labeltype(FL_ENGRAVED_LABEL);
      Banco9->labelsize(12);
      Banco9->callback((Fl_Callback*)cb_Banco9);
      Banco9->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco9
    { Fl_Box* o = new Fl_Box(0, 120, 30, 25, gettext("9"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco10 = new Fl_Button(205, 120, 145, 25);
      Banco10->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco10->box(FL_PLASTIC_UP_BOX);
      Banco10->color((Fl_Color)6);
      Banco10->labeltype(FL_ENGRAVED_LABEL);
      Banco10->labelsize(12);
      Banco10->callback((Fl_Callback*)cb_Banco10);
      Banco10->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco10
    { Fl_Box* o = new Fl_Box(175, 120, 30, 25, gettext("10"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco11 = new Fl_Button(380, 120, 145, 25);
      Banco11->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco11->box(FL_PLASTIC_UP_BOX);
      Banco11->color((Fl_Color)6);
      Banco11->labeltype(FL_ENGRAVED_LABEL);
      Banco11->labelsize(12);
      Banco11->callback((Fl_Callback*)cb_Banco11);
      Banco11->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco11
    { Fl_Box* o = new Fl_Box(350, 120, 30, 25, gettext("11"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco12 = new Fl_Button(555, 120, 145, 25);
      Banco12->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco12->box(FL_PLASTIC_UP_BOX);
      Banco12->color((Fl_Color)6);
      Banco12->labeltype(FL_ENGRAVED_LABEL);
      Banco12->labelsize(12);
      Banco12->callback((Fl_Callback*)cb_Banco12);
      Banco12->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco12
    { Fl_Box* o = new Fl_Box(525, 120, 30, 25, gettext("12"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco13 = new Fl_Button(30, 150, 145, 25);
      Banco13->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco13->box(FL_PLASTIC_UP_BOX);
      Banco13->color((Fl_Color)6);
      Banco13->labeltype(FL_ENGRAVED_LABEL);
      Banco13->labelsize(12);
      Banco13->callback((Fl_Callback*)cb_Banco13);
      Banco13->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco13
    { Fl_Box* o = new Fl_Box(0, 150, 30, 25, gettext("13"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco14 = new Fl_Button(205, 150, 145, 25);
      Banco14->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco14->box(FL_PLASTIC_UP_BOX);
      Banco14->color((Fl_Color)6);
      Banco14->labeltype(FL_ENGRAVED_LABEL);
      Banco14->labelsize(12);
      Banco14->callback((Fl_Callback*)cb_Banco14);
      Banco14->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco14
    { Fl_Box* o = new Fl_Box(175, 150, 30, 25, gettext("14"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco15 = new Fl_Button(380, 150, 145, 25);
      Banco15->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco15->box(FL_PLASTIC_UP_BOX);
      Banco15->color((Fl_Color)6);
      Banco15->labeltype(FL_ENGRAVED_LABEL);
      Banco15->labelsize(12);
      Banco15->callback((Fl_Callback*)cb_Banco15);
      Banco15->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco15
    { Fl_Box* o = new Fl_Box(350, 150, 30, 25, gettext("15"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco16 = new Fl_Button(555, 150, 145, 25);
      Banco16->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco16->box(FL_PLASTIC_UP_BOX);
      Banco16->color((Fl_Color)6);
      Banco16->labeltype(FL_ENGRAVED_LABEL);
      Banco16->labelsize(12);
      Banco16->callback((Fl_Callback*)cb_Banco16);
      Banco16->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco16
    { Fl_Box* o = new Fl_Box(525, 150, 30, 25, gettext("16"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco17 = new Fl_Button(30, 180, 145, 25);
      Banco17->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco17->box(FL_PLASTIC_UP_BOX);
      Banco17->color((Fl_Color)6);
      Banco17->labeltype(FL_ENGRAVED_LABEL);
      Banco17->labelsize(12);
      Banco17->callback((Fl_Callback*)cb_Banco17);
      Banco17->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco17
    { Fl_Box* o = new Fl_Box(0, 180, 30, 25, gettext("17"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco18 = new Fl_Button(205, 180, 145, 25);
      Banco18->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco18->box(FL_PLASTIC_UP_BOX);
      Banco18->color((Fl_Color)6);
      Banco18->labeltype(FL_ENGRAVED_LABEL);
      Banco18->labelsize(12);
      Banco18->callback((Fl_Callback*)cb_Banco18);
      Banco18->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco18
    { Fl_Box* o = new Fl_Box(175, 180, 30, 25, gettext("18"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco19 = new Fl_Button(380, 180, 145, 25);
      Banco19->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco19->box(FL_PLASTIC_UP_BOX);
      Banco19->color((Fl_Color)6);
      Banco19->labeltype(FL_ENGRAVED_LABEL);
      Banco19->labelsize(12);
      Banco19->callback((Fl_Callback*)cb_Banco19);
      Banco19->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco19
    { Fl_Box* o = new Fl_Box(350, 180, 30, 25, gettext("19"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco20 = new Fl_Button(555, 180, 145, 25);
      Banco20->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco20->box(FL_PLASTIC_UP_BOX);
      Banco20->color((Fl_Color)6);
      Banco20->labeltype(FL_ENGRAVED_LABEL);
      Banco20->labelsize(12);
      Banco20->callback((Fl_Callback*)cb_Banco20);
      Banco20->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco20
    { Fl_Box* o = new Fl_Box(525, 180, 30, 25, gettext("20"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco21 = new Fl_Button(30, 210, 145, 25);
      Banco21->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco21->box(FL_PLASTIC_UP_BOX);
      Banco21->color((Fl_Color)6);
      Banco21->labeltype(FL_ENGRAVED_LABEL);
      Banco21->labelsize(12);
      Banco21->callback((Fl_Callback*)cb_Banco21);
      Banco21->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco21
    { Fl_Box* o = new Fl_Box(0, 210, 30, 25, gettext("21"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco22 = new Fl_Button(205, 210, 145, 25);
      Banco22->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco22->box(FL_PLASTIC_UP_BOX);
      Banco22->color((Fl_Color)6);
      Banco22->labeltype(FL_ENGRAVED_LABEL);
      Banco22->labelsize(12);
      Banco22->callback((Fl_Callback*)cb_Banco22);
      Banco22->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco22
    { Fl_Box* o = new Fl_Box(175, 210, 30, 25, gettext("22"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco23 = new Fl_Button(380, 210, 145, 25);
      Banco23->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco23->box(FL_PLASTIC_UP_BOX);
      Banco23->color((Fl_Color)6);
      Banco23->labeltype(FL_ENGRAVED_LABEL);
      Banco23->labelsize(12);
      Banco23->callback((Fl_Callback*)cb_Banco23);
      Banco23->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco23
    { Fl_Box* o = new Fl_Box(350, 210, 30, 25, gettext("23"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco24 = new Fl_Button(555, 210, 145, 25);
      Banco24->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco24->box(FL_PLASTIC_UP_BOX);
      Banco24->color((Fl_Color)6);
      Banco24->labeltype(FL_ENGRAVED_LABEL);
      Banco24->labelsize(12);
      Banco24->callback((Fl_Callback*)cb_Banco24);
      Banco24->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco24
    { Fl_Box* o = new Fl_Box(525, 210, 30, 25, gettext("24"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco25 = new Fl_Button(30, 240, 145, 25);
      Banco25->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco25->box(FL_PLASTIC_UP_BOX);
      Banco25->color((Fl_Color)6);
      Banco25->labeltype(FL_ENGRAVED_LABEL);
      Banco25->labelsize(12);
      Banco25->callback((Fl_Callback*)cb_Banco25);
      Banco25->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco25
    { Fl_Box* o = new Fl_Box(0, 240, 30, 25, gettext("25"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco26 = new Fl_Button(205, 240, 145, 25);
      Banco26->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco26->box(FL_PLASTIC_UP_BOX);
      Banco26->color((Fl_Color)6);
      Banco26->labeltype(FL_ENGRAVED_LABEL);
      Banco26->labelsize(12);
      Banco26->callback((Fl_Callback*)cb_Banco26);
      Banco26->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco26
    { Fl_Box* o = new Fl_Box(175, 240, 30, 25, gettext("26"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco27 = new Fl_Button(380, 240, 145, 25);
      Banco27->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco27->box(FL_PLASTIC_UP_BOX);
      Banco27->color((Fl_Color)6);
      Banco27->labeltype(FL_ENGRAVED_LABEL);
      Banco27->labelsize(12);
      Banco27->callback((Fl_Callback*)cb_Banco27);
      Banco27->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco27
    { Fl_Box* o = new Fl_Box(350, 240, 30, 25, gettext("27"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco28 = new Fl_Button(555, 240, 145, 25);
      Banco28->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco28->box(FL_PLASTIC_UP_BOX);
      Banco28->color((Fl_Color)6);
      Banco28->labeltype(FL_ENGRAVED_LABEL);
      Banco28->labelsize(12);
      Banco28->callback((Fl_Callback*)cb_Banco28);
      Banco28->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco28
    { Fl_Box* o = new Fl_Box(525, 240, 30, 25, gettext("28"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco29 = new Fl_Button(30, 270, 145, 25);
      Banco29->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco29->box(FL_PLASTIC_UP_BOX);
      Banco29->color((Fl_Color)6);
      Banco29->labeltype(FL_ENGRAVED_LABEL);
      Banco29->labelsize(12);
      Banco29->callback((Fl_Callback*)cb_Banco29);
      Banco29->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco29
    { Fl_Box* o = new Fl_Box(0, 270, 30, 25, gettext("29"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco30 = new Fl_Button(205, 270, 145, 25);
      Banco30->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco30->box(FL_PLASTIC_UP_BOX);
      Banco30->color((Fl_Color)6);
      Banco30->labeltype(FL_ENGRAVED_LABEL);
      Banco30->labelsize(12);
      Banco30->callback((Fl_Callback*)cb_Banco30);
      Banco30->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco30
    { Fl_Box* o = new Fl_Box(175, 270, 30, 25, gettext("30"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco31 = new Fl_Button(380, 270, 145, 25);
      Banco31->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco31->box(FL_PLASTIC_UP_BOX);
      Banco31->color((Fl_Color)6);
      Banco31->labeltype(FL_ENGRAVED_LABEL);
      Banco31->labelsize(12);
      Banco31->callback((Fl_Callback*)cb_Banco31);
      Banco31->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco31
    { Fl_Box* o = new Fl_Box(350, 270, 30, 25, gettext("31"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Banco32 = new Fl_Button(555, 270, 145, 25);
      Banco32->tooltip(gettext("Right Click Get -  Left Click Put"));
      Banco32->box(FL_PLASTIC_UP_BOX);
      Banco32->color((Fl_Color)6);
      Banco32->labeltype(FL_ENGRAVED_LABEL);
      Banco32->labelsize(12);
      Banco32->callback((Fl_Callback*)cb_Banco32);
      Banco32->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Button* Banco32
    { Fl_Box* o = new Fl_Box(525, 270, 30, 25, gettext("32"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    HORBank->end();
  } // Fl_Double_Window* HORBank
  { RitEdit = new Fl_Double_Window(615, 175);
    RitEdit->callback((Fl_Callback*)cb_RitEdit, (void*)(this));
    { RtName = new Fl_Input(60, 20, 115, 25, gettext("Name"));
      RtName->labeltype(FL_ENGRAVED_LABEL);
      RtName->callback((Fl_Callback*)cb_RtName);
    } // Fl_Input* RtName
    { RtFile = new Fl_Input(215, 20, 215, 25, gettext("File"));
      RtFile->labeltype(FL_ENGRAVED_LABEL);
      RtFile->callback((Fl_Callback*)cb_RtFile);
    } // Fl_Input* RtFile
    { RtBars = new Fl_Value_Input(480, 20, 20, 25, gettext("Bars"));
      RtBars->labeltype(FL_ENGRAVED_LABEL);
      RtBars->minimum(1);
      RtBars->maximum(4);
      RtBars->step(1);
      RtBars->value(1);
      RtBars->callback((Fl_Callback*)cb_RtBars);
    } // Fl_Value_Input* RtBars
    { RtDen = new Fl_Value_Input(545, 20, 20, 25, gettext("Nom."));
      RtDen->labeltype(FL_ENGRAVED_LABEL);
      RtDen->minimum(2);
      RtDen->maximum(4);
      RtDen->step(1);
      RtDen->value(4);
      RtDen->callback((Fl_Callback*)cb_RtDen);
    } // Fl_Value_Input* RtDen
    { B1G1 = new Fl_Group(40, 115, 140, 60);
      { lb1 = new Fl_Value_Input(50, 120, 25, 20);
        lb1->maximum(12);
        lb1->step(1);
        lb1->callback((Fl_Callback*)cb_lb1);
      } // Fl_Value_Input* lb1
      { lb2 = new Fl_Value_Input(80, 120, 25, 20);
        lb2->maximum(12);
        lb2->step(1);
        lb2->callback((Fl_Callback*)cb_lb2);
      } // Fl_Value_Input* lb2
      { lb3 = new Fl_Value_Input(110, 120, 25, 20);
        lb3->maximum(12);
        lb3->step(1);
        lb3->callback((Fl_Callback*)cb_lb3);
      } // Fl_Value_Input* lb3
      { lb4 = new Fl_Value_Input(140, 120, 25, 20);
        lb4->maximum(12);
        lb4->step(1);
        lb4->callback((Fl_Callback*)cb_lb4);
      } // Fl_Value_Input* lb4
      { lbv1 = new Fl_Value_Input(50, 145, 25, 20);
        lbv1->maximum(88);
        lbv1->step(1);
        lbv1->callback((Fl_Callback*)cb_lbv1);
      } // Fl_Value_Input* lbv1
      { lbv2 = new Fl_Value_Input(80, 145, 25, 20);
        lbv2->maximum(99);
        lbv2->step(1);
        lbv2->callback((Fl_Callback*)cb_lbv2);
      } // Fl_Value_Input* lbv2
      { lbv3 = new Fl_Value_Input(110, 145, 25, 20);
        lbv3->maximum(99);
        lbv3->step(1);
        lbv3->callback((Fl_Callback*)cb_lbv3);
      } // Fl_Value_Input* lbv3
      { lbv4 = new Fl_Value_Input(140, 145, 25, 20);
        lbv4->maximum(99);
        lbv4->step(1);
        lbv4->callback((Fl_Callback*)cb_lbv4);
      } // Fl_Value_Input* lbv4
      B1G1->end();
    } // Fl_Group* B1G1
    { B1G2 = new Fl_Group(180, 115, 140, 60);
      { lb5 = new Fl_Value_Input(190, 120, 25, 20);
        lb5->maximum(12);
        lb5->step(1);
        lb5->callback((Fl_Callback*)cb_lb5);
      } // Fl_Value_Input* lb5
      { lb6 = new Fl_Value_Input(220, 120, 25, 20);
        lb6->maximum(12);
        lb6->step(1);
        lb6->callback((Fl_Callback*)cb_lb6);
      } // Fl_Value_Input* lb6
      { lb7 = new Fl_Value_Input(250, 120, 25, 20);
        lb7->maximum(12);
        lb7->step(1);
        lb7->callback((Fl_Callback*)cb_lb7);
      } // Fl_Value_Input* lb7
      { lb8 = new Fl_Value_Input(280, 120, 25, 20);
        lb8->maximum(12);
        lb8->step(1);
        lb8->callback((Fl_Callback*)cb_lb8);
      } // Fl_Value_Input* lb8
      { lbv5 = new Fl_Value_Input(190, 145, 25, 20);
        lbv5->maximum(99);
        lbv5->step(1);
        lbv5->callback((Fl_Callback*)cb_lbv5);
      } // Fl_Value_Input* lbv5
      { lbv6 = new Fl_Value_Input(220, 145, 25, 20);
        lbv6->maximum(99);
        lbv6->step(1);
        lbv6->callback((Fl_Callback*)cb_lbv6);
      } // Fl_Value_Input* lbv6
      { lbv7 = new Fl_Value_Input(250, 145, 25, 20);
        lbv7->maximum(99);
        lbv7->step(1);
        lbv7->callback((Fl_Callback*)cb_lbv7);
      } // Fl_Value_Input* lbv7
      { lbv8 = new Fl_Value_Input(280, 145, 25, 20);
        lbv8->maximum(99);
        lbv8->step(1);
        lbv8->callback((Fl_Callback*)cb_lbv8);
      } // Fl_Value_Input* lbv8
      B1G2->end();
    } // Fl_Group* B1G2
    { B1G3 = new Fl_Group(325, 115, 140, 60);
      { lb9 = new Fl_Value_Input(335, 120, 25, 20);
        lb9->maximum(12);
        lb9->step(1);
        lb9->callback((Fl_Callback*)cb_lb9);
      } // Fl_Value_Input* lb9
      { lb10 = new Fl_Value_Input(365, 120, 25, 20);
        lb10->maximum(12);
        lb10->step(1);
        lb10->callback((Fl_Callback*)cb_lb10);
      } // Fl_Value_Input* lb10
      { lb11 = new Fl_Value_Input(395, 120, 25, 20);
        lb11->maximum(12);
        lb11->step(1);
        lb11->callback((Fl_Callback*)cb_lb11);
      } // Fl_Value_Input* lb11
      { lb12 = new Fl_Value_Input(425, 120, 25, 20);
        lb12->maximum(12);
        lb12->step(1);
        lb12->callback((Fl_Callback*)cb_lb12);
      } // Fl_Value_Input* lb12
      { lbv9 = new Fl_Value_Input(335, 145, 25, 20);
        lbv9->maximum(99);
        lbv9->step(1);
        lbv9->callback((Fl_Callback*)cb_lbv9);
      } // Fl_Value_Input* lbv9
      { lbv10 = new Fl_Value_Input(365, 145, 25, 20);
        lbv10->maximum(99);
        lbv10->step(1);
        lbv10->callback((Fl_Callback*)cb_lbv10);
      } // Fl_Value_Input* lbv10
      { lbv11 = new Fl_Value_Input(395, 145, 25, 20);
        lbv11->maximum(99);
        lbv11->step(1);
        lbv11->callback((Fl_Callback*)cb_lbv11);
      } // Fl_Value_Input* lbv11
      { lbv12 = new Fl_Value_Input(425, 145, 25, 20);
        lbv12->maximum(99);
        lbv12->step(1);
        lbv12->callback((Fl_Callback*)cb_lbv12);
      } // Fl_Value_Input* lbv12
      B1G3->end();
    } // Fl_Group* B1G3
    { B1G4 = new Fl_Group(470, 115, 140, 60);
      { lb13 = new Fl_Value_Input(480, 120, 25, 20);
        lb13->maximum(12);
        lb13->step(1);
        lb13->callback((Fl_Callback*)cb_lb13);
      } // Fl_Value_Input* lb13
      { lb14 = new Fl_Value_Input(510, 120, 25, 20);
        lb14->maximum(12);
        lb14->step(1);
        lb14->callback((Fl_Callback*)cb_lb14);
      } // Fl_Value_Input* lb14
      { lb15 = new Fl_Value_Input(540, 120, 25, 20);
        lb15->maximum(12);
        lb15->step(1);
        lb15->callback((Fl_Callback*)cb_lb15);
      } // Fl_Value_Input* lb15
      { lb16 = new Fl_Value_Input(570, 120, 25, 20);
        lb16->maximum(12);
        lb16->step(1);
        lb16->callback((Fl_Callback*)cb_lb16);
      } // Fl_Value_Input* lb16
      { lbv13 = new Fl_Value_Input(480, 145, 25, 20);
        lbv13->maximum(99);
        lbv13->step(1);
        lbv13->callback((Fl_Callback*)cb_lbv13);
      } // Fl_Value_Input* lbv13
      { lbv14 = new Fl_Value_Input(510, 145, 25, 20);
        lbv14->maximum(99);
        lbv14->step(1);
        lbv14->callback((Fl_Callback*)cb_lbv14);
      } // Fl_Value_Input* lbv14
      { lbv15 = new Fl_Value_Input(540, 145, 25, 20);
        lbv15->maximum(99);
        lbv15->step(1);
        lbv15->callback((Fl_Callback*)cb_lbv15);
      } // Fl_Value_Input* lbv15
      { lbv16 = new Fl_Value_Input(570, 145, 25, 20);
        lbv16->maximum(99);
        lbv16->step(1);
        lbv16->callback((Fl_Callback*)cb_lbv16);
      } // Fl_Value_Input* lbv16
      B1G4->end();
    } // Fl_Group* B1G4
    { Fl_Counter* o = SBar = new Fl_Counter(45, 70, 65, 25, gettext("Bar "));
      SBar->type(1);
      SBar->labeltype(FL_ENGRAVED_LABEL);
      SBar->minimum(1);
      SBar->maximum(4);
      SBar->step(1);
      SBar->value(1);
      SBar->callback((Fl_Callback*)cb_SBar);
      SBar->align(FL_ALIGN_LEFT);
      o->value(hor->pattern_bars);
    } // Fl_Counter* SBar
    { CloRit = new Fl_Button(130, 70, 80, 25, gettext("Ok"));
      CloRit->shortcut(0xff0d);
      CloRit->labeltype(FL_ENGRAVED_LABEL);
      CloRit->callback((Fl_Callback*)cb_CloRit);
    } // Fl_Button* CloRit
    { Fl_Box* o = new Fl_Box(5, 120, 40, 25, gettext("Note"));
      o->labeltype(FL_ENGRAVED_LABEL);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(5, 140, 40, 25, gettext("Vol."));
      o->labeltype(FL_ENGRAVED_LABEL);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(390, 50, 215, 65);
      o->box(FL_DOWN_BOX);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(395, 50, 45, 25, gettext("1=1   "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(395, 70, 45, 25, gettext("2=2m "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(395, 90, 45, 25, gettext("3=2M  "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(445, 50, 45, 25, gettext("4=3m "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(445, 70, 45, 25, gettext("5=3M "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(445, 90, 45, 25, gettext("6=4J  "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(500, 50, 45, 25, gettext("7=4#   "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(500, 70, 45, 25, gettext("8=5J "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(500, 90, 45, 25, gettext("9=6m"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(550, 50, 45, 25, gettext("10=6M"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(550, 70, 45, 25, gettext("11=7m "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(550, 90, 45, 25, gettext("12=7M   "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(325, 65, 50, 25, gettext("Notes:"));
      o->labeltype(FL_ENGRAVED_LABEL);
    } // Fl_Box* o
    RitEdit->end();
  } // Fl_Double_Window* RitEdit
  { ADSRwin = new Fl_Double_Window(380, 225, gettext("Synthesizer"));
    ADSRwin->callback((Fl_Callback*)cb_ADSRwin, (void*)(this));
    { Fl_Box* o = new Fl_Box(1, 1, 140, 78, gettext("Drawbar"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_GRAY0);
      o->labelsize(13);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { D_attack = new Rueda(10, 27, 35, 35, gettext("Attack"));
      D_attack->box(FL_OVAL_BOX);
      D_attack->color(FL_BACKGROUND_COLOR);
      D_attack->selection_color(FL_INACTIVE_COLOR);
      D_attack->labeltype(FL_NORMAL_LABEL);
      D_attack->labelfont(0);
      D_attack->labelsize(9);
      D_attack->labelcolor(FL_FOREGROUND_COLOR);
      D_attack->minimum(0.001);
      D_attack->maximum(0.01);
      D_attack->step(0.001);
      D_attack->value(0.001);
      D_attack->callback((Fl_Callback*)cb_D_attack);
      D_attack->align(FL_ALIGN_BOTTOM);
      D_attack->when(FL_WHEN_CHANGED);
    } // Rueda* D_attack
    { D_decay = new Rueda(50, 27, 35, 35, gettext("Decay"));
      D_decay->box(FL_OVAL_BOX);
      D_decay->color(FL_BACKGROUND_COLOR);
      D_decay->selection_color(FL_INACTIVE_COLOR);
      D_decay->labeltype(FL_NORMAL_LABEL);
      D_decay->labelfont(0);
      D_decay->labelsize(9);
      D_decay->labelcolor(FL_FOREGROUND_COLOR);
      D_decay->minimum(0.1);
      D_decay->maximum(0.6);
      D_decay->step(0.01);
      D_decay->value(0.2);
      D_decay->callback((Fl_Callback*)cb_D_decay);
      D_decay->align(FL_ALIGN_BOTTOM);
      D_decay->when(FL_WHEN_CHANGED);
    } // Rueda* D_decay
    { D_sustain = new Rueda(90, 27, 35, 35, gettext("Sustain"));
      D_sustain->box(FL_OVAL_BOX);
      D_sustain->color(FL_BACKGROUND_COLOR);
      D_sustain->selection_color(FL_INACTIVE_COLOR);
      D_sustain->labeltype(FL_NORMAL_LABEL);
      D_sustain->labelfont(0);
      D_sustain->labelsize(9);
      D_sustain->labelcolor(FL_FOREGROUND_COLOR);
      D_sustain->maximum(0.99);
      D_sustain->step(0.01);
      D_sustain->value(0.8);
      D_sustain->callback((Fl_Callback*)cb_D_sustain);
      D_sustain->align(FL_ALIGN_BOTTOM);
      D_sustain->when(FL_WHEN_CHANGED);
    } // Rueda* D_sustain
    { Fl_Box* o = new Fl_Box(135, 1, 95, 81, gettext("Percussion"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_GRAY0);
      o->labelsize(13);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { D_p_attack = new Rueda(145, 25, 35, 35, gettext("Attack"));
      D_p_attack->box(FL_OVAL_BOX);
      D_p_attack->color(FL_BACKGROUND_COLOR);
      D_p_attack->selection_color(FL_INACTIVE_COLOR);
      D_p_attack->labeltype(FL_NORMAL_LABEL);
      D_p_attack->labelfont(0);
      D_p_attack->labelsize(9);
      D_p_attack->labelcolor(FL_FOREGROUND_COLOR);
      D_p_attack->minimum(5e-05);
      D_p_attack->maximum(0.0005);
      D_p_attack->step(1e-05);
      D_p_attack->value(0.0001);
      D_p_attack->callback((Fl_Callback*)cb_D_p_attack);
      D_p_attack->align(FL_ALIGN_BOTTOM);
      D_p_attack->when(FL_WHEN_CHANGED);
    } // Rueda* D_p_attack
    { D_p_decay = new Rueda(185, 25, 35, 35, gettext("Decay"));
      D_p_decay->box(FL_OVAL_BOX);
      D_p_decay->color(FL_BACKGROUND_COLOR);
      D_p_decay->selection_color(FL_INACTIVE_COLOR);
      D_p_decay->labeltype(FL_NORMAL_LABEL);
      D_p_decay->labelfont(0);
      D_p_decay->labelsize(9);
      D_p_decay->labelcolor(FL_FOREGROUND_COLOR);
      D_p_decay->minimum(0.001);
      D_p_decay->maximum(0.3);
      D_p_decay->step(0.001);
      D_p_decay->value(0.24);
      D_p_decay->callback((Fl_Callback*)cb_D_p_decay);
      D_p_decay->align(FL_ALIGN_BOTTOM);
      D_p_decay->when(FL_WHEN_CHANGED);
    } // Rueda* D_p_decay
    { Saca = new Fl_Box(0, 75, 230, 32);
      Saca->box(FL_DOWN_BOX);
      Saca->color(FL_FOREGROUND_COLOR);
      Saca->labelcolor((Fl_Color)1);
    } // Fl_Box* Saca
    { Fl_Box* o = new Fl_Box(230, 1, 150, 105, gettext("Normalize"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labelsize(13);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { D_Freq = new Fl_Counter(240, 30, 70, 25, gettext("Frequency"));
      D_Freq->type(1);
      D_Freq->labelsize(9);
      D_Freq->minimum(1);
      D_Freq->maximum(22);
      D_Freq->step(1);
      D_Freq->value(1);
      D_Freq->callback((Fl_Callback*)cb_D_Freq);
      D_Freq->align(FL_ALIGN_RIGHT);
    } // Fl_Counter* D_Freq
    { D_Att = new Fl_Counter(240, 65, 70, 25, gettext("Attenuation"));
      D_Att->type(1);
      D_Att->labelsize(9);
      D_Att->minimum(0.001);
      D_Att->maximum(1);
      D_Att->step(0.01);
      D_Att->value(1);
      D_Att->callback((Fl_Callback*)cb_D_Att);
      D_Att->align(FL_ALIGN_RIGHT);
      D_Att->when(FL_WHEN_RELEASE);
    } // Fl_Counter* D_Att
    { Fl_Box* o = new Fl_Box(1, 105, 210, 120, gettext("Frequency Fine"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labelsize(13);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { D_Freq_F = new Fl_Counter(45, 135, 70, 25, gettext("Frequency"));
      D_Freq_F->type(1);
      D_Freq_F->labelsize(9);
      D_Freq_F->minimum(1);
      D_Freq_F->maximum(10);
      D_Freq_F->step(1);
      D_Freq_F->value(1);
      D_Freq_F->callback((Fl_Callback*)cb_D_Freq_F);
      D_Freq_F->align(FL_ALIGN_RIGHT);
    } // Fl_Counter* D_Freq_F
    { D_FFval = new Fl_Counter(10, 170, 145, 25, gettext("Freq. Fine"));
      D_FFval->labelsize(9);
      D_FFval->minimum(-0.5);
      D_FFval->maximum(0.5);
      D_FFval->step(1e-05);
      D_FFval->callback((Fl_Callback*)cb_D_FFval);
      D_FFval->align(FL_ALIGN_RIGHT);
      D_FFval->when(FL_WHEN_RELEASE);
    } // Fl_Counter* D_FFval
    { Fl_Box* o = new Fl_Box(210, 105, 170, 60, gettext("Rotary Amplitude"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labelsize(13);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { D_Rot_Amp = new Fl_Counter(220, 135, 90, 25, gettext("Amplitude"));
      D_Rot_Amp->type(1);
      D_Rot_Amp->labelsize(9);
      D_Rot_Amp->minimum(100);
      D_Rot_Amp->maximum(18000);
      D_Rot_Amp->step(100);
      D_Rot_Amp->value(12800);
      D_Rot_Amp->callback((Fl_Callback*)cb_D_Rot_Amp);
      D_Rot_Amp->align(FL_ALIGN_RIGHT);
      D_Rot_Amp->when(FL_WHEN_RELEASE);
    } // Fl_Counter* D_Rot_Amp
    { Fl_Box* o = new Fl_Box(210, 165, 170, 60, gettext("Transpose"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labelsize(13);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { D_O_Transpose = new Fl_Counter(260, 190, 70, 25);
      D_O_Transpose->type(1);
      D_O_Transpose->labelsize(9);
      D_O_Transpose->minimum(-36);
      D_O_Transpose->maximum(24);
      D_O_Transpose->step(1);
      D_O_Transpose->callback((Fl_Callback*)cb_D_O_Transpose);
      D_O_Transpose->align(FL_ALIGN_RIGHT);
      D_O_Transpose->when(FL_WHEN_RELEASE);
    } // Fl_Counter* D_O_Transpose
    ADSRwin->end();
  } // Fl_Double_Window* ADSRwin
  return ADSRwin;
}

void HORGAN::metelo() {
  char *temp;
int val=1;
float valf=0;
int x,y,w,h;

Fl_Preferences horgand (Fl_Preferences::USER, WEBSITE , PACKAGE);

horgand.get("Audio Out device",temp,"");
DMIN2->label(temp);

horgand.get("Rhythm Selected",val,2);
Fl_Button *pepe;
pepe = (Fl_Button*) RitButtons->child(val-1);
pepe->value(1);

Selected_Rhythm = val;
GetRit(Selected_Rhythm);

horgand.get("Rhythm Volume",valf,.5);        
hor->Rhythm_Volume=valf;


horgand.get("Bass Selected",val,1);
SetBassType(val);

switch (val)
        {
          case 0:
          Bass1->value(1);
          break;          
          case 1:
          Bass2->value(1);
          break; 
          case 2:
          Bass3->value(1);
        }        
        
horgand.get("Bass Volume",valf,.5);        
hor->Bass_Volume=valf;

horgand.get("Preset",val,0);
hor->cpreset=val;
if(commandline == 0) PutCombi(hor->cpreset);
else meteprog();

horgand.get("Split Point",val,0);
hor->split=val;


horgand.get("Master_Tune",valf,1);
hor->mastertune=valf;
MasterT->value((int) ((hor->mastertune -1) * 1600));
calbtune();

horgand.get("Master Volume",valf,.7);
Master->value((int)(valf*100));
hor->Master_Volume=valf;

horgand.get("HORwindow X",x,1);
horgand.get("HORwindow Y",y,1);
horgand.get("HORwindow W",w,800);
horgand.get("HORwindow H",h,600);

HORwindow->resize(x,y,w,h);
}

void HORGAN::GetCombi(int i) {
  hor->Get_Combi_t(i);
}

void HORGAN::PutCombi(int i) {
  hor->cpreset= i;
hor->Put_Combi_t(i);

meteprog();
Actu();
sprintf(hor->temporal, "%02d",i);
DispNumber->label(hor->temporal);
CPrograma->value(i);
}

void HORGAN::MiraClientes() {
  FILE *fp;
char temp[128];
char temp1[128];
char *masque;
char *name;

BMidiIn->clear();
BMidiIn->add("Not Connected");

if ((fp = fopen ("/proc/asound/seq/clients", "r")) != NULL)
  {
    bzero (temp, sizeof (temp));

      while (fgets (temp, sizeof temp, fp) != NULL)
           {
             
            if (strstr(temp,"Port") != NULL)
             
           {  
             
             strcpy(temp1,temp);
             strtok(temp1,"\"");
             name=strtok(NULL,"\"");
             masque=strtok(NULL,")");
             
             if (masque[2]=='R' ) BMidiIn->add(name);
             
            } 
           } 
   }
   
   fclose(fp);
}

void HORGAN::MiraConfig() {
  int i = 1;

while (BMidiIn->text(i) != NULL)
{
if (strcmp(BMidiIn->text(i),hor->MID)==0 ) BMidiIn->select(i,1);
i++; 
}

switch (hor->Salida)
{
      case 1: 
             OSS->setonly();
             break;
      case 2: 
             Alsa->setonly();
             break;
      case 3:
             Jack->setonly();
             break;
      
}

BFiname->value(hor->BankFilename);
RFiname->value(hor->RhythmFilename);
}

void HORGAN::metebanco() {
  Banco1->label(hor->Banco[1].Name);
Banco2->label(hor->Banco[2].Name);
Banco3->label(hor->Banco[3].Name);
Banco4->label(hor->Banco[4].Name);
Banco5->label(hor->Banco[5].Name);
Banco6->label(hor->Banco[6].Name);
Banco7->label(hor->Banco[7].Name);
Banco8->label(hor->Banco[8].Name);
Banco9->label(hor->Banco[9].Name);
Banco10->label(hor->Banco[10].Name);
Banco11->label(hor->Banco[11].Name);
Banco12->label(hor->Banco[12].Name);
Banco13->label(hor->Banco[13].Name);
Banco14->label(hor->Banco[14].Name);
Banco15->label(hor->Banco[15].Name);
Banco16->label(hor->Banco[16].Name);
Banco17->label(hor->Banco[17].Name);
Banco18->label(hor->Banco[18].Name);
Banco19->label(hor->Banco[19].Name);
Banco20->label(hor->Banco[20].Name);
Banco21->label(hor->Banco[21].Name);
Banco22->label(hor->Banco[22].Name);
Banco23->label(hor->Banco[23].Name);
Banco24->label(hor->Banco[24].Name);
Banco25->label(hor->Banco[25].Name);
Banco26->label(hor->Banco[26].Name);
Banco27->label(hor->Banco[27].Name);
Banco28->label(hor->Banco[28].Name);
Banco29->label(hor->Banco[29].Name);
Banco30->label(hor->Banco[30].Name);
Banco31->label(hor->Banco[31].Name);
Banco32->label(hor->Banco[32].Name);
}

HORGAN::HORGAN(int argc, char **argv,HOR *hor_) {
  Fl::scheme("plastic");
fl_open_display();
XpmCreatePixmapFromData(fl_display, DefaultRootWindow(fl_display),(char **)horgand128,&p ,&mask, NULL);
Fl::visual(FL_DOUBLE|FL_INDEX);
Fl::visual(FL_RGB);
hor=hor_;
make_window();
HORwindow->icon((char *)p);
HORBank->icon((char *)p);
RitEdit->icon((char *)p);
ADSRwin->icon((char *)p);
aboutwindow->icon((char *)p);
Settingswindow->icon((char *)p);
char tmp[64];
sprintf(tmp,"%s v%s",PACKAGE,VERSION); 
HORwindow->copy_label(tmp);
Fl::focus(PANICO);
metebanco();
metelo();
Actu();
hor->PutPrim();
meteritmos();
HORwindow->show(argc,argv);
Fl::add_timeout(1.0 * 0.04,tick);
}

void HORGAN::Undo() {
  hor->MUndo();
meteprog();
}

void HORGAN::Actu() {
  if ( (CL->value() != 0 ) || (CF->value() !=0 ) ) {
           fl_alert("In Compare mode changes are deprecated");
           return;
           }

hor->MActu();
}

void HORGAN::Redo() {
  hor->MRedo();
meteprog();
}

void HORGAN::GetPrim() {
  hor->MGetPrim();
meteprog();
}

void HORGAN::tick(void *v) {
  Fl::add_timeout(1.0 * 0.04,tick);
}

void HORGAN::ponreverb() {
  int j;

hor->Clean_Buffer_Effects();

switch(hor->Reverb_Preset)
{
case 1:
hor->Reverb_Time = 16;
hor->Reverb_Volume = 0.65;
hor->Reverb_Diffussion = 0.14;

break;

case 2:
hor->Reverb_Time = 18;
hor->Reverb_Volume = 0.65;
hor->Reverb_Diffussion = 0.14;
break;

case 3:
hor->Reverb_Time = 20;
hor->Reverb_Volume = 0.65;
hor->Reverb_Diffussion = 0.16;
break;

case 4:
hor->Reverb_Time = 22;
hor->Reverb_Volume = 0.65;
hor->Reverb_Diffussion = 0.16;
break;

case 5:
hor->Reverb_Time = 24;
hor->Reverb_Volume = 0.65;
hor->Reverb_Diffussion = 0.16;
break;

case 6:
hor->Reverb_Time = 26;
hor->Reverb_Volume = 0.65;
hor->Reverb_Diffussion = 0.16;

case 7:
hor->Reverb_Time = 30;
hor->Reverb_Volume = 0.65;
hor->Reverb_Diffussion = 0.16;
break;

case 8:
hor->Reverb_Time = 34;
hor->Reverb_Volume = 0.65;
hor->Reverb_Diffussion = 0.16;
break;
}

for (j=0; j<16; j++)
  {
   hor->a_combl[j]=(hor->Reverb_Time * hor->combl[j]);
   hor->a_combr[j]=(hor->Reverb_Time * hor->combr[j]);
  }
}

void HORGAN::GetRit(int Selected_Rhythm) {
  int i;
int rula;

char temp[512];
sprintf(temp,"%s/%s",DATADIR,hor->Rt[Selected_Rhythm].Nfile);


char *tmp = temp;

rula = hor->Select_Rhythm(tmp);
if (rula != 0) 
{ 
RitOn->value(0);
StStRiton->value(0);
hor->Rhythm_On = 0;
return;
}
Tempo->activate();
hor->bars = hor->Rt[Selected_Rhythm].bars;
hor->quarter_note = hor->Rt[Selected_Rhythm].quarter_note;

for (i = 1; i<=(4 * hor->quarter_note * hor->bars); i++)
{
 hor->Line_Bass_Note[i] = hor->Rt[Selected_Rhythm].Line_Bass_Note[i];
 hor->Line_Bass_Velocity[i] =hor->Rt[Selected_Rhythm].Line_Bass_Velocity[i];
}

hor->frame_total_size = (int) (hor->tempo * hor->sfinfo.frames);
hor->fractional_position = hor->frame_total_size / (4 * hor->quarter_note * hor->bars);
Tempo->activate();
}

void HORGAN::meteritmos() {
  Rit1->label(hor->Rt[1].Nom);
Rit2->label(hor->Rt[2].Nom);
Rit3->label(hor->Rt[3].Nom);
Rit4->label(hor->Rt[4].Nom);
Rit5->label(hor->Rt[5].Nom);
Rit6->label(hor->Rt[6].Nom);
Rit7->label(hor->Rt[7].Nom);
Rit8->label(hor->Rt[8].Nom);
Rit9->label(hor->Rt[9].Nom);
Rit10->label(hor->Rt[10].Nom);
Rit11->label(hor->Rt[11].Nom);
Rit12->label(hor->Rt[12].Nom);
Rit13->label(hor->Rt[13].Nom);
Rit14->label(hor->Rt[14].Nom);
Rit15->label(hor->Rt[15].Nom);
Rit16->label(hor->Rt[16].Nom);
Rit17->label(hor->Rt[17].Nom);
Rit18->label(hor->Rt[18].Nom);
Rit19->label(hor->Rt[19].Nom);
Rit20->label(hor->Rt[20].Nom);
}

void HORGAN::calbtrans() {
  hor->bass_transpose = hor->transpose;
if ( hor->bass_transpose > 12 ) hor->bass_transpose = hor->bass_transpose  % 12;
if ( hor->bass_transpose < -12 ) hor->bass_transpose = hor->bass_transpose  % 12;
if ( hor->transpose % 12 == 0) hor->bass_transpose = 0;
}

void HORGAN::calbtune() {
  int i,k;
float btuneval =  ((float) MasterT->value() / 100.0);

for(i=0; i<=11; i++)
{
 if ( MasterT->value() > 0)

  {  k = i + 1;
     if (i == 11) k = 0; 
     hor->AB[i].bmt =  (hor->AB[k].tune - hor->AB[i].tune) * btuneval;

     if (i == 6) hor->AB[6].bmt = (2.980 - hor->AB[6].tune) * btuneval;

  }

 if (MasterT->value()== 0 ) hor->AB[i].bmt = 0;

if ( MasterT->value() < 0)

  {  k = i - 1;
     if (i == 0) k = 11; 
     hor->AB[i].bmt =  (hor->AB[i].tune - hor->AB[k].tune)  * btuneval;
      if (i == 7) hor->AB[7].bmt = (hor->AB[7].tune - 1.3980 ) * btuneval;

  }
 

}
}

void HORGAN::EditRit(int i) {
  hor->ae = i;
RtName->value(hor->Rt[i].Nom);
RtFile->value(hor->Rt[i].Nfile);
RtBars->value(hor->Rt[i].bars);
RtDen->value(hor->Rt[i].quarter_note);
QuitaPon();
hor->pattern_bars= 1;
meteval();
char temp[512];
sprintf(temp,"%s - Bass Line Editor",hor->Rt[i].Nom);
RitEdit->label(temp);
RitEdit->position(HORwindow->x(),HORwindow->y()+40);
RitEdit->show();
Fl::focus(CloRit);
}

void HORGAN::QuitaPon() {
  switch(hor->Rt[hor->ae].quarter_note)
{
  case 2:
     B1G3->hide();
     B1G4->hide();
     lb9->hide();
     lb10->hide();
     lb11->hide();
     lb12->hide();
     lb13->hide();
     lb14->hide();
     lb15->hide();
     lb16->hide();
     lbv9->hide();
     lbv10->hide();
     lbv11->hide();
     lbv12->hide();
     lbv13->hide();
     lbv14->hide();
     lbv15->hide();
     lbv16->hide();
    break;

  case 3:
     B1G3->show();
     B1G4->hide();
     lb9->show();
     lb10->show();
     lb11->show();
     lb12->show();
     lb13->hide();
     lb14->hide();
     lb15->hide();
     lb16->hide();
     lbv9->show();
     lbv10->show();
     lbv11->show();
     lbv12->show();
     lbv13->hide();
     lbv14->hide();
     lbv15->hide();
     lbv16->hide();
     break;
  case 4:
     B1G3->show();
     B1G4->show();
     lb9->show();
     lb10->show();
     lb11->show();
     lb12->show();
     lb13->show();
     lb14->show();
     lb15->show();
     lb16->show();
     lbv9->show();
     lbv10->show();
     lbv11->show();
     lbv12->show();
     lbv13->show();
     lbv14->show();
     lbv15->show();
     lbv16->show();
     break;
}
}

void HORGAN::meteval() {
  int i = (hor->pattern_bars- 1) * (hor->Rt[hor->ae].quarter_note * 4);


lb1->value(hor->Rt[hor->ae].Line_Bass_Note[i+1]);
lb2->value(hor->Rt[hor->ae].Line_Bass_Note[i+2]);
lb3->value(hor->Rt[hor->ae].Line_Bass_Note[i+3]);
lb4->value(hor->Rt[hor->ae].Line_Bass_Note[i+4]);
lb5->value(hor->Rt[hor->ae].Line_Bass_Note[i+5]);
lb6->value(hor->Rt[hor->ae].Line_Bass_Note[i+6]);
lb7->value(hor->Rt[hor->ae].Line_Bass_Note[i+7]);
lb8->value(hor->Rt[hor->ae].Line_Bass_Note[i+8]);
lbv1->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+1]);
lbv2->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+2]);
lbv3->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+3]);
lbv4->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+4]);
lbv5->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+5]);
lbv6->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+6]);
lbv7->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+7]);
lbv8->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+8]);

if ( hor->Rt[hor->ae].quarter_note > 2)
{

lb9->value(hor->Rt[hor->ae].Line_Bass_Note[i+9]);
lb10->value(hor->Rt[hor->ae].Line_Bass_Note[i+10]);
lb11->value(hor->Rt[hor->ae].Line_Bass_Note[i+11]);
lb12->value(hor->Rt[hor->ae].Line_Bass_Note[i+12]);
lbv9->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+9]);
lbv10->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+10]);
lbv11->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+11]);
lbv12->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+12]);

}

if ( hor->Rt[hor->ae].quarter_note > 3)

{

lb13->value(hor->Rt[hor->ae].Line_Bass_Note[i+13]);
lb14->value(hor->Rt[hor->ae].Line_Bass_Note[i+14]);
lb15->value(hor->Rt[hor->ae].Line_Bass_Note[i+15]);
lb16->value(hor->Rt[hor->ae].Line_Bass_Note[i+16]);
lbv13->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+13]);
lbv14->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+14]);
lbv15->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+15]);
lbv16->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+16]);
}

SBar->value(hor->pattern_bars);
}

void HORGAN::ApagaTodo() {
  Rit1->value(0);
Rit2->value(0);
Rit3->value(0);
Rit4->value(0);
Rit5->value(0);
Rit6->value(0);
Rit7->value(0);
Rit8->value(0);
Rit9->value(0);
Rit10->value(0);
Rit11->value(0);
Rit12->value(0);
Rit13->value(0);
Rit14->value(0);
Rit15->value(0);
Rit16->value(0);
Rit17->value(0);
Rit18->value(0);
Rit19->value(0);
Rit20->value(0);
}

void HORGAN::meteprog() {
  OMaster->value(hor->Organ_Master_Volume * 100.0);
RitVol->value(hor->Rhythm_Volume);
BassVol->value(hor->Bass_Volume);


Mar1->value(hor->Operator[1].marimba);
Mar2->value(hor->Operator[2].marimba);
Mar3->value(hor->Operator[3].marimba);
Mar4->value(hor->Operator[4].marimba);
Mar5->value(hor->Operator[5].marimba);
Mar6->value(hor->Operator[6].marimba);
Mar7->value(hor->Operator[7].marimba);
Mar8->value(hor->Operator[8].marimba);
Mar9->value(hor->Operator[9].marimba);
Mar10->value(hor->Operator[10].marimba);


V1->value(hor->Operator[1].volumen * 100);
V2->value(hor->Operator[2].volumen * 100);
V3->value(hor->Operator[3].volumen * 100);
V4->value(hor->Operator[4].volumen * 100);
V5->value(hor->Operator[5].volumen * 100);
V6->value(hor->Operator[6].volumen * 100);
V7->value(hor->Operator[7].volumen * 100);
V8->value(hor->Operator[8].volumen * 100);
V9->value(hor->Operator[9].volumen * 100);
V10->value(hor->Operator[10].volumen * 100);

H1->value(hor->Operator[1].harmonic);
H2->value(hor->Operator[2].harmonic);
H3->value(hor->Operator[3].harmonic);
H4->value(hor->Operator[4].harmonic);
H5->value(hor->Operator[5].harmonic);
H6->value(hor->Operator[6].harmonic);
H7->value(hor->Operator[7].harmonic);
H8->value(hor->Operator[8].harmonic);
H9->value(hor->Operator[9].harmonic);
H10->value(hor->Operator[10].harmonic);

NV1->value(hor->lasfreq[hor->Operator[1].harmonic]);
NV2->value(hor->lasfreq[hor->Operator[2].harmonic]);
NV3->value(hor->lasfreq[hor->Operator[3].harmonic]);
NV4->value(hor->lasfreq[hor->Operator[4].harmonic]);
NV5->value(hor->lasfreq[hor->Operator[5].harmonic]);
NV6->value(hor->lasfreq[hor->Operator[6].harmonic]);
NV7->value(hor->lasfreq[hor->Operator[7].harmonic]);
NV8->value(hor->lasfreq[hor->Operator[8].harmonic]);
NV9->value(hor->lasfreq[hor->Operator[9].harmonic]);
NV10->value(hor->lasfreq[hor->Operator[10].harmonic]);

Detune->value(hor->detune);
PLFOSpeed->value(hor->Pitch_LFO_Speed);
PLFODelay->value(hor->Pitch_LFO_Delay * 10);
LFOSpeed->value(hor->Rotary_LFO_Speed);
LFOPitch->value(hor->LFOpitch);
hor->Calc_LFO_Frequency();
Rota->value(hor->E_Rotary_On);
Transpose->value(hor->transpose);
calbtrans();
Nombre->value(hor->c_name);
CPrograma->value(hor->cpreset);
EchoVol->value(hor->Delay_Volume * 100);
EchoDelay->value(hor->Delay_Delay / 176400);
EchoOn->value(hor->E_Delay_On);
Rev->value(hor->E_Reverb_On);

if (hor->E_Reverb_On == 1)
{

R1->activate();
R2->activate();
R3->activate();
R4->activate();
R5->activate();
R6->activate();
R7->activate();
R8->activate();
switch(hor->Reverb_Preset)
{
case 1:
R1->setonly();
break;
case 2:
R2->setonly();
break;
case 3:
R3->setonly();
break;
case 4:
R4->setonly();
break;
case 5:
R5->setonly();
break;
case 6:
R6->setonly();
break;
case 7:
R7->setonly();
break;
case 8:
R8->setonly();
break;
}
}
else
{
R1->value(0);
R2->value(0);
R3->value(0);
R4->value(0);
R5->value(0);
R6->value(0);
R7->value(0);
R8->value(0);
R1->deactivate();
R2->deactivate();
R3->deactivate();
R4->deactivate();
R5->deactivate();
R6->deactivate();
R7->deactivate();
R8->deactivate();
}

if(hor->Rhythm_On != 1) Split->value(hor->split);
ChorusOn->value(hor->E_Chorus_On);
ELFOAmplitude->value(hor->Chorus_LFO_Amplitude);
hor->Calc_Chorus_LFO_Frequency();
POPO->value(hor->Chorus_Delay);
ELFOSpeed->value(hor->Chorus_LFO_Speed);
ChorVol->value(hor->Chorus_Volume * 100);
ponreverb();
metesynth();
hor->syncadsr();
}

void HORGAN::SetBassType(int type) {
  char temp[512];
const char *bassfiles[] = {"AcousticBass.wav", "FenderBass.wav", "FretlessBass.wav"};

sprintf(temp ,"%s/%s", DATADIR, bassfiles[type]);
hor->Select_Bass(temp);
hor->frames_bass = (int) (hor->sfinfob.frames / 2.0);
hor->Bass_Type=type;
}

void HORGAN::Guarda_Pref(int parte) {
  Fl_Preferences horgand (Fl_Preferences::USER, WEBSITE, PACKAGE);

if (parte==0)
{
horgand.set("HORwindow X",HORwindow->x());
horgand.set("HORwindow Y",HORwindow->y());
horgand.set("HORwindow W",HORwindow->w());
horgand.set("HORwindow H",HORwindow->h());

horgand.set("Bank Filename",hor->BankFilename);
horgand.set("Rhythm Filename",hor->RhythmFilename);


horgand.set("Type Chord Recognition",hor->TypeRecChord);
horgand.set("Split Point",hor->split);

horgand.set("Bass Selected",hor->Bass_Type);
horgand.set("Bass Volume",hor->Bass_Volume);
horgand.set("Rhythm Selected",Selected_Rhythm);
horgand.set("Rhythm Volume",hor->Rhythm_Volume);
horgand.set("Master Volume",hor->Master_Volume);
horgand.set("Master_Tune",hor->mastertune);
horgand.set("Transpose",hor->transpose);
horgand.set("Preset",hor->cpreset);
}

if (parte==1)
{

int i;
char *temp;

horgand.set("Bank Filename",hor->BankFilename);

i = BMidiIn->value();
temp = (char*) BMidiIn->text(i);
if (temp == NULL ) temp= strdup("Not Connected");
horgand.set("MIDI IN Device",temp);
bzero(temp,sizeof(temp));
temp = strdup("OSS");
if (OSS->value() != 0) temp = strdup("OSS");
if (Alsa->value() != 0) temp = strdup("Alsa");
if (Jack->value() != 0) temp =strdup("Jack");
horgand.set("Audio Out device",temp);
}

if (parte==2)
{ 
horgand.set("HORBank X",HORBank->x());
horgand.set("HORBank Y",HORBank->y());
horgand.set("HORBank W",HORBank->w());
horgand.set("HORBank H",HORBank->h());
}

if (parte==3)
{
horgand.set("Synth X",ADSRwin->x());
horgand.set("Synth Y",ADSRwin->y());
horgand.set("Synth W",ADSRwin->w());
horgand.set("Synth H",ADSRwin->h());
}
}

void HORGAN::ponvalor(float a) {
  char temp[32];
bzero(temp,sizeof(temp));
sprintf(temp,"%f",a);
Saca->copy_label(temp);
}

void HORGAN::metesynth() {
  D_attack->value(hor->attack);
D_decay->value(hor->decay);
D_sustain->value(hor->sustain);
D_p_attack->value(hor->p_attack);
D_p_decay->value(hor->p_decay);
D_Att->value(hor->Normalize[(int)D_Freq->value()]);
D_FFval->value(hor->Operator[(int)D_Freq_F->value()].harmonic_fine);
D_FFval->lstep(0.001);
D_Rot_Amp->value(hor->Rotary_LFO_Amplitude);
D_O_Transpose->value(hor->organ_transpose);
D_Freq_F->do_callback();
}
