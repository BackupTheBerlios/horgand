// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include <libintl.h>
#include "HORGAN.h"
//Copyright (c) 2003-2004 Josep Andreu (Holborn)
//License: GNU GPL version 2

Drawbar::Drawbar(int x,int y, int w, int h, const char *label):Fl_Slider(x,y,w,h,label) {
}

int Drawbar::handle(int event) {
  switch(event)
{

case FL_RELEASE:
{
draw();
Signal_for_Cb_Sliders=1;
do_callback();
return 1;
}


case FL_DRAG: 
{
Fl_Slider::handle(FL_DRAG,x(),y(),w(),h());
draw();
do_callback();
return 1;
}

case FL_SHORTCUT:
return 0;

default:
return 1;
}
}

Rueda::Rueda(int x,int y, int w, int h, const char *label):Fl_Dial(x,y,w,h,label) {
}

int Rueda::handle(int event) {
  switch(event)
{

case FL_RELEASE:
{
draw();
Signal_for_Cb_Sliders=1;
do_callback();
return 1;
}


case FL_DRAG: 
{
Fl_Dial::handle(FL_DRAG,x(),y(),w(),h());
draw();
do_callback();
return 1;
}

case FL_SHORTCUT:
return 0;

default:
return 1;
}
}

void HORGAN::cb_HORwindow_i(Fl_Double_Window* o, void*) {
  Pexitprogram=1;
o->hide();
exit(0);
}
void HORGAN::cb_HORwindow(Fl_Double_Window* o, void* v) {
  ((HORGAN*)(o->user_data()))->cb_HORwindow_i(o,v);
}

void HORGAN::cb_PANICO_i(Fl_Button*, void*) {
  hor->panic();
}
void HORGAN::cb_PANICO(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_PANICO_i(o,v);
}

void HORGAN::cb_MFile_i(Fl_Menu_*, void*) {
  Fl::focus(PANICO);
}
void HORGAN::cb_MFile(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_MFile_i(o,v);
}

void HORGAN::cb_New_i(Fl_Menu_*, void*) {
  hor->New();
ApagaTodo();
metelo();
Actu();
hor->PutPrim();
sprintf(hor->temporal, "--"); 
DispNumber->label(hor->temporal);
CPrograma->value(0);
}
void HORGAN::cb_New(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_New_i(o,v);
}

void HORGAN::cb_Load_i(Fl_Menu_*, void*) {
  char *filename;
Fl::focus(PANICO);
filename=fl_file_chooser("Load:","(*.hor)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".hor");
hor->loadfile(filename);
meteprog();
Actu();
hor->PutPrim();
sprintf(hor->temporal,"--");
DispNumber->label(hor->temporal);
}
void HORGAN::cb_Load(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Load_i(o,v);
}

void HORGAN::cb_Save_i(Fl_Menu_*, void*) {
  char *filename;
#define EXT ".hor"
filename=fl_file_chooser("Save:","(*"EXT")",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
#undef EXT
hor->savefile(filename);
hor->PutPrim();
}
void HORGAN::cb_Save(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Save_i(o,v);
}

void HORGAN::cb_Load1_i(Fl_Menu_* o, void*) {
  BLoad->do_callback(o);
}
void HORGAN::cb_Load1(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Load1_i(o,v);
}

void HORGAN::cb_Save1_i(Fl_Menu_* o, void*) {
  BSave->do_callback(o);
}
void HORGAN::cb_Save1(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Save1_i(o,v);
}

void HORGAN::cb_Load2_i(Fl_Menu_*, void*) {
  char *filename;
Fl::focus(PANICO);
filename=fl_file_chooser("Load:","(*.hrt)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".hrt");
hor->loadrhyt(filename);
meteritmos();
}
void HORGAN::cb_Load2(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Load2_i(o,v);
}

void HORGAN::cb_Save2_i(Fl_Menu_*, void*) {
  char *filename;
#define EXT ".hrt"
filename=fl_file_chooser("Save:","(*"EXT")",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
#undef EXT
hor->saverhyt(filename);
}
void HORGAN::cb_Save2(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Save2_i(o,v);
}

void HORGAN::cb_About_i(Fl_Menu_*, void*) {
  aboutwindow->position(200,200);
aboutwindow->show();
}
void HORGAN::cb_About(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_About_i(o,v);
}

void HORGAN::cb_E_i(Fl_Menu_* o, void*) {
  Pexitprogram=1;
o->hide();
exit(0);
}
void HORGAN::cb_E(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_E_i(o,v);
}

void HORGAN::cb_Undo_i(Fl_Menu_*, void*) {
  Undo();
}
void HORGAN::cb_Undo(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Undo_i(o,v);
}

void HORGAN::cb_Redo_i(Fl_Menu_*, void*) {
  Redo();
}
void HORGAN::cb_Redo(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Redo_i(o,v);
}

void HORGAN::cb_MBank_i(Fl_Menu_*, void*) {
  HORBank->position(1,1);
HORBank->show();
Fl::focus(BClose);
}
void HORGAN::cb_MBank(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_MBank_i(o,v);
}

void HORGAN::cb_Settings_i(Fl_Menu_*, void*) {
  MiraClientes();
MiraConfig();
Settingswindow->position(1,1);
Settingswindow->show();
Fl::focus(SClose);
}
void HORGAN::cb_Settings(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Settings_i(o,v);
}

Fl_Menu_Item HORGAN::menu_MenuPrincipal[] = {
 {gettext("&File"), 0,  (Fl_Callback*)HORGAN::cb_MFile, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&New..."), 0,  (Fl_Callback*)HORGAN::cb_New, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&Load..."), 0,  (Fl_Callback*)HORGAN::cb_Load, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&Save..."), 0,  (Fl_Callback*)HORGAN::cb_Save, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Load Bank..."), 0,  (Fl_Callback*)HORGAN::cb_Load1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Save Bank..."), 0,  (Fl_Callback*)HORGAN::cb_Save1, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Load Rhythm..."), 0,  (Fl_Callback*)HORGAN::cb_Load2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Save Rhythm..."), 0,  (Fl_Callback*)HORGAN::cb_Save2, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&About..."), 0,  (Fl_Callback*)HORGAN::cb_About, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("E&xit"), 0,  (Fl_Callback*)HORGAN::cb_E, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {gettext("&Edit"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&Undo"), 0x4007a,  (Fl_Callback*)HORGAN::cb_Undo, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&Redo"), 0x40072,  (Fl_Callback*)HORGAN::cb_Redo, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {gettext("&Bank"), 0x80062,  (Fl_Callback*)HORGAN::cb_MBank, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&Settings"), 0x80073,  (Fl_Callback*)HORGAN::cb_Settings, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* HORGAN::MFile = HORGAN::menu_MenuPrincipal + 0;
Fl_Menu_Item* HORGAN::MEdit = HORGAN::menu_MenuPrincipal + 11;
Fl_Menu_Item* HORGAN::MBank = HORGAN::menu_MenuPrincipal + 15;

void HORGAN::cb_CF_i(Fl_Light_Button* o, void*) {
  if (o->value() != 0 ) {
CL->deactivate();
MFile->deactivate();
MBank->deactivate();
MEdit->deactivate();
}
else {
CL->activate();
MFile->activate();
MBank->activate();
MEdit->activate();
}

if ( o->value() != 0 ) GetPrim(); else {
UndoCount++;
Undo();
};
}
void HORGAN::cb_CF(Fl_Light_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_CF_i(o,v);
}

void HORGAN::cb_CL_i(Fl_Light_Button* o, void*) {
  if (o->value() != 0 ) {
CF->deactivate();
MFile->deactivate();
MBank->deactivate();
MEdit->deactivate();
}
else{

CF->activate();
MFile->activate();
MBank->activate();
MEdit->activate();
}

if ( o->value() != 0 ) Undo(); else Redo();
}
void HORGAN::cb_CL(Fl_Light_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_CL_i(o,v);
}

void HORGAN::cb_VUI1_i(Fl_Slider* o, void*) {
  o->value(MidiInLevel);
}
void HORGAN::cb_VUI1(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_VUI1_i(o,v);
}

void HORGAN::cb_DMIN1_i(Fl_Box* o, void*) {
  o->label(hor->MidiInPuerto[1].pMIDIIN);
}
void HORGAN::cb_DMIN1(Fl_Box* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_DMIN1_i(o,v);
}

void HORGAN::cb_Transpose_i(Fl_Counter* o, void*) {
  hor->transpose = (int) o->value();
calbtrans();
Actu();
}
void HORGAN::cb_Transpose(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Transpose_i(o,v);
}

void HORGAN::cb_Master_i(Drawbar* o, void*) {
  hor->Master_Volume = (float) o->value() / 100.0;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_Master(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Master_i(o,v);
}

void HORGAN::cb_Nombre_i(Fl_Input* o, void*) {
  hor->c_name=(char*) o->value();
strncpy(hor->Name,hor->c_name,24);
Actu();
}
void HORGAN::cb_Nombre(Fl_Input* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Nombre_i(o,v);
}

void HORGAN::cb_MasterT_i(Fl_Counter* o, void*) {
  hor->mastertune = 1 + (float) (o->value() / 1600);
calbtune();
}
void HORGAN::cb_MasterT(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_MasterT_i(o,v);
}

void HORGAN::cb_V1_i(Drawbar* o, void*) {
  hor->Operator[1].volumen = (float) o->value() / 100;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V1(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V1_i(o,v);
}

void HORGAN::cb_V2_i(Drawbar* o, void*) {
  hor->Operator[2].volumen = (float) o->value() / 100;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V2(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V2_i(o,v);
}

void HORGAN::cb_V3_i(Drawbar* o, void*) {
  hor->Operator[3].volumen = (float) o->value() / 100;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V3(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V3_i(o,v);
}

void HORGAN::cb_Marimba_i(Drawbar* o, void*) {
  hor->attack = (float) o->value() / 100.0;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_Marimba(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Marimba_i(o,v);
}

void HORGAN::cb_V4_i(Drawbar* o, void*) {
  hor->Operator[4].volumen = (float) o->value() / 100;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V4(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V4_i(o,v);
}

void HORGAN::cb_V5_i(Drawbar* o, void*) {
  hor->Operator[5].volumen = (float) o->value() / 100;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V5(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V5_i(o,v);
}

void HORGAN::cb_V6_i(Drawbar* o, void*) {
  hor->Operator[6].volumen = (float) o->value() / 100;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V6(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V6_i(o,v);
}

void HORGAN::cb_Detune_i(Rueda* o, void*) {
  hor->detune = (float) o->value();
int i;
for (i=1; i<=10; i++)
{
hor->Operator[i].harmonic_fine = (float) ((o->value()) / ((16 -hor->Operator[i].harmonic) * i * 1000.0));
}
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_Detune(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Detune_i(o,v);
}

void HORGAN::cb_LFOSpeed_i(Rueda* o, void*) {
  hor->Rotary_LFO_Speed = (float) o->value();
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_LFOSpeed(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_LFOSpeed_i(o,v);
}

void HORGAN::cb_LFOPitch_i(Rueda* o, void*) {
  hor->LFOpitch = (float) o->value();
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_LFOPitch(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_LFOPitch_i(o,v);
}

void HORGAN::cb_PLFOSpeed_i(Rueda* o, void*) {
  hor->Pitch_LFO_Speed = (float) o->value();
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_PLFOSpeed(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_PLFOSpeed_i(o,v);
}

void HORGAN::cb_PLFODelay_i(Rueda* o, void*) {
  hor->Pitch_LFO_Delay = (float) o->value() / 10;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_PLFODelay(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_PLFODelay_i(o,v);
}

void HORGAN::cb_EchoVol_i(Fl_Counter* o, void*) {
  hor->Delay_Volume = (float) o->value() / 100;
Actu();
}
void HORGAN::cb_EchoVol(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_EchoVol_i(o,v);
}

void HORGAN::cb_EchoDelay_i(Fl_Counter* o, void*) {
  hor->Delay_Delay = (float) o->value() * 176400;
Actu();
}
void HORGAN::cb_EchoDelay(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_EchoDelay_i(o,v);
}

void HORGAN::cb_H1_i(Fl_Slider* o, void*) {
  hor->Operator[1].harmonic = (int) o->value();
NV1->value(hor->lasfreq[(int) o->value()]);

Actu();
}
void HORGAN::cb_H1(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H1_i(o,v);
}

void HORGAN::cb_H2_i(Fl_Slider* o, void*) {
  hor->Operator[2].harmonic = (int) o->value();
NV2->value(hor->lasfreq[(int) o->value()]);
Actu();
}
void HORGAN::cb_H2(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H2_i(o,v);
}

void HORGAN::cb_H3_i(Fl_Slider* o, void*) {
  hor->Operator[3].harmonic = (int) o->value();
NV3->value(hor->lasfreq[(int) o->value()]);

Actu();
}
void HORGAN::cb_H3(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H3_i(o,v);
}

void HORGAN::cb_H4_i(Fl_Slider* o, void*) {
  hor->Operator[4].harmonic = (int) o->value();
NV4->value(hor->lasfreq[(int) o->value()]);

Actu();
}
void HORGAN::cb_H4(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H4_i(o,v);
}

void HORGAN::cb_H5_i(Fl_Slider* o, void*) {
  hor->Operator[5].harmonic = (int) o->value();
NV5->value(hor->lasfreq[(int) o->value()]);
Actu();
}
void HORGAN::cb_H5(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H5_i(o,v);
}

void HORGAN::cb_H6_i(Fl_Slider* o, void*) {
  hor->Operator[6].harmonic = (int) o->value();
NV6->value(hor->lasfreq[(int) o->value()]);
Actu();
}
void HORGAN::cb_H6(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H6_i(o,v);
}

void HORGAN::cb_Rota_i(Fl_Button*, void*) {
  if (hor->E_Rotary_On == 0) hor->E_Rotary_On = 1; else hor->E_Rotary_On = 0;
Actu();
}
void HORGAN::cb_Rota(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Rota_i(o,v);
}

void HORGAN::cb_ELFOSpeed_i(Rueda* o, void*) {
  hor->Chorus_LFO_Speed = (float) o->value();
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_ELFOSpeed(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_ELFOSpeed_i(o,v);
}

void HORGAN::cb_ELFOAmplitude_i(Drawbar* o, void*) {
  hor->Chorus_LFO_Amplitude = (float) o->value();
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_ELFOAmplitude(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_ELFOAmplitude_i(o,v);
}

void HORGAN::cb_POPO_i(Drawbar* o, void*) {
  hor->Chorus_Delay = (float) o->value();
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_POPO(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_POPO_i(o,v);
}

void HORGAN::cb_ChorVol_i(Fl_Counter* o, void*) {
  hor->Chorus_Volume = (float) o->value() / 100.0;
Actu();
}
void HORGAN::cb_ChorVol(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_ChorVol_i(o,v);
}

void HORGAN::cb_Split_i(Fl_Button*, void*) {
  if (hor->split == 0) hor->split = 1; else hor->split = 0;
Actu();
}
void HORGAN::cb_Split(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Split_i(o,v);
}

void HORGAN::cb_DMIN2_i(Fl_Box* o, void*) {
  switch (hor->Salida)
{
 case 1:
        o->label("OSS");
        break;
 case 2:
        o->label("Alsa");
        break;
 case 3:
        o->label("Jack");
        break;
};
}
void HORGAN::cb_DMIN2(Fl_Box* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_DMIN2_i(o,v);
}

void HORGAN::cb_EchoOn_i(Fl_Button* o, void*) {
  hor->E_Delay_On =  o->value();
hor->delayclean();
Actu();
}
void HORGAN::cb_EchoOn(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_EchoOn_i(o,v);
}

void HORGAN::cb_ChorusOn_i(Fl_Button* o, void*) {
  hor->E_Chorus_On =  o->value();
hor->chorusclean();
Actu();
}
void HORGAN::cb_ChorusOn(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_ChorusOn_i(o,v);
}

void HORGAN::cb_R1_i(Fl_Button*, void*) {
  hor->Reverb_Preset = 1;
ponreverb();
Actu();
}
void HORGAN::cb_R1(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_R1_i(o,v);
}

void HORGAN::cb_R2_i(Fl_Button*, void*) {
  hor->Reverb_Preset = 2;
ponreverb();
Actu();
}
void HORGAN::cb_R2(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_R2_i(o,v);
}

void HORGAN::cb_R3_i(Fl_Button*, void*) {
  hor->Reverb_Preset = 3;
ponreverb();
Actu();
}
void HORGAN::cb_R3(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_R3_i(o,v);
}

void HORGAN::cb_R4_i(Fl_Button*, void*) {
  hor->Reverb_Preset = 4;
ponreverb();
Actu();
}
void HORGAN::cb_R4(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_R4_i(o,v);
}

void HORGAN::cb_R5_i(Fl_Button*, void*) {
  hor->Reverb_Preset = 5;
ponreverb();
Actu();
}
void HORGAN::cb_R5(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_R5_i(o,v);
}

void HORGAN::cb_R6_i(Fl_Button*, void*) {
  hor->Reverb_Preset = 6;
ponreverb();
Actu();
}
void HORGAN::cb_R6(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_R6_i(o,v);
}

void HORGAN::cb_R7_i(Fl_Button*, void*) {
  hor->Reverb_Preset = 7;
ponreverb();
Actu();
}
void HORGAN::cb_R7(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_R7_i(o,v);
}

void HORGAN::cb_R8_i(Fl_Button*, void*) {
  hor->Reverb_Preset = 8;
ponreverb();
Actu();
}
void HORGAN::cb_R8(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_R8_i(o,v);
}

void HORGAN::cb_Rev_i(Fl_Button* o, void*) {
  if (o->value()== 0) 
{
hor->E_Reverb_On= 0;
R1->value(0);
R2->value(0);
R3->value(0);
R4->value(0);
R5->value(0);
R6->value(0);
R7->value(0);
R8->value(0);
R1->deactivate();
R2->deactivate();
R3->deactivate();
R4->deactivate();
R5->deactivate();
R6->deactivate();
R7->deactivate();
R8->deactivate();


}
else
{
hor->E_Reverb_On = 1;
R1->activate();
R2->activate();
R3->activate();
R4->activate();
R5->activate();
R6->activate();
R7->activate();
R8->activate();
if (hor->Reverb_Preset==0) hor->Reverb_Preset = 1;

switch((int) hor->Reverb_Preset)
{
case 1:
R1->setonly();
break;
case 2:
R2->setonly();
break;
case 3:
R3->setonly();
break;
case 4:
R4->setonly();
break;
case 5:
R5->setonly();
break;
case 6:
R6->setonly();
break;
case 7:
R7->setonly();
break;
case 8:
R8->setonly();
break;
}
}
hor->reverbclean();
Actu();
}
void HORGAN::cb_Rev(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Rev_i(o,v);
}

void HORGAN::cb_RitVol_i(Fl_Slider* o, void*) {
  hor->Rhythm_Volume = o->value();
}
void HORGAN::cb_RitVol(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_RitVol_i(o,v);
}

void HORGAN::cb_Tempo_i(Fl_Dial* o, void*) {
  hor->tempo = (float) o->value();
hor->frame_total_size = (int) (hor->tempo * hor->sfinfo.frames);
hor->fractional_position = hor->frame_total_size /(4 * hor->quarter_note * hor->bars);
}
void HORGAN::cb_Tempo(Fl_Dial* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Tempo_i(o,v);
}

void HORGAN::cb_VUI2_i(Fl_Slider* o, void*) {
  o->value(BarLead);
}
void HORGAN::cb_VUI2(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_VUI2_i(o,v);
}

void HORGAN::cb_RitOn_i(Fl_Button* o, void*) {
  StStRiton->value(o->value());
BarLead = 0;
hor->Rhythm_On =  o->value();
VUI2->value(0);
}
void HORGAN::cb_RitOn(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_RitOn_i(o,v);
}

void HORGAN::cb_StStRiton_i(Fl_Button* o, void*) {
  if (Selected_Rhythm != 0)
{
// int readcounts = sf_seek (hor->infile, 0, SEEK_SET);
RitOn->value(o->value());
BarLead = 0;
hor->Rhythm_On =  o->value();
}

VUI2->value(0);
}
void HORGAN::cb_StStRiton(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_StStRiton_i(o,v);
}

void HORGAN::cb_Rit4_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 4;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit4(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit4_i(o,v);
}

void HORGAN::cb_Rit1_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 1;
if (Fl::event_button()==3) 
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit1(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit1_i(o,v);
}

void HORGAN::cb_Rit2_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 2;
if (Fl::event_button()==3)
{
 GetRit(Selected_Rhythm);
 EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit2(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit2_i(o,v);
}

void HORGAN::cb_Rit3_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 3;
if (Fl::event_button()==3)
{
 GetRit(Selected_Rhythm);
 EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit3(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit3_i(o,v);
}

void HORGAN::cb_Rit5_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 5;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit5(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit5_i(o,v);
}

void HORGAN::cb_Rit6_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 6;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit6(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit6_i(o,v);
}

void HORGAN::cb_Rit7_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 7;
if (Fl::event_button()==3) 
{
EditRit(Selected_Rhythm);
GetRit(Selected_Rhythm);
}

if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit7(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit7_i(o,v);
}

void HORGAN::cb_Rit8_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 8;
if (Fl::event_button()==3)
{
EditRit(Selected_Rhythm);
GetRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit8(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit8_i(o,v);
}

void HORGAN::cb_Rit9_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 9;
if (Fl::event_button()==3)
{
EditRit(Selected_Rhythm);
GetRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit9(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit9_i(o,v);
}

void HORGAN::cb_Rit10_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 10;
if (Fl::event_button()==3)
{
EditRit(Selected_Rhythm);
GetRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit10(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit10_i(o,v);
}

void HORGAN::cb_Rit11_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 11;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit11(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit11_i(o,v);
}

void HORGAN::cb_Rit12_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 12;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit12(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit12_i(o,v);
}

void HORGAN::cb_Rit13_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 13;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit13(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit13_i(o,v);
}

void HORGAN::cb_Rit14_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 14;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit14(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit14_i(o,v);
}

void HORGAN::cb_Rit15_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 15;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit15(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit15_i(o,v);
}

void HORGAN::cb_Rit16_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 16;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit16(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit16_i(o,v);
}

void HORGAN::cb_Rit17_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 17;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit17(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit17_i(o,v);
}

void HORGAN::cb_Rit18_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 18;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit18(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit18_i(o,v);
}

void HORGAN::cb_Rit19_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 19;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit19(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit19_i(o,v);
}

void HORGAN::cb_Rit20_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 20;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit20(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit20_i(o,v);
}

void HORGAN::cb_BassVol_i(Fl_Slider* o, void*) {
  hor->Bass_Volume = o->value();
}
void HORGAN::cb_BassVol(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_BassVol_i(o,v);
}

void HORGAN::cb_Basson_i(Fl_Button* o, void*) {
  //int readcounts = sf_seek (hor->infileb, 0, SEEK_SET);
BarLead = 0;
hor->split = o->value();
Split->value(o->value());
hor->Bass_On =  o->value();
}
void HORGAN::cb_Basson(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Basson_i(o,v);
}

void HORGAN::cb_Bass1_i(Fl_Button*, void*) {
  SetBassType(0);
}
void HORGAN::cb_Bass1(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Bass1_i(o,v);
}

void HORGAN::cb_Bass2_i(Fl_Button*, void*) {
  SetBassType(1);
}
void HORGAN::cb_Bass2(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Bass2_i(o,v);
}

void HORGAN::cb_Bass3_i(Fl_Button*, void*) {
  SetBassType(2);
}
void HORGAN::cb_Bass3(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Bass3_i(o,v);
}

void HORGAN::cb_CPrograma_i(Fl_Counter* o, void*) {
  hor->cpreset = (int) o->value();
PutCombi(hor->cpreset);
Actu();
}
void HORGAN::cb_CPrograma(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_CPrograma_i(o,v);
}

void HORGAN::cb_V7_i(Drawbar* o, void*) {
  hor->Operator[7].volumen = (float) o->value() / 100;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V7(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V7_i(o,v);
}

void HORGAN::cb_V8_i(Drawbar* o, void*) {
  hor->Operator[8].volumen = (float) o->value() / 100;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V8(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V8_i(o,v);
}

void HORGAN::cb_V9_i(Drawbar* o, void*) {
  hor->Operator[9].volumen = (float) o->value() / 100;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V9(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V9_i(o,v);
}

void HORGAN::cb_V10_i(Drawbar* o, void*) {
  hor->Operator[10].volumen = (float) o->value() / 100;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V10(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V10_i(o,v);
}

void HORGAN::cb_H7_i(Fl_Slider* o, void*) {
  hor->Operator[7].harmonic = (int) o->value();
NV7->value(hor->lasfreq[(int) o->value()]);

Actu();
}
void HORGAN::cb_H7(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H7_i(o,v);
}

void HORGAN::cb_H8_i(Fl_Slider* o, void*) {
  hor->Operator[8].harmonic = (int) o->value();
NV8->value(hor->lasfreq[(int) o->value()]);

Actu();
}
void HORGAN::cb_H8(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H8_i(o,v);
}

void HORGAN::cb_H9_i(Fl_Slider* o, void*) {
  hor->Operator[9].harmonic = (int) o->value();
NV9->value(hor->lasfreq[(int) o->value()]);
Actu();
}
void HORGAN::cb_H9(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H9_i(o,v);
}

void HORGAN::cb_H10_i(Fl_Slider* o, void*) {
  hor->Operator[10].harmonic = (int) o->value();
NV10->value(hor->lasfreq[(int) o->value()]);
Actu();
}
void HORGAN::cb_H10(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H10_i(o,v);
}

void HORGAN::cb_Mar4_i(Fl_Check_Button* o, void*) {
  if ((int)o->value())
{
hor->Operator[10].marimba = 1;
}
else
{
hor->Operator[10].marimba = 0;
};
}
void HORGAN::cb_Mar4(Fl_Check_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Mar4_i(o,v);
}

void HORGAN::cb_Mar3_i(Fl_Check_Button* o, void*) {
  if ((int)o->value())
{
hor->Operator[9].marimba = 1;
}
else
{
hor->Operator[9].marimba = 0;
};
}
void HORGAN::cb_Mar3(Fl_Check_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Mar3_i(o,v);
}

void HORGAN::cb_Mar2_i(Fl_Check_Button* o, void*) {
  if ((int)o->value())
{
hor->Operator[8].marimba = 1;
}
else
{
hor->Operator[8].marimba = 0;

};
}
void HORGAN::cb_Mar2(Fl_Check_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Mar2_i(o,v);
}

void HORGAN::cb_Mar1_i(Fl_Check_Button* o, void*) {
  if ((int)o->value())
{
hor->Operator[7].marimba = 1;

}
else
{
hor->Operator[7].marimba = 0;
};
}
void HORGAN::cb_Mar1(Fl_Check_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Mar1_i(o,v);
}

void HORGAN::cb_OMaster_i(Drawbar* o, void*) {
  hor->Organ_Master_Volume = (float) o->value() / 100.0;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_OMaster(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_OMaster_i(o,v);
}

void HORGAN::cb_OK_i(Fl_Button*, void*) {
  aboutwindow->hide();
}
void HORGAN::cb_OK(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_OK_i(o,v);
}

void HORGAN::cb_SClose_i(Fl_Button*, void*) {
  Settingswindow->hide();
}
void HORGAN::cb_SClose(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_SClose_i(o,v);
}

void HORGAN::cb_Save3_i(Fl_Button*, void*) {
  GrabaSettings();
fl_message("Changes will take effect the next time you restart the program");
Settingswindow->hide();
}
void HORGAN::cb_Save3(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Save3_i(o,v);
}

void HORGAN::cb_BMidiIn_i(Fl_Browser* o, void*) {
  int valor;
valor = (int) o->value();
hor->MidiInPuerto[1].SMidiIn =(char*) o->text(valor);
o->select(valor,1);
}
void HORGAN::cb_BMidiIn(Fl_Browser* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_BMidiIn_i(o,v);
}

void HORGAN::cb_Browse_i(Fl_Button*, void*) {
  char *filename;
filename=fl_file_chooser("Browse:","(*.horeb)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".horeb");
BFiname->value(filename);
strcpy(hor->BankFilename,filename);
}
void HORGAN::cb_Browse(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Browse_i(o,v);
}

void HORGAN::cb_BClose_i(Fl_Button*, void*) {
  HORBank->hide();
Fl::focus(PANICO);
}
void HORGAN::cb_BClose(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_BClose_i(o,v);
}

void HORGAN::cb_BLoad_i(Fl_Menu_*, void*) {
  char *filename;
filename=fl_file_chooser("Load:","(*.horeb)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".horeb");
hor->loadbank(filename);
metebanco();
}
void HORGAN::cb_BLoad(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_BLoad_i(o,v);
}

void HORGAN::cb_BSave_i(Fl_Menu_*, void*) {
  char *filename;
#define EXT ".horeb"
filename=fl_file_chooser("Save:","(*"EXT")",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
#undef EXT
hor->savebank(filename);
}
void HORGAN::cb_BSave(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_BSave_i(o,v);
}

void HORGAN::cb_Close_i(Fl_Menu_*, void*) {
  HORBank->hide();
Fl::focus(PANICO);
}
void HORGAN::cb_Close(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

Fl_Menu_Item HORGAN::menu_[] = {
 {gettext("&File"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&Load Bank"), 0,  (Fl_Callback*)HORGAN::cb_BLoad, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&Save Bank"), 0,  (Fl_Callback*)HORGAN::cb_BSave, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&Close"), 0,  (Fl_Callback*)HORGAN::cb_Close, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* HORGAN::BFile = HORGAN::menu_ + 0;
Fl_Menu_Item* HORGAN::BLoad = HORGAN::menu_ + 1;
Fl_Menu_Item* HORGAN::BSave = HORGAN::menu_ + 2;

void HORGAN::cb_Banco1_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(1);
if (Fl::event_button()==1) PutCombi(1);
o->label(hor->Banco[1].Name);
}
void HORGAN::cb_Banco1(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco1_i(o,v);
}

void HORGAN::cb_Banco2_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(2);
if (Fl::event_button()==1) PutCombi(2);
o->label(hor->Banco[2].Name);
}
void HORGAN::cb_Banco2(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco2_i(o,v);
}

void HORGAN::cb_Banco3_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(3);
if (Fl::event_button()==1) PutCombi(3);
o->label(hor->Banco[3].Name);
}
void HORGAN::cb_Banco3(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco3_i(o,v);
}

void HORGAN::cb_Banco4_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(4);
if (Fl::event_button()==1) PutCombi(4);
o->label(hor->Banco[4].Name);
}
void HORGAN::cb_Banco4(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco4_i(o,v);
}

void HORGAN::cb_Banco5_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(5);
if (Fl::event_button()==1) PutCombi(5);
o->label(hor->Banco[5].Name);
}
void HORGAN::cb_Banco5(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco5_i(o,v);
}

void HORGAN::cb_Banco6_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(6);
if (Fl::event_button()==1) PutCombi(6);
o->label(hor->Banco[6].Name);
}
void HORGAN::cb_Banco6(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco6_i(o,v);
}

void HORGAN::cb_Banco7_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(7);
if (Fl::event_button()==1) PutCombi(7);
o->label(hor->Banco[7].Name);
}
void HORGAN::cb_Banco7(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco7_i(o,v);
}

void HORGAN::cb_Banco8_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(8);
if (Fl::event_button()==1) PutCombi(8);
o->label(hor->Banco[8].Name);
}
void HORGAN::cb_Banco8(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco8_i(o,v);
}

void HORGAN::cb_Banco9_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(9);
if (Fl::event_button()==1) PutCombi(9);
o->label(hor->Banco[9].Name);
}
void HORGAN::cb_Banco9(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco9_i(o,v);
}

void HORGAN::cb_Banco10_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(10);
if (Fl::event_button()==1) PutCombi(10);
o->label(hor->Banco[10].Name);
}
void HORGAN::cb_Banco10(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco10_i(o,v);
}

void HORGAN::cb_Banco11_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(11);
if (Fl::event_button()==1) PutCombi(11);
o->label(hor->Banco[11].Name);
}
void HORGAN::cb_Banco11(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco11_i(o,v);
}

void HORGAN::cb_Banco12_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(12);
if (Fl::event_button()==1) PutCombi(12);
o->label(hor->Banco[12].Name);
}
void HORGAN::cb_Banco12(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco12_i(o,v);
}

void HORGAN::cb_Banco13_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(13);
if (Fl::event_button()==1) PutCombi(13);
o->label(hor->Banco[13].Name);
}
void HORGAN::cb_Banco13(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco13_i(o,v);
}

void HORGAN::cb_Banco14_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(14);
if (Fl::event_button()==1) PutCombi(14);
o->label(hor->Banco[14].Name);
}
void HORGAN::cb_Banco14(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco14_i(o,v);
}

void HORGAN::cb_Banco15_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(15);
if (Fl::event_button()==1) PutCombi(15);
o->label(hor->Banco[15].Name);
}
void HORGAN::cb_Banco15(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco15_i(o,v);
}

void HORGAN::cb_Banco16_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(16);
if (Fl::event_button()==1) PutCombi(16);
o->label(hor->Banco[16].Name);
}
void HORGAN::cb_Banco16(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco16_i(o,v);
}

void HORGAN::cb_Banco17_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(17);
if (Fl::event_button()==1) PutCombi(17);
o->label(hor->Banco[17].Name);
}
void HORGAN::cb_Banco17(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco17_i(o,v);
}

void HORGAN::cb_Banco18_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(18);
if (Fl::event_button()==1) PutCombi(18);
o->label(hor->Banco[18].Name);
}
void HORGAN::cb_Banco18(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco18_i(o,v);
}

void HORGAN::cb_Banco19_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(19);
if (Fl::event_button()==1) PutCombi(19);
o->label(hor->Banco[19].Name);
}
void HORGAN::cb_Banco19(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco19_i(o,v);
}

void HORGAN::cb_Banco20_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(20);
if (Fl::event_button()==1) PutCombi(20);
o->label(hor->Banco[20].Name);
}
void HORGAN::cb_Banco20(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco20_i(o,v);
}

void HORGAN::cb_Banco21_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(21);
if (Fl::event_button()==1) PutCombi(21);
o->label(hor->Banco[21].Name);
}
void HORGAN::cb_Banco21(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco21_i(o,v);
}

void HORGAN::cb_Banco22_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(22);
if (Fl::event_button()==1) PutCombi(22);
o->label(hor->Banco[22].Name);
}
void HORGAN::cb_Banco22(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco22_i(o,v);
}

void HORGAN::cb_Banco23_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(23);
if (Fl::event_button()==1) PutCombi(23);
o->label(hor->Banco[23].Name);
}
void HORGAN::cb_Banco23(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco23_i(o,v);
}

void HORGAN::cb_Banco24_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(24);
if (Fl::event_button()==1) PutCombi(24);
o->label(hor->Banco[24].Name);
}
void HORGAN::cb_Banco24(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco24_i(o,v);
}

void HORGAN::cb_Banco25_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(25);
if (Fl::event_button()==1) PutCombi(25);
o->label(hor->Banco[25].Name);
}
void HORGAN::cb_Banco25(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco25_i(o,v);
}

void HORGAN::cb_Banco26_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(26);
if (Fl::event_button()==1) PutCombi(26);
o->label(hor->Banco[26].Name);
}
void HORGAN::cb_Banco26(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco26_i(o,v);
}

void HORGAN::cb_Banco27_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(27);
if (Fl::event_button()==1) PutCombi(27);
o->label(hor->Banco[27].Name);
}
void HORGAN::cb_Banco27(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco27_i(o,v);
}

void HORGAN::cb_Banco28_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(28);
if (Fl::event_button()==1) PutCombi(28);
o->label(hor->Banco[28].Name);
}
void HORGAN::cb_Banco28(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco28_i(o,v);
}

void HORGAN::cb_Banco29_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(29);
if (Fl::event_button()==1) PutCombi(29);
o->label(hor->Banco[29].Name);
}
void HORGAN::cb_Banco29(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco29_i(o,v);
}

void HORGAN::cb_Banco30_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(30);
if (Fl::event_button()==1) PutCombi(30);
o->label(hor->Banco[30].Name);
}
void HORGAN::cb_Banco30(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco30_i(o,v);
}

void HORGAN::cb_Banco31_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(31);
if (Fl::event_button()==1) PutCombi(31);
o->label(hor->Banco[31].Name);
}
void HORGAN::cb_Banco31(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco31_i(o,v);
}

void HORGAN::cb_Banco32_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(32);
if (Fl::event_button()==1) PutCombi(32);
o->label(hor->Banco[32].Name);
}
void HORGAN::cb_Banco32(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Banco32_i(o,v);
}

void HORGAN::cb_RitEdit_i(Fl_Double_Window*, void*) {
  if((hor->Rt[hor->ae].bars < 1) || (hor->Rt[hor->ae].bars > 4))
{
fl_alert("Bars error.");
return;
}  

if((hor->Rt[hor->ae].quarter_note < 2) || (hor->Rt[hor->ae].quarter_note > 4))
{
fl_alert("Nom. error");
return;
}  
if (hor->file_ok == 1)
{
GetRit(hor->ae);
}
RitEdit->hide();
}
void HORGAN::cb_RitEdit(Fl_Double_Window* o, void* v) {
  ((HORGAN*)(o->user_data()))->cb_RitEdit_i(o,v);
}

void HORGAN::cb_RtName_i(Fl_Input* o, void*) {
  strcpy(hor->Rt[hor->ae].Nom , o->value());
}
void HORGAN::cb_RtName(Fl_Input* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_RtName_i(o,v);
}

void HORGAN::cb_RtFile_i(Fl_Input* o, void*) {
  strcpy(hor->Rt[hor->ae].Nfile, o->value());
}
void HORGAN::cb_RtFile(Fl_Input* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_RtFile_i(o,v);
}

void HORGAN::cb_RtBars_i(Fl_Value_Input* o, void*) {
  hor->Rt[hor->ae].bars = (int) o->value();
}
void HORGAN::cb_RtBars(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_RtBars_i(o,v);
}

void HORGAN::cb_RtDen_i(Fl_Value_Input* o, void*) {
  hor->Rt[hor->ae].quarter_note = (int)o->value();
QuitaPon();
}
void HORGAN::cb_RtDen(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_RtDen_i(o,v);
}

void HORGAN::cb_lb1_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 1;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb1(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb1_i(o,v);
}

void HORGAN::cb_lb2_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 2;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb2(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb2_i(o,v);
}

void HORGAN::cb_lb3_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 3;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb3(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb3_i(o,v);
}

void HORGAN::cb_lb4_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 4;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb4(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb4_i(o,v);
}

void HORGAN::cb_lbv1_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 1;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv1(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv1_i(o,v);
}

void HORGAN::cb_lbv2_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 2;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv2(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv2_i(o,v);
}

void HORGAN::cb_lbv3_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 3;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv3(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv3_i(o,v);
}

void HORGAN::cb_lbv4_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 4;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv4(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv4_i(o,v);
}

void HORGAN::cb_lb5_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 5;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb5(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb5_i(o,v);
}

void HORGAN::cb_lb6_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 6;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb6(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb6_i(o,v);
}

void HORGAN::cb_lb7_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 7;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb7(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb7_i(o,v);
}

void HORGAN::cb_lb8_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 8;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb8(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb8_i(o,v);
}

void HORGAN::cb_lbv5_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 5;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv5(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv5_i(o,v);
}

void HORGAN::cb_lbv6_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 6;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv6(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv6_i(o,v);
}

void HORGAN::cb_lbv7_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 7;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv7(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv7_i(o,v);
}

void HORGAN::cb_lbv8_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 8;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv8(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv8_i(o,v);
}

void HORGAN::cb_lb9_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 9;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb9(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb9_i(o,v);
}

void HORGAN::cb_lb10_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 10;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb10(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb10_i(o,v);
}

void HORGAN::cb_lb11_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 11;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb11(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb11_i(o,v);
}

void HORGAN::cb_lb12_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 12;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb12(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb12_i(o,v);
}

void HORGAN::cb_lbv9_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 9;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv9(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv9_i(o,v);
}

void HORGAN::cb_lbv10_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 10;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv10(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv10_i(o,v);
}

void HORGAN::cb_lbv11_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 11;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv11(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv11_i(o,v);
}

void HORGAN::cb_lbv12_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 12;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv12(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv12_i(o,v);
}

void HORGAN::cb_lb13_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 13;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb13(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb13_i(o,v);
}

void HORGAN::cb_lb14_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 14;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb14(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb14_i(o,v);
}

void HORGAN::cb_lb15_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 15;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb15(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb15_i(o,v);
}

void HORGAN::cb_lb16_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 16;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb16(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb16_i(o,v);
}

void HORGAN::cb_lbv13_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 13;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv13(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv13_i(o,v);
}

void HORGAN::cb_lbv14_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 14;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv14(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv14_i(o,v);
}

void HORGAN::cb_lbv15_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 15;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv15(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv15_i(o,v);
}

void HORGAN::cb_lbv16_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 16;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv16(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv16_i(o,v);
}

void HORGAN::cb_SBar_i(Fl_Counter* o, void*) {
  if (o->value() > hor->Rt[hor->ae].bars) o->value(hor->Rt[hor->ae].bars);
hor->pattern_bars = (int) o->value();
meteval();
}
void HORGAN::cb_SBar(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_SBar_i(o,v);
}

void HORGAN::cb_CloRit_i(Fl_Button*, void*) {
  if((hor->Rt[hor->ae].bars < 1) || (hor->Rt[hor->ae].bars > 4))
{
fl_alert("Bars error.");
return;
}  

if((hor->Rt[hor->ae].quarter_note < 2) || (hor->Rt[hor->ae].quarter_note > 4))
{
fl_alert("Nom. error");
return;
}  
if (hor->file_ok == 1)
{
GetRit(hor->ae);
}
RitEdit->hide();
}
void HORGAN::cb_CloRit(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_CloRit_i(o,v);
}

Fl_Double_Window* HORGAN::make_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = HORwindow = new Fl_Double_Window(825, 595, gettext("Horgand v1.09"));
    w = o;
    o->color(FL_LIGHT1);
    o->labelcolor((Fl_Color)208);
    o->callback((Fl_Callback*)cb_HORwindow, (void*)(this));
    w->hotspot(o);
    { Fl_Box* o = new Fl_Box(595, 405, 230, 190);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(17);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    }
    { Fl_Box* o = new Fl_Box(0, 310, 595, 285);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Box* o = new Fl_Box(385, 235, 75, 75);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(17);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    }
    { Fl_Box* o = new Fl_Box(530, 95, 65, 215, gettext("Master"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(17);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    }
    { Fl_Box* o = new Fl_Box(0, 95, 105, 215);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(19);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    }
    { Fl_Box* o = new Fl_Box(-30, 25, 855, 70);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Box* o = new Fl_Box(460, 95, 70, 215);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Box* o = new Fl_Box(105, 95, 65, 215);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(19);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    }
    { Fl_Box* o = new Fl_Box(235, 235, 150, 75);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(17);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    }
    { Fl_Box* o = new Fl_Box(385, 95, 75, 140);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(17);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    }
    { Fl_Box* o = new Fl_Box(170, 95, 65, 215);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(19);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    }
    { Fl_Button* o = PANICO = new Fl_Button(5, 275, 95, 30, gettext("Panic!!"));
      o->box(FL_PLASTIC_UP_BOX);
      o->shortcut(0xff0d);
      o->color((Fl_Color)1);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->labelsize(15);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_PANICO);
    }
    { Fl_Menu_Bar* o = MenuPrincipal = new Fl_Menu_Bar(0, 0, 1030, 25);
      o->box(FL_THIN_UP_BOX);
      o->menu(menu_MenuPrincipal);
    }
    { Fl_Box* o = new Fl_Box(180, 245, 46, 46);
      o->box(FL_OVAL_FRAME);
    }
    { Fl_Box* o = new Fl_Box(240, 139, 46, 46);
      o->box(FL_OVAL_FRAME);
    }
    { Fl_Box* o = new Fl_Box(115, 244, 46, 46);
      o->box(FL_OVAL_FRAME);
    }
    { Fl_Box* o = new Fl_Box(180, 169, 46, 31);
      o->box(FL_DOWN_FRAME);
    }
    { Fl_Box* o = new Fl_Box(305, 115, 31, 90);
      o->box(FL_DOWN_FRAME);
    }
    { Fl_Box* o = new Fl_Box(180, 99, 46, 46);
      o->box(FL_OVAL_FRAME);
    }
    { Fl_Box* o = new Fl_Box(235, 95, 150, 140);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(19);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    }
    { Fl_Box* o = new Fl_Box(115, 99, 46, 46);
      o->box(FL_OVAL_FRAME);
    }
    { Fl_Box* o = new Fl_Box(115, 174, 46, 46);
      o->box(FL_OVAL_FRAME);
    }
    { Fl_Box* o = new Fl_Box(250, 210, 55, 20, gettext("Volume"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(10);
      o->labelcolor((Fl_Color)208);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(180, 204, 46, 31);
      o->box(FL_DOWN_FRAME);
    }
    { Fl_Box* o = new Fl_Box(385, 240, 75, 20, gettext("Master Tune"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(10);
      o->labelcolor((Fl_Color)208);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(315, 240, 50, 15, gettext("Delay"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(10);
      o->labelcolor((Fl_Color)208);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(385, 275, 75, 15, gettext("Transpose"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(10);
      o->labelcolor((Fl_Color)208);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(240, 139, 46, 46);
      o->box(FL_OVAL_FRAME);
    }
    { Fl_Box* o = new Fl_Box(240, 99, 46, 31);
      o->box(FL_DOWN_FRAME);
    }
    { Fl_Box* o = new Fl_Box(315, 275, 50, 15, gettext("Volume"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(10);
      o->labelcolor((Fl_Color)208);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(655, 525, 46, 45);
      o->box(FL_OVAL_FRAME);
    }
    { Fl_Box* o = new Fl_Box(240, 244, 46, 31);
      o->box(FL_DOWN_FRAME);
    }
    { Fl_Light_Button* o = CF = new Fl_Light_Button(5, 235, 95, 40, gettext("Compare First"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labelfont(1);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_CF);
      o->align(196|FL_ALIGN_INSIDE);
      o->when(FL_WHEN_CHANGED);
    }
    { Fl_Light_Button* o = CL = new Fl_Light_Button(5, 195, 95, 40, gettext("Compare Last"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labelfont(1);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_CL);
      o->align(196|FL_ALIGN_INSIDE);
      o->when(FL_WHEN_CHANGED);
    }
    { Fl_Slider* o = VUI1 = new Fl_Slider(795, 35, 25, 50);
      o->type(2);
      o->color((Fl_Color)30);
      o->selection_color((Fl_Color)207);
      o->minimum(127);
      o->maximum(0);
      o->step(1);
      o->callback((Fl_Callback*)cb_VUI1);
    }
    { Fl_Box* o = new Fl_Box(725, 65, 65, 20, gettext("MIDI IN"));
      o->labelsize(9);
      o->align(FL_ALIGN_CLIP);
    }
    { Fl_Box* o = DMIN1 = new Fl_Box(530, 35, 260, 25);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)40);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_DMIN1);
      o->align(68|FL_ALIGN_INSIDE);
      o->label(hor->MidiInPuerto[1].pMIDIIN);
    }
    { Fl_Box* o = DispNumber = new Fl_Box(15, 100, 75, 60, gettext("--"));
      o->box(FL_SHADOW_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->selection_color(FL_BACKGROUND2_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(14);
      o->labelsize(37);
      o->labelcolor((Fl_Color)128);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Counter* o = Transpose = new Fl_Counter(395, 285, 55, 20);
      o->type(1);
      o->labeltype(FL_EMBOSSED_LABEL);
      o->labelcolor((Fl_Color)208);
      o->minimum(-48);
      o->maximum(48);
      o->step(1);
      o->callback((Fl_Callback*)cb_Transpose);
      o->align(FL_ALIGN_LEFT);
      o->when(FL_WHEN_RELEASE);
    }
    { Drawbar* o = Master = new Drawbar(535, 100, 55, 190, gettext("Volume"));
      o->type(4);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->selection_color((Fl_Color)1);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(0);
      o->labelsize(12);
      o->labelcolor((Fl_Color)4);
      o->minimum(100);
      o->maximum(0);
      o->step(1);
      o->value(70);
      o->callback((Fl_Callback*)cb_Master);
      o->align(FL_ALIGN_BOTTOM);
      o->when(FL_WHEN_CHANGED);
    }
    { Fl_Input* o = Nombre = new Fl_Input(5, 35, 300, 50, gettext("  "));
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)219);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(21);
      o->labelcolor((Fl_Color)208);
      o->textsize(29);
      o->textcolor(88);
      o->callback((Fl_Callback*)cb_Nombre);
      o->align(68);
    }
    { Fl_Counter* o = MasterT = new Fl_Counter(395, 255, 55, 20);
      o->type(1);
      o->labeltype(FL_EMBOSSED_LABEL);
      o->labelcolor((Fl_Color)208);
      o->minimum(-99);
      o->maximum(99);
      o->step(1);
      o->callback((Fl_Callback*)cb_MasterT);
      o->align(FL_ALIGN_LEFT);
    }
    { Drawbar* o = V1 = new Drawbar(2, 335, 55, 205);
      o->type(4);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)24);
      o->selection_color(FL_GREEN);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor((Fl_Color)4);
      o->maximum(99);
      o->step(1);
      o->callback((Fl_Callback*)cb_V1);
      o->align(66);
      o->when(FL_WHEN_CHANGED);
    }
    { Drawbar* o = V2 = new Drawbar(61, 335, 55, 205);
      o->type(4);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)24);
      o->selection_color(FL_GREEN);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor((Fl_Color)4);
      o->maximum(99);
      o->step(1);
      o->callback((Fl_Callback*)cb_V2);
      o->align(66);
      o->when(FL_WHEN_CHANGED);
    }
    { Drawbar* o = V3 = new Drawbar(120, 335, 55, 205);
      o->type(4);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)24);
      o->selection_color(FL_GREEN);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor((Fl_Color)4);
      o->maximum(99);
      o->step(1);
      o->callback((Fl_Callback*)cb_V3);
      o->align(66);
      o->when(FL_WHEN_CHANGED);
    }
    { Drawbar* o = Marimba = new Drawbar(10, 315, 165, 15, gettext("Attack"));
      o->type(5);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)24);
      o->selection_color((Fl_Color)5);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor((Fl_Color)4);
      o->minimum(24);
      o->step(0.1);
      o->value(1);
      o->callback((Fl_Callback*)cb_Marimba);
      o->align(FL_ALIGN_RIGHT);
      o->when(FL_WHEN_CHANGED);
    }
    { Drawbar* o = V4 = new Drawbar(180, 335, 55, 205);
      o->type(4);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)24);
      o->selection_color(FL_GREEN);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor((Fl_Color)4);
      o->maximum(99);
      o->step(1);
      o->callback((Fl_Callback*)cb_V4);
      o->align(66);
      o->when(FL_WHEN_CHANGED);
    }
    { Drawbar* o = V5 = new Drawbar(238, 335, 55, 205);
      o->type(4);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)24);
      o->selection_color(FL_GREEN);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor((Fl_Color)4);
      o->maximum(99);
      o->step(1);
      o->callback((Fl_Callback*)cb_V5);
      o->align(66);
      o->when(FL_WHEN_CHANGED);
    }
    { Drawbar* o = V6 = new Drawbar(295, 335, 55, 205);
      o->type(4);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)24);
      o->selection_color(FL_GREEN);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor((Fl_Color)4);
      o->maximum(99);
      o->step(1);
      o->callback((Fl_Callback*)cb_V6);
      o->align(66);
      o->when(FL_WHEN_CHANGED);
    }
    { Rueda* o = Detune = new Rueda(180, 245, 45, 45, gettext("Detune"));
      o->box(FL_OSHADOW_BOX);
      o->color(FL_DARK1);
      o->selection_color(FL_INACTIVE_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(0);
      o->labelsize(12);
      o->labelcolor((Fl_Color)4);
      o->maximum(100);
      o->step(0.1);
      o->callback((Fl_Callback*)cb_Detune);
      o->align(FL_ALIGN_BOTTOM);
      o->when(FL_WHEN_RELEASE);
    }
    { Rueda* o = LFOSpeed = new Rueda(180, 100, 45, 45, gettext("Speed"));
      o->box(FL_OSHADOW_BOX);
      o->color(FL_DARK1);
      o->selection_color(FL_INACTIVE_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(0);
      o->labelsize(12);
      o->labelcolor((Fl_Color)4);
      o->maximum(40);
      o->step(0.1);
      o->callback((Fl_Callback*)cb_LFOSpeed);
      o->align(FL_ALIGN_BOTTOM);
      o->when(FL_WHEN_CHANGED);
    }
    { Rueda* o = LFOPitch = new Rueda(115, 245, 45, 45, gettext("Tremolo"));
      o->box(FL_OSHADOW_BOX);
      o->color(FL_DARK1);
      o->selection_color(FL_INACTIVE_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(0);
      o->labelsize(12);
      o->labelcolor((Fl_Color)4);
      o->maximum(20);
      o->step(0.01);
      o->callback((Fl_Callback*)cb_LFOPitch);
      o->align(FL_ALIGN_BOTTOM);
      o->when(FL_WHEN_CHANGED);
    }
    { Rueda* o = PLFOSpeed = new Rueda(115, 100, 45, 45, gettext("Speed"));
      o->box(FL_OSHADOW_BOX);
      o->color(FL_DARK1);
      o->selection_color(FL_INACTIVE_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(0);
      o->labelsize(12);
      o->labelcolor((Fl_Color)4);
      o->maximum(30);
      o->step(0.01);
      o->callback((Fl_Callback*)cb_PLFOSpeed);
      o->align(FL_ALIGN_BOTTOM);
      o->when(FL_WHEN_CHANGED);
    }
    { Rueda* o = PLFODelay = new Rueda(115, 175, 45, 45, gettext("Delay"));
      o->box(FL_OSHADOW_BOX);
      o->color(FL_DARK1);
      o->selection_color(FL_INACTIVE_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(0);
      o->labelsize(12);
      o->labelcolor((Fl_Color)4);
      o->maximum(99);
      o->step(1);
      o->callback((Fl_Callback*)cb_PLFODelay);
      o->align(FL_ALIGN_BOTTOM);
      o->when(FL_WHEN_CHANGED);
    }
    { Fl_Counter* o = EchoVol = new Fl_Counter(310, 285, 65, 20);
      o->type(1);
      o->labelcolor((Fl_Color)208);
      o->minimum(0);
      o->maximum(99);
      o->step(1);
      o->callback((Fl_Callback*)cb_EchoVol);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Counter* o = EchoDelay = new Fl_Counter(310, 250, 65, 25);
      o->type(1);
      o->labelcolor((Fl_Color)208);
      o->minimum(0);
      o->maximum(1);
      o->step(0.01);
      o->callback((Fl_Callback*)cb_EchoDelay);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Slider* o = H1 = new Fl_Slider(2, 563, 55, 25);
      o->type(5);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->selection_color((Fl_Color)3);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor((Fl_Color)4);
      o->minimum(1);
      o->maximum(22);
      o->step(1);
      o->callback((Fl_Callback*)cb_H1);
      o->align(FL_ALIGN_TOP);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Box* o = new Fl_Box(650, 464, 52, 36);
      o->box(FL_DOWN_FRAME);
    }
    { Fl_Slider* o = H2 = new Fl_Slider(61, 563, 55, 25);
      o->type(5);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->selection_color((Fl_Color)3);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor((Fl_Color)4);
      o->minimum(1);
      o->maximum(22);
      o->step(1);
      o->callback((Fl_Callback*)cb_H2);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Slider* o = H3 = new Fl_Slider(120, 565, 55, 25);
      o->type(5);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->selection_color((Fl_Color)3);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor((Fl_Color)4);
      o->minimum(1);
      o->maximum(22);
      o->step(1);
      o->callback((Fl_Callback*)cb_H3);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Slider* o = H4 = new Fl_Slider(179, 565, 55, 25);
      o->type(5);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->selection_color((Fl_Color)3);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor((Fl_Color)4);
      o->minimum(1);
      o->maximum(22);
      o->step(1);
      o->callback((Fl_Callback*)cb_H4);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Slider* o = H5 = new Fl_Slider(238, 565, 55, 25);
      o->type(5);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->selection_color((Fl_Color)3);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor((Fl_Color)4);
      o->minimum(1);
      o->maximum(22);
      o->step(1);
      o->callback((Fl_Callback*)cb_H5);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Slider* o = H6 = new Fl_Slider(297, 565, 55, 25);
      o->type(5);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->selection_color((Fl_Color)3);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor((Fl_Color)4);
      o->minimum(1);
      o->maximum(22);
      o->step(1);
      o->callback((Fl_Callback*)cb_H6);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Button* o = Rota = new Fl_Button(180, 170, 45, 30, gettext("Rotary"));
      o->type(1);
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)31);
      o->selection_color((Fl_Color)135);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_Rota);
      o->align(FL_ALIGN_CLIP);
    }
    { Rueda* o = ELFOSpeed = new Rueda(240, 140, 45, 45, gettext("Speed"));
      o->box(FL_OSHADOW_BOX);
      o->color(FL_DARK1);
      o->selection_color(FL_INACTIVE_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(0);
      o->labelsize(12);
      o->labelcolor((Fl_Color)4);
      o->maximum(5);
      o->step(0.01);
      o->callback((Fl_Callback*)cb_ELFOSpeed);
      o->align(FL_ALIGN_BOTTOM);
      o->when(FL_WHEN_CHANGED);
    }
    { Drawbar* o = ELFOAmplitude = new Drawbar(310, 115, 30, 90, gettext("D"));
      o->type(4);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)24);
      o->selection_color((Fl_Color)1);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(0);
      o->labelsize(12);
      o->labelcolor((Fl_Color)4);
      o->maximum(99);
      o->step(1);
      o->callback((Fl_Callback*)cb_ELFOAmplitude);
      o->align(65);
      o->when(FL_WHEN_CHANGED);
    }
    { Drawbar* o = POPO = new Drawbar(345, 115, 30, 90, gettext("S"));
      o->type(4);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)24);
      o->selection_color((Fl_Color)3);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(0);
      o->labelsize(12);
      o->labelcolor((Fl_Color)4);
      o->maximum(99);
      o->step(1);
      o->callback((Fl_Callback*)cb_POPO);
      o->align(65);
      o->when(FL_WHEN_CHANGED);
    }
    { Fl_Counter* o = ChorVol = new Fl_Counter(310, 210, 65, 20);
      o->type(1);
      o->labelcolor((Fl_Color)208);
      o->minimum(0);
      o->maximum(99);
      o->step(1);
      o->callback((Fl_Callback*)cb_ChorVol);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Button* o = Split = new Fl_Button(180, 205, 45, 30, gettext("Split"));
      o->type(1);
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)31);
      o->selection_color((Fl_Color)135);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_Split);
      o->align(FL_ALIGN_CLIP);
    }
    { Fl_Box* o = DMIN2 = new Fl_Box(530, 60, 85, 25);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)40);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_DMIN2);
      o->align(68|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = EchoOn = new Fl_Button(240, 245, 45, 30, gettext("Delay"));
      o->type(1);
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)31);
      o->selection_color((Fl_Color)135);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_EchoOn);
      o->align(FL_ALIGN_CLIP);
    }
    { Fl_Button* o = ChorusOn = new Fl_Button(240, 100, 45, 30, gettext("Chorus"));
      o->type(1);
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)31);
      o->selection_color((Fl_Color)135);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_ChorusOn);
      o->align(FL_ALIGN_CLIP);
    }
    { Fl_Group* o = new Fl_Group(385, 135, 75, 100);
      { Fl_Button* o = R1 = new Fl_Button(395, 135, 25, 20, gettext("1"));
        o->type(102);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color((Fl_Color)1);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(9);
        o->callback((Fl_Callback*)cb_R1);
        o->deactivate();
      }
      { Fl_Button* o = R2 = new Fl_Button(425, 135, 25, 20, gettext("2"));
        o->type(102);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color((Fl_Color)1);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(9);
        o->callback((Fl_Callback*)cb_R2);
        o->deactivate();
      }
      { Fl_Button* o = R3 = new Fl_Button(395, 160, 25, 20, gettext("3"));
        o->type(102);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color((Fl_Color)1);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(9);
        o->callback((Fl_Callback*)cb_R3);
        o->deactivate();
      }
      { Fl_Button* o = R4 = new Fl_Button(425, 160, 25, 20, gettext("4"));
        o->type(102);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color((Fl_Color)1);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(9);
        o->callback((Fl_Callback*)cb_R4);
        o->deactivate();
      }
      { Fl_Button* o = R5 = new Fl_Button(395, 185, 25, 20, gettext("5"));
        o->type(102);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color((Fl_Color)1);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(9);
        o->callback((Fl_Callback*)cb_R5);
        o->deactivate();
      }
      { Fl_Button* o = R6 = new Fl_Button(425, 185, 25, 20, gettext("6"));
        o->type(102);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color((Fl_Color)1);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(9);
        o->callback((Fl_Callback*)cb_R6);
        o->deactivate();
      }
      { Fl_Button* o = R7 = new Fl_Button(395, 210, 25, 20, gettext("7"));
        o->type(102);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color((Fl_Color)1);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(9);
        o->callback((Fl_Callback*)cb_R7);
        o->deactivate();
      }
      { Fl_Button* o = R8 = new Fl_Button(425, 210, 25, 20, gettext("8"));
        o->type(102);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color((Fl_Color)1);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(9);
        o->callback((Fl_Callback*)cb_R8);
        o->deactivate();
      }
      o->end();
    }
    { Fl_Box* o = new Fl_Box(390, 99, 46, 31);
      o->box(FL_DOWN_FRAME);
      o->align(FL_ALIGN_CLIP);
    }
    { Fl_Button* o = Rev = new Fl_Button(390, 100, 45, 30, gettext("Reverb"));
      o->type(1);
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)31);
      o->selection_color((Fl_Color)3);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_Rev);
      o->align(FL_ALIGN_CLIP);
    }
    { Fl_Slider* o = RitVol = new Fl_Slider(605, 415, 40, 155, gettext("Volume"));
      o->type(4);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)24);
      o->selection_color((Fl_Color)3);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->labelcolor((Fl_Color)4);
      o->minimum(0.99);
      o->maximum(0);
      o->step(0.01);
      o->value(0.5);
      o->callback((Fl_Callback*)cb_RitVol);
    }
    { Fl_Dial* o = Tempo = new Fl_Dial(655, 525, 45, 45, gettext("Tempo"));
      o->box(FL_OSHADOW_BOX);
      o->color(FL_DARK1);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->labelcolor((Fl_Color)4);
      o->minimum(1.7);
      o->maximum(2.7);
      o->step(0.01);
      o->value(2);
      o->callback((Fl_Callback*)cb_Tempo);
      o->deactivate();
    }
    { Fl_Slider* o = VUI2 = new Fl_Slider(650, 510, 15, 15);
      o->type(2);
      o->color((Fl_Color)30);
      o->selection_color((Fl_Color)1);
      o->minimum(127);
      o->maximum(0);
      o->step(1);
      o->callback((Fl_Callback*)cb_VUI2);
    }
    { Fl_Button* o = RitOn = new Fl_Button(650, 465, 50, 35, gettext("Stop/Cont"));
      o->type(1);
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)31);
      o->selection_color((Fl_Color)135);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(8);
      o->callback((Fl_Callback*)cb_RitOn);
      o->align(FL_ALIGN_CLIP);
    }
    { Fl_Box* o = new Fl_Box(650, 424, 51, 36);
      o->box(FL_DOWN_FRAME);
    }
    { Fl_Button* o = StStRiton = new Fl_Button(650, 425, 50, 35, gettext("Start/Stop"));
      o->type(1);
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)31);
      o->selection_color((Fl_Color)135);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(8);
      o->callback((Fl_Callback*)cb_StStRiton);
      o->align(FL_ALIGN_CLIP);
    }
    { Fl_Box* o = new Fl_Box(595, 95, 230, 310);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(17);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    }
    { Fl_Group* o = new Fl_Group(595, 83, 230, 322);
      { Fl_Button* o = Rit4 = new Fl_Button(605, 195, 95, 25);
        o->tooltip(gettext("Right Click Edit -  Left Click Select"));
        o->type(1);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color(FL_GREEN);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Rit4);
        o->align(FL_ALIGN_CLIP);
      }
      { Fl_Button* o = Rit1 = new Fl_Button(605, 105, 95, 25);
        o->tooltip(gettext("Right Click Edit -  Left Click Select"));
        o->type(1);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color(FL_GREEN);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Rit1);
        o->align(FL_ALIGN_CLIP);
      }
      { Fl_Button* o = Rit2 = new Fl_Button(605, 135, 95, 25);
        o->tooltip(gettext("Right Click Edit -  Left Click Select"));
        o->type(1);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color(FL_GREEN);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Rit2);
        o->align(FL_ALIGN_CLIP);
      }
      { Fl_Button* o = Rit3 = new Fl_Button(605, 165, 95, 25);
        o->tooltip(gettext("Right Click Edit -  Left Click Select"));
        o->type(1);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color(FL_GREEN);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Rit3);
        o->align(FL_ALIGN_CLIP);
      }
      { Fl_Button* o = Rit5 = new Fl_Button(605, 225, 95, 25);
        o->tooltip(gettext("Right Click Edit -  Left Click Select"));
        o->type(1);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color(FL_GREEN);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Rit5);
        o->align(FL_ALIGN_CLIP);
      }
      { Fl_Button* o = Rit6 = new Fl_Button(605, 255, 95, 25);
        o->tooltip(gettext("Right Click Edit -  Left Click Select"));
        o->type(1);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color(FL_GREEN);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Rit6);
        o->align(FL_ALIGN_CLIP);
      }
      { Fl_Button* o = Rit7 = new Fl_Button(605, 285, 95, 25);
        o->tooltip(gettext("Right Click Edit -  Left Click Select"));
        o->type(1);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color(FL_GREEN);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Rit7);
        o->align(FL_ALIGN_CLIP);
      }
      { Fl_Button* o = Rit8 = new Fl_Button(605, 315, 95, 25);
        o->tooltip(gettext("Right Click Edit -  Left Click Select"));
        o->type(1);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color(FL_GREEN);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Rit8);
        o->align(FL_ALIGN_CLIP);
      }
      { Fl_Button* o = Rit9 = new Fl_Button(605, 345, 95, 25);
        o->tooltip(gettext("Right Click Edit -  Left Click Select"));
        o->type(1);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color(FL_GREEN);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Rit9);
        o->align(FL_ALIGN_CLIP);
      }
      { Fl_Button* o = Rit10 = new Fl_Button(605, 375, 95, 25);
        o->tooltip(gettext("Right Click Edit -  Left Click Select"));
        o->type(1);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color(FL_GREEN);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Rit10);
        o->align(FL_ALIGN_CLIP);
      }
      { Fl_Button* o = Rit11 = new Fl_Button(720, 105, 95, 25);
        o->tooltip(gettext("Right Click Edit -  Left Click Select"));
        o->type(1);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color(FL_GREEN);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Rit11);
        o->align(FL_ALIGN_CLIP);
      }
      { Fl_Button* o = Rit12 = new Fl_Button(720, 135, 95, 25);
        o->tooltip(gettext("Right Click Edit -  Left Click Select"));
        o->type(1);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color(FL_GREEN);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Rit12);
        o->align(FL_ALIGN_CLIP);
      }
      { Fl_Button* o = Rit13 = new Fl_Button(720, 165, 95, 25);
        o->tooltip(gettext("Right Click Edit -  Left Click Select"));
        o->type(1);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color(FL_GREEN);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Rit13);
        o->align(FL_ALIGN_CLIP);
      }
      { Fl_Button* o = Rit14 = new Fl_Button(720, 195, 95, 25);
        o->tooltip(gettext("Right Click Edit -  Left Click Select"));
        o->type(1);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color(FL_GREEN);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Rit14);
        o->align(FL_ALIGN_CLIP);
      }
      { Fl_Button* o = Rit15 = new Fl_Button(720, 226, 95, 25);
        o->tooltip(gettext("Right Click Edit -  Left Click Select"));
        o->type(1);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color(FL_GREEN);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Rit15);
        o->align(FL_ALIGN_CLIP);
      }
      { Fl_Button* o = Rit16 = new Fl_Button(720, 255, 95, 25);
        o->tooltip(gettext("Right Click Edit -  Left Click Select"));
        o->type(1);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color(FL_GREEN);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Rit16);
        o->align(FL_ALIGN_CLIP);
      }
      { Fl_Button* o = Rit17 = new Fl_Button(720, 285, 95, 25);
        o->tooltip(gettext("Right Click Edit -  Left Click Select"));
        o->type(1);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color(FL_GREEN);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Rit17);
        o->align(FL_ALIGN_CLIP);
      }
      { Fl_Button* o = Rit18 = new Fl_Button(720, 315, 95, 25);
        o->tooltip(gettext("Right Click Edit -  Left Click Select"));
        o->type(1);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color(FL_GREEN);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Rit18);
        o->align(FL_ALIGN_CLIP);
      }
      { Fl_Button* o = Rit19 = new Fl_Button(720, 345, 95, 25);
        o->tooltip(gettext("Right Click Edit -  Left Click Select"));
        o->type(1);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color(FL_GREEN);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Rit19);
        o->align(FL_ALIGN_CLIP);
      }
      { Fl_Button* o = Rit20 = new Fl_Button(720, 375, 95, 25);
        o->tooltip(gettext("Right Click Edit -  Left Click Select"));
        o->type(1);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color(FL_GREEN);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Rit20);
        o->align(FL_ALIGN_CLIP);
      }
      o->end();
    }
    { Fl_Slider* o = BassVol = new Fl_Slider(710, 415, 40, 155, gettext("Volume"));
      o->type(4);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)24);
      o->selection_color((Fl_Color)3);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->labelcolor((Fl_Color)4);
      o->minimum(0.99);
      o->maximum(0);
      o->step(0.01);
      o->value(0.5);
      o->callback((Fl_Callback*)cb_BassVol);
    }
    { Fl_Box* o = new Fl_Box(765, 424, 51, 36);
      o->box(FL_DOWN_FRAME);
    }
    { Fl_Button* o = Basson = new Fl_Button(765, 425, 50, 35, gettext("Bass"));
      o->type(1);
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)31);
      o->selection_color((Fl_Color)135);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_Basson);
      o->align(FL_ALIGN_CLIP);
    }
    { Fl_Group* o = new Fl_Group(760, 465, 60, 95);
      o->end();
    }
    { Fl_Group* o = new Fl_Group(755, 470, 70, 85);
      { Fl_Button* o = Bass1 = new Fl_Button(755, 470, 65, 25, gettext("Acoustic"));
        o->type(102);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color(FL_GREEN);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Bass1);
        o->align(FL_ALIGN_CLIP);
      }
      { Fl_Button* o = Bass2 = new Fl_Button(755, 500, 65, 25, gettext("Electric"));
        o->type(102);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color(FL_GREEN);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Bass2);
        o->align(FL_ALIGN_CLIP);
      }
      { Fl_Button* o = Bass3 = new Fl_Button(755, 530, 65, 25, gettext("Fretless"));
        o->type(102);
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)31);
        o->selection_color(FL_GREEN);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Bass3);
        o->align(FL_ALIGN_CLIP);
      }
      o->end();
    }
    { Fl_Box* o = ACI = new Fl_Box(315, 35, 205, 50);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)219);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->labelsize(22);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Value_Output* o = NV1 = new Fl_Value_Output(2, 543, 55, 20);
      o->color(FL_DARK1);
      o->selection_color((Fl_Color)1);
      o->labelfont(1);
      o->maximum(16);
      o->step(0.5);
      o->textfont(1);
      o->textcolor(4);
      o->align(72|FL_ALIGN_INSIDE);
    }
    { Fl_Value_Output* o = NV2 = new Fl_Value_Output(61, 543, 55, 20);
      o->color(FL_DARK1);
      o->selection_color((Fl_Color)1);
      o->maximum(16);
      o->step(0.5);
      o->textfont(1);
      o->textcolor(4);
      o->align(72|FL_ALIGN_INSIDE);
    }
    { Fl_Value_Output* o = NV3 = new Fl_Value_Output(120, 543, 55, 20);
      o->color(FL_DARK1);
      o->selection_color((Fl_Color)1);
      o->maximum(16);
      o->step(0.5);
      o->textfont(1);
      o->textcolor(4);
      o->align(72|FL_ALIGN_INSIDE);
    }
    { Fl_Value_Output* o = NV4 = new Fl_Value_Output(179, 543, 55, 20);
      o->color(FL_DARK1);
      o->selection_color((Fl_Color)1);
      o->maximum(16);
      o->step(0.5);
      o->textfont(1);
      o->textcolor(4);
      o->align(72|FL_ALIGN_INSIDE);
    }
    { Fl_Value_Output* o = NV5 = new Fl_Value_Output(238, 543, 55, 20);
      o->color(FL_DARK1);
      o->selection_color((Fl_Color)1);
      o->maximum(16);
      o->step(0.5);
      o->textfont(1);
      o->textcolor(4);
      o->align(72|FL_ALIGN_INSIDE);
    }
    { Fl_Value_Output* o = NV6 = new Fl_Value_Output(297, 543, 55, 20);
      o->color(FL_DARK1);
      o->selection_color((Fl_Color)1);
      o->maximum(16);
      o->step(0.5);
      o->textfont(1);
      o->textcolor(4);
      o->align(72|FL_ALIGN_INSIDE);
    }
    { Fl_Counter* o = CPrograma = new Fl_Counter(15, 165, 75, 25);
      o->type(1);
      o->labeltype(FL_EMBOSSED_LABEL);
      o->labelcolor((Fl_Color)208);
      o->minimum(0);
      o->maximum(32);
      o->step(1);
      o->callback((Fl_Callback*)cb_CPrograma);
      o->align(FL_ALIGN_LEFT);
      o->when(FL_WHEN_RELEASE);
    }
    { Drawbar* o = V7 = new Drawbar(355, 335, 55, 205);
      o->type(4);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)24);
      o->selection_color(FL_GREEN);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor((Fl_Color)4);
      o->maximum(99);
      o->step(1);
      o->callback((Fl_Callback*)cb_V7);
      o->align(66);
      o->when(FL_WHEN_CHANGED);
    }
    { Drawbar* o = V8 = new Drawbar(415, 335, 55, 205);
      o->type(4);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)24);
      o->selection_color(FL_GREEN);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor((Fl_Color)4);
      o->maximum(99);
      o->step(1);
      o->callback((Fl_Callback*)cb_V8);
      o->align(66);
      o->when(FL_WHEN_CHANGED);
    }
    { Drawbar* o = V9 = new Drawbar(474, 335, 55, 205);
      o->type(4);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)24);
      o->selection_color(FL_GREEN);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor((Fl_Color)4);
      o->maximum(99);
      o->step(1);
      o->callback((Fl_Callback*)cb_V9);
      o->align(66);
      o->when(FL_WHEN_CHANGED);
    }
    { Drawbar* o = V10 = new Drawbar(533, 335, 55, 205);
      o->type(4);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)24);
      o->selection_color(FL_GREEN);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor((Fl_Color)4);
      o->maximum(99);
      o->step(1);
      o->callback((Fl_Callback*)cb_V10);
      o->align(66);
      o->when(FL_WHEN_CHANGED);
    }
    { Fl_Slider* o = H7 = new Fl_Slider(356, 565, 55, 25);
      o->type(5);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->selection_color((Fl_Color)3);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor((Fl_Color)4);
      o->minimum(1);
      o->maximum(22);
      o->step(1);
      o->callback((Fl_Callback*)cb_H7);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Slider* o = H8 = new Fl_Slider(415, 565, 55, 25);
      o->type(5);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->selection_color((Fl_Color)3);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor((Fl_Color)4);
      o->minimum(1);
      o->maximum(22);
      o->step(1);
      o->callback((Fl_Callback*)cb_H8);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Slider* o = H9 = new Fl_Slider(474, 565, 55, 25);
      o->type(5);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->selection_color((Fl_Color)3);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor((Fl_Color)4);
      o->minimum(1);
      o->maximum(22);
      o->step(1);
      o->callback((Fl_Callback*)cb_H9);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Slider* o = H10 = new Fl_Slider(533, 565, 55, 25);
      o->type(5);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->selection_color((Fl_Color)3);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor((Fl_Color)4);
      o->minimum(1);
      o->maximum(22);
      o->step(1);
      o->callback((Fl_Callback*)cb_H10);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Value_Output* o = NV7 = new Fl_Value_Output(356, 543, 55, 20);
      o->color(FL_DARK1);
      o->selection_color((Fl_Color)1);
      o->maximum(16);
      o->step(0.5);
      o->textfont(1);
      o->textcolor(4);
      o->align(72|FL_ALIGN_INSIDE);
    }
    { Fl_Value_Output* o = NV8 = new Fl_Value_Output(415, 543, 55, 20);
      o->color(FL_DARK1);
      o->selection_color((Fl_Color)1);
      o->maximum(16);
      o->step(0.5);
      o->textfont(1);
      o->textcolor(4);
      o->align(72|FL_ALIGN_INSIDE);
    }
    { Fl_Value_Output* o = NV9 = new Fl_Value_Output(474, 543, 55, 20);
      o->color(FL_DARK1);
      o->selection_color((Fl_Color)1);
      o->maximum(16);
      o->step(0.5);
      o->textfont(1);
      o->textcolor(4);
      o->align(72|FL_ALIGN_INSIDE);
    }
    { Fl_Value_Output* o = NV10 = new Fl_Value_Output(533, 543, 55, 20);
      o->color(FL_DARK1);
      o->selection_color((Fl_Color)1);
      o->maximum(16);
      o->step(0.5);
      o->textfont(1);
      o->textcolor(4);
      o->align(72|FL_ALIGN_INSIDE);
    }
    { Fl_Check_Button* o = Mar4 = new Fl_Check_Button(535, 315, 60, 20, gettext("Marimba"));
      o->down_box(FL_DOWN_BOX);
      o->labelsize(9);
      o->callback((Fl_Callback*)cb_Mar4);
    }
    { Fl_Check_Button* o = Mar3 = new Fl_Check_Button(475, 315, 55, 20, gettext("Marimba"));
      o->down_box(FL_DOWN_BOX);
      o->labelsize(9);
      o->callback((Fl_Callback*)cb_Mar3);
    }
    { Fl_Check_Button* o = Mar2 = new Fl_Check_Button(415, 315, 55, 20, gettext("Marimba"));
      o->down_box(FL_DOWN_BOX);
      o->labelsize(9);
      o->callback((Fl_Callback*)cb_Mar2);
    }
    { Fl_Check_Button* o = Mar1 = new Fl_Check_Button(355, 315, 55, 20, gettext("Marimba"));
      o->down_box(FL_DOWN_BOX);
      o->labelsize(9);
      o->callback((Fl_Callback*)cb_Mar1);
    }
    { Drawbar* o = OMaster = new Drawbar(470, 100, 55, 190, gettext("Volume"));
      o->type(4);
      o->box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)24);
      o->selection_color((Fl_Color)2);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(0);
      o->labelsize(12);
      o->labelcolor((Fl_Color)4);
      o->minimum(100);
      o->maximum(0);
      o->step(1);
      o->value(70);
      o->callback((Fl_Callback*)cb_OMaster);
      o->align(FL_ALIGN_BOTTOM);
      o->when(FL_WHEN_CHANGED);
    }
    o->end();
    o->resizable(o);
  }
  { Fl_Double_Window* o = aboutwindow = new Fl_Double_Window(380, 300, gettext("About..."));
    w = o;
    o->user_data((void*)(this));
    { Fl_Box* o = new Fl_Box(35, 5, 260, 40, gettext("Horgand"));
      o->labelfont(1);
      o->labelsize(24);
      o->align(FL_ALIGN_CLIP);
    }
    { Fl_Box* o = new Fl_Box(10, 45, 345, 70, gettext("Copyright (C) 2003-2007 by Josep Andreu\n     (Holborn) \n      holborn@@tele\
fonica.net "));
      o->labelfont(1);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(0, 115, 340, 130, gettext("This is free software. you may redistribute and/or modify it under the terms \
of the version 2 of the GNU General Public License as published by the Free So\
ftware Fundation.\n This program comes with \n ABSOLUTE NO WARRANTY. \n See th\
e version 2 of the \n GNU General Public License for details."));
      o->labelfont(1);
      o->labelsize(11);
      o->align(194|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = new Fl_Button(140, 250, 70, 40, gettext("OK"));
      o->shortcut(0xff0d);
      o->callback((Fl_Callback*)cb_OK);
    }
    o->end();
  }
  { Fl_Double_Window* o = Settingswindow = new Fl_Double_Window(495, 265, gettext("Settings"));
    w = o;
    o->user_data((void*)(this));
    new Fl_Box(5, 0, 151, 30, gettext("Midi Input to:"));
    { Fl_Button* o = SClose = new Fl_Button(350, 165, 120, 30, gettext("Close"));
      o->shortcut(0xff0d);
      o->callback((Fl_Callback*)cb_SClose);
    }
    { Fl_Button* o = new Fl_Button(350, 125, 120, 30, gettext("Save"));
      o->callback((Fl_Callback*)cb_Save3);
    }
    { Fl_Browser* o = BMidiIn = new Fl_Browser(5, 25, 295, 185);
      o->type(2);
      o->selection_color(FL_FOREGROUND_COLOR);
      o->callback((Fl_Callback*)cb_BMidiIn);
    }
    { Fl_Group* o = new Fl_Group(315, 25, 155, 95, gettext("Audio Output"));
      o->box(FL_DOWN_BOX);
      o->color((Fl_Color)25);
      { Fl_Check_Button* o = OSS = new Fl_Check_Button(340, 30, 100, 25, gettext(" OSS"));
        o->type(102);
        o->down_box(FL_DOWN_BOX);
        o->align(68|FL_ALIGN_INSIDE);
      }
      { Fl_Check_Button* o = Alsa = new Fl_Check_Button(340, 60, 100, 25, gettext(" Alsa"));
        o->type(102);
        o->down_box(FL_DOWN_BOX);
        o->align(68|FL_ALIGN_INSIDE);
      }
      { Fl_Check_Button* o = Jack = new Fl_Check_Button(340, 90, 100, 25, gettext(" Jack"));
        o->type(102);
        o->down_box(FL_DOWN_BOX);
        o->align(68|FL_ALIGN_INSIDE);
      }
      o->end();
    }
    { Fl_File_Input* o = BFiname = new Fl_File_Input(0, 230, 390, 30, gettext("  Bank Filename"));
      o->labelsize(12);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Button* o = new Fl_Button(405, 230, 65, 30, gettext("Browse"));
      o->callback((Fl_Callback*)cb_Browse);
    }
    o->end();
  }
  { Fl_Double_Window* o = HORBank = new Fl_Double_Window(710, 360, gettext("DXEmulator Bank"));
    w = o;
    o->tooltip(gettext("Right Click Get  - Left Click Put"));
    o->user_data((void*)(this));
    { Fl_Button* o = BClose = new Fl_Button(275, 310, 145, 40, gettext("Close"));
      o->box(FL_PLASTIC_UP_BOX);
      o->shortcut(0xff0d);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->callback((Fl_Callback*)cb_BClose);
    }
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 760, 30);
      o->menu(menu_);
    }
    { Fl_Button* o = Banco1 = new Fl_Button(30, 60, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco1);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(0, 60, 30, 25, gettext("1"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco2 = new Fl_Button(205, 60, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco2);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(175, 60, 30, 25, gettext("2"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco3 = new Fl_Button(380, 60, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco3);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(350, 60, 30, 25, gettext("3"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco4 = new Fl_Button(555, 60, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco4);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(525, 60, 30, 25, gettext("4"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco5 = new Fl_Button(30, 90, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco5);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco6 = new Fl_Button(205, 90, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco6);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(175, 90, 30, 25, gettext("6"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco7 = new Fl_Button(380, 90, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco7);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(350, 90, 30, 25, gettext("17"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco8 = new Fl_Button(555, 90, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco8);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(525, 90, 30, 25, gettext("8"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco9 = new Fl_Button(30, 120, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco9);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco10 = new Fl_Button(205, 120, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco10);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(175, 120, 30, 25, gettext("10"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco11 = new Fl_Button(380, 120, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco11);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(350, 120, 30, 25, gettext("11"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco12 = new Fl_Button(555, 120, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco12);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(525, 120, 30, 25, gettext("12"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco13 = new Fl_Button(30, 150, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco13);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco14 = new Fl_Button(205, 150, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco14);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(175, 150, 30, 25, gettext("14"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco15 = new Fl_Button(380, 150, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco15);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(350, 150, 30, 25, gettext("15"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco16 = new Fl_Button(555, 150, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco16);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(525, 150, 30, 25, gettext("16"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco17 = new Fl_Button(30, 180, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco17);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco18 = new Fl_Button(205, 180, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco18);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(175, 180, 30, 25, gettext("18"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco19 = new Fl_Button(380, 180, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco19);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(350, 180, 30, 25, gettext("19"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco20 = new Fl_Button(555, 180, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco20);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(525, 180, 30, 25, gettext("20"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(0, 90, 30, 25, gettext("5"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(0, 120, 30, 25, gettext("9"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(0, 150, 30, 25, gettext("13"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(0, 180, 30, 25, gettext("17"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco21 = new Fl_Button(30, 210, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco21);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(0, 210, 30, 25, gettext("21"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco22 = new Fl_Button(205, 210, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco22);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(175, 210, 30, 25, gettext("22"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco23 = new Fl_Button(380, 210, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco23);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(350, 210, 30, 25, gettext("23"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco24 = new Fl_Button(555, 210, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco24);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(525, 210, 30, 25, gettext("24"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco25 = new Fl_Button(30, 240, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco25);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(0, 240, 30, 25, gettext("25"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco26 = new Fl_Button(205, 240, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco26);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(175, 240, 30, 25, gettext("26"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco27 = new Fl_Button(380, 240, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco27);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(350, 240, 30, 25, gettext("27"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco28 = new Fl_Button(555, 240, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco28);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(525, 240, 30, 25, gettext("28"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco29 = new Fl_Button(30, 270, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco29);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(0, 270, 30, 25, gettext("29"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco30 = new Fl_Button(205, 270, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco30);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(175, 270, 30, 25, gettext("30"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco31 = new Fl_Button(380, 270, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco31);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(350, 270, 30, 25, gettext("31"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Button* o = Banco32 = new Fl_Button(555, 270, 145, 25);
      o->tooltip(gettext("Right Click Get -  Left Click Put"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)6);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Banco32);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(525, 270, 30, 25, gettext("32"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    }
    o->end();
  }
  { Fl_Double_Window* o = RitEdit = new Fl_Double_Window(615, 175);
    w = o;
    o->callback((Fl_Callback*)cb_RitEdit, (void*)(this));
    { Fl_Input* o = RtName = new Fl_Input(60, 20, 115, 25, gettext("Name"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->callback((Fl_Callback*)cb_RtName);
    }
    { Fl_Input* o = RtFile = new Fl_Input(215, 20, 215, 25, gettext("File"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->callback((Fl_Callback*)cb_RtFile);
    }
    { Fl_Value_Input* o = RtBars = new Fl_Value_Input(480, 20, 20, 25, gettext("Bars"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->minimum(1);
      o->maximum(4);
      o->step(1);
      o->value(1);
      o->callback((Fl_Callback*)cb_RtBars);
    }
    { Fl_Value_Input* o = RtDen = new Fl_Value_Input(545, 20, 20, 25, gettext("Nom."));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->minimum(2);
      o->maximum(4);
      o->step(1);
      o->value(4);
      o->callback((Fl_Callback*)cb_RtDen);
    }
    { Fl_Group* o = B1G1 = new Fl_Group(40, 115, 140, 60);
      { Fl_Value_Input* o = lb1 = new Fl_Value_Input(50, 120, 25, 20);
        o->maximum(12);
        o->step(1);
        o->callback((Fl_Callback*)cb_lb1);
      }
      { Fl_Value_Input* o = lb2 = new Fl_Value_Input(80, 120, 25, 20);
        o->maximum(12);
        o->step(1);
        o->callback((Fl_Callback*)cb_lb2);
      }
      { Fl_Value_Input* o = lb3 = new Fl_Value_Input(110, 120, 25, 20);
        o->maximum(12);
        o->step(1);
        o->callback((Fl_Callback*)cb_lb3);
      }
      { Fl_Value_Input* o = lb4 = new Fl_Value_Input(140, 120, 25, 20);
        o->maximum(12);
        o->step(1);
        o->callback((Fl_Callback*)cb_lb4);
      }
      { Fl_Value_Input* o = lbv1 = new Fl_Value_Input(50, 145, 25, 20);
        o->maximum(88);
        o->step(1);
        o->callback((Fl_Callback*)cb_lbv1);
      }
      { Fl_Value_Input* o = lbv2 = new Fl_Value_Input(80, 145, 25, 20);
        o->maximum(99);
        o->step(1);
        o->callback((Fl_Callback*)cb_lbv2);
      }
      { Fl_Value_Input* o = lbv3 = new Fl_Value_Input(110, 145, 25, 20);
        o->maximum(99);
        o->step(1);
        o->callback((Fl_Callback*)cb_lbv3);
      }
      { Fl_Value_Input* o = lbv4 = new Fl_Value_Input(140, 145, 25, 20);
        o->maximum(99);
        o->step(1);
        o->callback((Fl_Callback*)cb_lbv4);
      }
      o->end();
    }
    { Fl_Group* o = B1G2 = new Fl_Group(180, 115, 140, 60);
      { Fl_Value_Input* o = lb5 = new Fl_Value_Input(190, 120, 25, 20);
        o->maximum(12);
        o->step(1);
        o->callback((Fl_Callback*)cb_lb5);
      }
      { Fl_Value_Input* o = lb6 = new Fl_Value_Input(220, 120, 25, 20);
        o->maximum(12);
        o->step(1);
        o->callback((Fl_Callback*)cb_lb6);
      }
      { Fl_Value_Input* o = lb7 = new Fl_Value_Input(250, 120, 25, 20);
        o->maximum(12);
        o->step(1);
        o->callback((Fl_Callback*)cb_lb7);
      }
      { Fl_Value_Input* o = lb8 = new Fl_Value_Input(280, 120, 25, 20);
        o->maximum(12);
        o->step(1);
        o->callback((Fl_Callback*)cb_lb8);
      }
      { Fl_Value_Input* o = lbv5 = new Fl_Value_Input(190, 145, 25, 20);
        o->maximum(99);
        o->step(1);
        o->callback((Fl_Callback*)cb_lbv5);
      }
      { Fl_Value_Input* o = lbv6 = new Fl_Value_Input(220, 145, 25, 20);
        o->maximum(99);
        o->step(1);
        o->callback((Fl_Callback*)cb_lbv6);
      }
      { Fl_Value_Input* o = lbv7 = new Fl_Value_Input(250, 145, 25, 20);
        o->maximum(99);
        o->step(1);
        o->callback((Fl_Callback*)cb_lbv7);
      }
      { Fl_Value_Input* o = lbv8 = new Fl_Value_Input(280, 145, 25, 20);
        o->maximum(99);
        o->step(1);
        o->callback((Fl_Callback*)cb_lbv8);
      }
      o->end();
    }
    { Fl_Group* o = B1G3 = new Fl_Group(325, 115, 140, 60);
      { Fl_Value_Input* o = lb9 = new Fl_Value_Input(335, 120, 25, 20);
        o->maximum(12);
        o->step(1);
        o->callback((Fl_Callback*)cb_lb9);
      }
      { Fl_Value_Input* o = lb10 = new Fl_Value_Input(365, 120, 25, 20);
        o->maximum(12);
        o->step(1);
        o->callback((Fl_Callback*)cb_lb10);
      }
      { Fl_Value_Input* o = lb11 = new Fl_Value_Input(395, 120, 25, 20);
        o->maximum(12);
        o->step(1);
        o->callback((Fl_Callback*)cb_lb11);
      }
      { Fl_Value_Input* o = lb12 = new Fl_Value_Input(425, 120, 25, 20);
        o->maximum(12);
        o->step(1);
        o->callback((Fl_Callback*)cb_lb12);
      }
      { Fl_Value_Input* o = lbv9 = new Fl_Value_Input(335, 145, 25, 20);
        o->maximum(99);
        o->step(1);
        o->callback((Fl_Callback*)cb_lbv9);
      }
      { Fl_Value_Input* o = lbv10 = new Fl_Value_Input(365, 145, 25, 20);
        o->maximum(99);
        o->step(1);
        o->callback((Fl_Callback*)cb_lbv10);
      }
      { Fl_Value_Input* o = lbv11 = new Fl_Value_Input(395, 145, 25, 20);
        o->maximum(99);
        o->step(1);
        o->callback((Fl_Callback*)cb_lbv11);
      }
      { Fl_Value_Input* o = lbv12 = new Fl_Value_Input(425, 145, 25, 20);
        o->maximum(99);
        o->step(1);
        o->callback((Fl_Callback*)cb_lbv12);
      }
      o->end();
    }
    { Fl_Group* o = B1G4 = new Fl_Group(470, 115, 140, 60);
      { Fl_Value_Input* o = lb13 = new Fl_Value_Input(480, 120, 25, 20);
        o->maximum(12);
        o->step(1);
        o->callback((Fl_Callback*)cb_lb13);
      }
      { Fl_Value_Input* o = lb14 = new Fl_Value_Input(510, 120, 25, 20);
        o->maximum(12);
        o->step(1);
        o->callback((Fl_Callback*)cb_lb14);
      }
      { Fl_Value_Input* o = lb15 = new Fl_Value_Input(540, 120, 25, 20);
        o->maximum(12);
        o->step(1);
        o->callback((Fl_Callback*)cb_lb15);
      }
      { Fl_Value_Input* o = lb16 = new Fl_Value_Input(570, 120, 25, 20);
        o->maximum(12);
        o->step(1);
        o->callback((Fl_Callback*)cb_lb16);
      }
      { Fl_Value_Input* o = lbv13 = new Fl_Value_Input(480, 145, 25, 20);
        o->maximum(99);
        o->step(1);
        o->callback((Fl_Callback*)cb_lbv13);
      }
      { Fl_Value_Input* o = lbv14 = new Fl_Value_Input(510, 145, 25, 20);
        o->maximum(99);
        o->step(1);
        o->callback((Fl_Callback*)cb_lbv14);
      }
      { Fl_Value_Input* o = lbv15 = new Fl_Value_Input(540, 145, 25, 20);
        o->maximum(99);
        o->step(1);
        o->callback((Fl_Callback*)cb_lbv15);
      }
      { Fl_Value_Input* o = lbv16 = new Fl_Value_Input(570, 145, 25, 20);
        o->maximum(99);
        o->step(1);
        o->callback((Fl_Callback*)cb_lbv16);
      }
      o->end();
    }
    { Fl_Counter* o = SBar = new Fl_Counter(45, 70, 65, 25, gettext("Bar "));
      o->type(1);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->minimum(1);
      o->maximum(4);
      o->step(1);
      o->value(1);
      o->callback((Fl_Callback*)cb_SBar);
      o->align(FL_ALIGN_LEFT);
      o->value(hor->pattern_bars);
    }
    { Fl_Button* o = CloRit = new Fl_Button(155, 70, 80, 25, gettext("Ok"));
      o->shortcut(0xff0d);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->callback((Fl_Callback*)cb_CloRit);
    }
    { Fl_Box* o = new Fl_Box(5, 120, 40, 25, gettext("Note"));
      o->labeltype(FL_ENGRAVED_LABEL);
    }
    { Fl_Box* o = new Fl_Box(5, 140, 40, 25, gettext("Vol."));
      o->labeltype(FL_ENGRAVED_LABEL);
    }
    { Fl_Box* o = new Fl_Box(390, 50, 215, 65);
      o->box(FL_DOWN_BOX);
    }
    { Fl_Box* o = new Fl_Box(395, 50, 45, 25, gettext("1=1   "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(395, 70, 45, 25, gettext("2=2m "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(395, 90, 45, 25, gettext("3=2M  "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(445, 50, 45, 25, gettext("4=3m "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(445, 70, 45, 25, gettext("5=3M "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(445, 90, 45, 25, gettext("6=4J  "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(500, 50, 45, 25, gettext("7=4#   "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(500, 70, 45, 25, gettext("8=5J "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(500, 90, 45, 25, gettext("9=6m"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(550, 50, 45, 25, gettext("10=6M"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(550, 70, 45, 25, gettext("11=7m "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(550, 90, 45, 25, gettext("12=7M   "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(325, 65, 50, 25, gettext("Notes:"));
      o->labeltype(FL_ENGRAVED_LABEL);
    }
    new Fl_Button(235, 70, 80, 25);
    new Fl_Button(315, 70, 80, 25);
    o->end();
  }
  return w;
}

void HORGAN::metelo() {
  meteprog();

switch (hor->Salida)
{
 case 1:
        DMIN2->label("OSS");
        break;
 case 2:
        DMIN2->label("Alsa");
        break;
 case 3:
        DMIN2->label("Jack");
        break;
}


Rit1->value(1);
Selected_Rhythm = 1;
GetRit(Selected_Rhythm);
SetBassType(0);
Bass1->value(1);
}

void HORGAN::GetCombi(int i) {
  int k;
for (k=1; k<=10; k++)
{
hor->Banco[i].Operator[k].volumen=hor->Operator[k].volumen;
hor->Banco[i].Operator[k].harmonic_fine=hor->Operator[k].harmonic_fine;
hor->Banco[i].Operator[k].harmonic=hor->Operator[k].harmonic;
hor->Banco[i].Operator[k].marimba=hor->Operator[k].marimba;
}


hor->Banco[i].E_Delay_On=hor->E_Delay_On;
hor->Banco[i].Delay_Delay=hor->Delay_Delay;
hor->Banco[i].Delay_Volume=hor->Delay_Volume;
hor->Banco[i].Pitch_LFO_Speed=hor->Pitch_LFO_Speed;
hor->Banco[i].Pitch_LFO_Delay=hor->Pitch_LFO_Delay;
hor->Banco[i].Rotary_LFO_Speed=hor->Rotary_LFO_Speed;
hor->Banco[i].LFOpitch=hor->LFOpitch;
hor->Banco[i].E_Rotary_On=hor->E_Rotary_On;
hor->Banco[i].modulation=hor->modulation;
hor->Banco[i].transpose=hor->transpose;
hor->Banco[i].Organ_Master_Volume=hor->Organ_Master_Volume;

for (k=0; k<=24; k++) hor->Banco[i].Name[k]=hor->Name[k];
hor->Banco[i].attack=hor->attack;
hor->Banco[i].detune=hor->detune;
hor->Banco[i].E_Reverb_On=hor->E_Reverb_On;
hor->Banco[i].split=hor->split;
hor->Banco[i].Reverb_Preset =hor->Reverb_Preset;
hor->Banco[i].E_Chorus_On=hor->E_Chorus_On;
hor->Banco[i].Chorus_LFO_Amplitude=hor->Chorus_LFO_Amplitude;
hor->Banco[i].Chorus_Delay=hor->Chorus_Delay;
hor->Banco[i].Chorus_LFO_Speed=hor->Chorus_LFO_Speed;
hor->Banco[i].Chorus_Volume=hor->Chorus_Volume;
}

void HORGAN::PutCombi(int i) {
  int k;
hor->cpreset= i;

for (k=1; k<=10; k++)
{
hor->Operator[k].volumen =hor->Banco[i].Operator[k].volumen;
hor->Operator[k].harmonic_fine =hor->Banco[i].Operator[k].harmonic_fine;
hor->Operator[k].harmonic =hor->Banco[i].Operator[k].harmonic;
hor->Operator[k].marimba=hor->Banco[i].Operator[k].marimba;
}



hor->E_Delay_On = hor->Banco[i].E_Delay_On;
hor->Delay_Volume = hor->Banco[i].Delay_Volume;
hor->Delay_Delay = hor->Banco[i].Delay_Delay;
hor->Pitch_LFO_Speed = hor->Banco[i].Pitch_LFO_Speed;
hor->Pitch_LFO_Delay = hor->Banco[i].Pitch_LFO_Delay;
hor->Rotary_LFO_Speed = hor->Banco[i].Rotary_LFO_Speed;
hor->LFOpitch = hor->Banco[i].LFOpitch;
hor->E_Rotary_On = hor->Banco[i].E_Rotary_On;
hor->modulation = hor->Banco[i].modulation;
hor->transpose = hor->Banco[i].transpose;
hor->Organ_Master_Volume = hor->Banco[i].Organ_Master_Volume;
bzero(hor->Name, sizeof(hor->Name));
for (k=0; k<=24; k++) hor->Name[k]=hor->Banco[i].Name[k];
hor->c_name = hor->Name;
hor->E_Reverb_On = hor->Banco[i].E_Reverb_On;
hor->attack = hor->Banco[i].attack;
hor->detune = hor->Banco[i].detune;
hor->split=hor->Banco[i].split;
hor->Reverb_Preset=hor->Banco[i].Reverb_Preset;
hor->E_Chorus_On=hor->Banco[i].E_Chorus_On;
hor->Chorus_LFO_Amplitude=hor->Banco[i].Chorus_LFO_Amplitude;
hor->Chorus_Delay=hor->Banco[i].Chorus_Delay;
hor->Chorus_LFO_Speed=hor->Banco[i].Chorus_LFO_Speed;
hor->Chorus_Volume=hor->Banco[i].Chorus_Volume;

hor->Prim[1] = hor->Banco[i];
meteprog();
Actu();
sprintf(hor->temporal, "%02d",i);
DispNumber->label(hor->temporal);
CPrograma->value(i);
}

void HORGAN::MiraClientes() {
  snd_seq_client_info_t *cinfo;
        snd_seq_port_info_t *pinfo;
        int  client;
        int  err;
        int i;
        snd_seq_t *handle;
        int count = 1;
        int count1 = 1;
        char temp[80];
        char linea[256];
        BMidiIn->clear();
        BMidiIn->add("Not Connected");
        err = snd_seq_open(&handle, "hw", SND_SEQ_OPEN_DUPLEX, 0);
        if (err < 0) printf("Could not open sequencer");

        snd_seq_client_info_alloca(&cinfo);
        snd_seq_client_info_set_client(cinfo, -1);

        while (snd_seq_query_next_client(handle, cinfo) >= 0) {
                client = snd_seq_client_info_get_client(cinfo);
                snd_seq_port_info_alloca(&pinfo);
                snd_seq_port_info_set_client(pinfo, client);

                snd_seq_port_info_set_port(pinfo, -1);
                while (snd_seq_query_next_port(handle, pinfo) >= 0) {
                        unsigned int  cap;

                        cap = (SND_SEQ_PORT_CAP_SUBS_WRITE|SND_SEQ_PORT_CAP_WRITE);
                        if ((snd_seq_port_info_get_capability(pinfo) & cap) == cap) {

                           hor->CPOMidiS[count].Client = snd_seq_port_info_get_client(pinfo);
                           hor->CPOMidiS[count].Port = snd_seq_port_info_get_port(pinfo);
                           hor->CPOMidiS[count].CName = snd_seq_client_info_get_name(cinfo);
      for (i=0; i<=(int)(strlen(hor->CPOMidiS[count].CName));i++) hor->CPOMidiS[count].Name[i]=hor->CPOMidiS[count].CName[i];
                           hor->CPOMidiS[count].CInfo = snd_seq_port_info_get_name(pinfo);
      for (i=0; i<=(int)(strlen(hor->CPOMidiS[count].CInfo));i++) hor->CPOMidiS[count].Info[i]=hor->CPOMidiS[count].CInfo[i];
                           
                    count++;
                                             }


                        cap = (SND_SEQ_PORT_CAP_SUBS_READ|SND_SEQ_PORT_CAP_READ);
                        if ((snd_seq_port_info_get_capability(pinfo) & cap) == cap) {

                           hor->CPIMidiS[count1].Client = snd_seq_port_info_get_client(pinfo);
                           hor->CPIMidiS[count1].Port = snd_seq_port_info_get_port(pinfo);
                           hor->CPIMidiS[count1].CName = snd_seq_client_info_get_name(cinfo);
     for (i=0; i<=(int)(strlen(hor->CPIMidiS[count1].CName));i++) hor->CPIMidiS[count1].Name[i]=hor->CPIMidiS[count1].CName[i];
                           hor->CPIMidiS[count1].CInfo = snd_seq_port_info_get_name(pinfo);
     for (i=0; i<=(int)(strlen(hor->CPIMidiS[count1].CInfo));i++) hor->CPIMidiS[count1].Info[i]=hor->CPIMidiS[count1].CInfo[i];
                           bzero(linea,sizeof(linea));
                           sprintf(linea,"%s",hor->CPIMidiS[count1].CInfo);
                           bzero(temp,sizeof(temp));
                           sscanf(linea,"%s",temp);
                           if (strcmp(temp,"Horgand")!=0)
                           

                                BMidiIn->add(linea);
                               

                           count1++;

                                       }

                }
      }
}

void HORGAN::MiraConfig() {
  int i = 1;

while (BMidiIn->text(i) != NULL)
{
if (strcmp(BMidiIn->text(i),hor->MidiInPuerto[1].SetMidiIn)==0 ) BMidiIn->select(i,1);
i++; 
}

switch (hor->Salida)
{
      case 1: 
             OSS->setonly();
             break;
      case 2: 
             Alsa->setonly();
             break;
      case 3:
             Jack->setonly();
             break;
      
}

BFiname->value(hor->BankFilename);
}

void HORGAN::GrabaSettings() {
  FILE *fn;
char *temp;
int i;
char nomfile[256];
sprintf(nomfile,"%s%s",getenv("HOME"),"/.Horgand");
fn = fopen(nomfile,"w");
i = BMidiIn->value();
temp = (char*) BMidiIn->text(i);
if (temp == NULL ) temp= strdup("Not Connected");
fputs(temp,fn);
fputs("\n",fn);
bzero(temp,sizeof(temp));
temp = strdup("OSS");
if (OSS->value() != 0) temp = strdup("OSS");
if (Alsa->value() != 0) temp = strdup("Alsa");
if (Jack->value() != 0) temp =strdup("Jack");
fputs(temp,fn);
fputs("\n",fn);
bzero(temp,sizeof(temp));
temp=hor->BankFilename;
fputs(temp,fn);
fputs("\n",fn);
fclose(fn);
}

void HORGAN::metebanco() {
  Banco1->label(hor->Banco[1].Name);
Banco2->label(hor->Banco[2].Name);
Banco3->label(hor->Banco[3].Name);
Banco4->label(hor->Banco[4].Name);
Banco5->label(hor->Banco[5].Name);
Banco6->label(hor->Banco[6].Name);
Banco7->label(hor->Banco[7].Name);
Banco8->label(hor->Banco[8].Name);
Banco9->label(hor->Banco[9].Name);
Banco10->label(hor->Banco[10].Name);
Banco11->label(hor->Banco[11].Name);
Banco12->label(hor->Banco[12].Name);
Banco13->label(hor->Banco[13].Name);
Banco14->label(hor->Banco[14].Name);
Banco15->label(hor->Banco[15].Name);
Banco16->label(hor->Banco[16].Name);
Banco17->label(hor->Banco[17].Name);
Banco18->label(hor->Banco[18].Name);
Banco19->label(hor->Banco[19].Name);
Banco20->label(hor->Banco[20].Name);
Banco21->label(hor->Banco[21].Name);
Banco22->label(hor->Banco[22].Name);
Banco23->label(hor->Banco[23].Name);
Banco24->label(hor->Banco[24].Name);
Banco25->label(hor->Banco[25].Name);
Banco26->label(hor->Banco[26].Name);
Banco27->label(hor->Banco[27].Name);
Banco28->label(hor->Banco[28].Name);
Banco29->label(hor->Banco[29].Name);
Banco30->label(hor->Banco[30].Name);
Banco31->label(hor->Banco[31].Name);
Banco32->label(hor->Banco[32].Name);
}

HORGAN::HORGAN(HOR *hor_) {
  Fl::visual(FL_DOUBLE|FL_INDEX);
Fl::visual(FL_RGB);
hor=hor_;
make_window();
HORwindow->position(1,1);
Fl::focus(PANICO);
MiraClientes();
Conecta();
metebanco();
metelo();
if(commandline == 0) PutCombi(1);
Actu();
hor->PutPrim();
meteritmos();
HORwindow->show();
Fl::add_timeout(1.0/100,tick);
}

void HORGAN::Conecta() {
  char  t1[40], t2[40];
const char *tt1, *tt2;
int client=0;
char linea[256];


        int queue = 0, convert_time = 0, convert_real = 0, exclusive = 0;
        snd_seq_port_subscribe_t *subs;
        snd_seq_addr_t sender, dest;







while ( waitforGUI == 0 ) usleep(1);

int k= 0,i=0;

for (k=1; k<=46; k++)
    {

    sprintf(linea,"Horgand IN");

if (!strcmp(hor->CPOMidiS[k].Info ,linea)) hor->MidiInPuerto[1].YOIN = hor->CPOMidiS[k].Client;
if (!strcmp(hor->CPIMidiS[k].Info ,hor->MidiInPuerto[1].SetMidiIn))
        {
        hor->MidiInPuerto[1].SettingsIN = hor->CPIMidiS[k].Client;
        hor->MidiInPuerto[1].Ports = hor->CPIMidiS[k].Port;
        }
    }






if (strcmp(hor->MidiInPuerto[1].SetMidiIn,"Not Connected") !=0 )
{

  sprintf(t1,"%d",hor->MidiInPuerto[1].YOIN); tt1 = t1;
  sprintf(t2,"%d",hor->MidiInPuerto[1].SettingsIN);tt2 = t2;

 if ((client = snd_seq_client_id(hor->MidiInPuerto[1].midi_in)) < 0) printf("can't get client id\n");
 if (snd_seq_parse_address(hor->MidiInPuerto[1].midi_in, &sender,tt2) < 0) printf("invalid sender address %s\n", (char*) hor->MidiInPuerto[1].SettingsIN);
 if (snd_seq_parse_address(hor->MidiInPuerto[1].midi_in, &dest,tt1) < 0) printf("invalid destination address %s\n", (char*) hor->MidiInPuerto[1].YOIN);
        dest.port = hor->MidiInPuerto[1].Ports;
        snd_seq_port_subscribe_alloca(&subs);
        snd_seq_port_subscribe_set_sender(subs, &sender);
        snd_seq_port_subscribe_set_dest(subs, &dest);
        snd_seq_port_subscribe_set_queue(subs, queue);
        snd_seq_port_subscribe_set_exclusive(subs, exclusive);
        snd_seq_port_subscribe_set_time_update(subs, convert_time);
        snd_seq_port_subscribe_set_time_real(subs, convert_real);

 if (snd_seq_get_port_subscription(hor->MidiInPuerto[1].midi_in, subs) == 0) printf("Connection is already subscribed\n");
 if (snd_seq_subscribe_port(hor->MidiInPuerto[1].midi_in, subs) < 0)
                                          {
                                          printf("Connection failed (%s)\n", snd_strerror(errno));
                                          DMIN1->label("Connection failed");
                                          }
                                           else
                                          {
                                           bzero(linea,sizeof(linea));
                                           sprintf(linea ,"%d %s",hor->MidiInPuerto[1].SettingsIN,hor->MidiInPuerto[1].SetMidiIn);
                                           for (i=0; i<=(int) strlen(linea);i++) hor->MidiInPuerto[1].pMIDIIN[i] = linea[i];

                                          }


}
else sprintf(hor->MidiInPuerto[1].pMIDIIN,"Not Connected");
}

void HORGAN::Undo() {
  hor->MUndo();
meteprog();
}

void HORGAN::Actu() {
  if ( (CL->value() != 0 ) || (CF->value() !=0 ) ) {
           fl_alert("In Compare mode changes are deprecated");
           return;
           }

hor->MActu();
}

void HORGAN::Redo() {
  hor->MRedo();
meteprog();
}

void HORGAN::GetPrim() {
  hor->MGetPrim();
meteprog();
}

void HORGAN::tick(void *v) {
  Fl::add_timeout(1.0/25,tick);
}

void HORGAN::ponreverb() {
  hor->reverbclean();
switch((int) hor->Reverb_Preset)
{
case 1:
hor->Reverb_Time = 1.7;
hor->Reverb_Volume = 0.45;
hor->Reverb_Diffussion = 0.14;

break;

case 2:
hor->Reverb_Time = 1.7;
hor->Reverb_Volume = 0.65;
hor->Reverb_Diffussion = 0.14;
break;

case 3:
hor->Reverb_Time = 2.4;
hor->Reverb_Volume = 0.45;
hor->Reverb_Diffussion = 0.16;
break;

case 4:
hor->Reverb_Time = 2.4;
hor->Reverb_Volume = 0.65;
hor->Reverb_Diffussion = 0.16;
break;

case 5:
hor->Reverb_Time = 3.2;
hor->Reverb_Volume = 0.45;
hor->Reverb_Diffussion = 0.16;
break;

case 6:
hor->Reverb_Time = 3.8;
hor->Reverb_Volume = 0.65;
hor->Reverb_Diffussion = 0.16;

case 7:
hor->Reverb_Time = 4.4;
hor->Reverb_Volume = 0.45;
hor->Reverb_Diffussion = 0.16;
break;

case 8:
hor->Reverb_Time = 4.4;
hor->Reverb_Volume = 0.65;
hor->Reverb_Diffussion = 0.16;
break;
}
}

void HORGAN::GetRit(int Selected_Rhythm) {
  int i;
int rula;

char temp[512];
if (prefix_trick == 1) sprintf(temp,"%s%s","/usr/share/horgand/",hor->Rt[Selected_Rhythm].Nfile);
if (prefix_trick == 2) sprintf(temp,"%s%s","/usr/local/share/horgand/",hor->Rt[Selected_Rhythm].Nfile);

char *tmp = temp;

rula = hor->Select_Rhythm(tmp);
if (rula != 0) 
{ 
RitOn->value(0);
StStRiton->value(0);
hor->Rhythm_On = 0;
return;
}
Tempo->activate();
hor->bars = hor->Rt[Selected_Rhythm].bars;
hor->quarter_note = hor->Rt[Selected_Rhythm].quarter_note;

for (i = 1; i<=(4 * hor->quarter_note * hor->bars); i++)
{
 hor->Line_Bass_Note[i] = hor->Rt[Selected_Rhythm].Line_Bass_Note[i];
 hor->Line_Bass_Velocity[i] =hor->Rt[Selected_Rhythm].Line_Bass_Velocity[i];
}

hor->frame_total_size = (int) (hor->tempo * hor->sfinfo.frames);
hor->fractional_position = hor->frame_total_size / (4 * hor->quarter_note * hor->bars);
Tempo->activate();
}

void HORGAN::meteritmos() {
  Rit1->label(hor->Rt[1].Nom);
Rit2->label(hor->Rt[2].Nom);
Rit3->label(hor->Rt[3].Nom);
Rit4->label(hor->Rt[4].Nom);
Rit5->label(hor->Rt[5].Nom);
Rit6->label(hor->Rt[6].Nom);
Rit7->label(hor->Rt[7].Nom);
Rit8->label(hor->Rt[8].Nom);
Rit9->label(hor->Rt[9].Nom);
Rit10->label(hor->Rt[10].Nom);
Rit11->label(hor->Rt[11].Nom);
Rit12->label(hor->Rt[12].Nom);
Rit13->label(hor->Rt[13].Nom);
Rit14->label(hor->Rt[14].Nom);
Rit15->label(hor->Rt[15].Nom);
Rit16->label(hor->Rt[16].Nom);
Rit17->label(hor->Rt[17].Nom);
Rit18->label(hor->Rt[18].Nom);
Rit19->label(hor->Rt[19].Nom);
Rit20->label(hor->Rt[20].Nom);
}

void HORGAN::calbtrans() {
  hor->bass_transpose = hor->transpose;
if ( hor->bass_transpose > 12 ) hor->bass_transpose = hor->bass_transpose  % 12;
if ( hor->bass_transpose < -12 ) hor->bass_transpose = hor->bass_transpose  % 12;
if ( hor->transpose % 12 == 0) hor->bass_transpose = 0;
}

void HORGAN::calbtune() {
  int i,k;
float btuneval =  ((float) MasterT->value() / 100.0);

for(i=0; i<=11; i++)
{
 if ( MasterT->value() > 0)

  {  k = i + 1;
     if (i == 11) k = 0; 
     hor->AB[i].bmt =  (hor->AB[k].tune - hor->AB[i].tune) * btuneval;

     if (i == 6) hor->AB[6].bmt = (2.980 - hor->AB[6].tune) * btuneval;

  }

 if (MasterT->value()== 0 ) hor->AB[i].bmt = 0;

if ( MasterT->value() < 0)

  {  k = i - 1;
     if (i == 0) k = 11; 
     hor->AB[i].bmt =  (hor->AB[i].tune - hor->AB[k].tune)  * btuneval;
      if (i == 7) hor->AB[7].bmt = (hor->AB[7].tune - 1.3980 ) * btuneval;

  }
 

}
}

void HORGAN::EditRit(int i) {
  hor->ae = i;
RtName->value(hor->Rt[i].Nom);
RtFile->value(hor->Rt[i].Nfile);
RtBars->value(hor->Rt[i].bars);
RtDen->value(hor->Rt[i].quarter_note);
QuitaPon();
hor->pattern_bars= 1;
meteval();
char temp[512];
sprintf(temp,"%s - Bass Line Editor",hor->Rt[i].Nom);
RitEdit->label(temp);
RitEdit->show();
Fl::focus(CloRit);
}

void HORGAN::QuitaPon() {
  switch(hor->Rt[hor->ae].quarter_note)
{
  case 2:
     B1G3->hide();
     B1G4->hide();
     lb9->hide();
     lb10->hide();
     lb11->hide();
     lb12->hide();
     lb13->hide();
     lb14->hide();
     lb15->hide();
     lb16->hide();
     lbv9->hide();
     lbv10->hide();
     lbv11->hide();
     lbv12->hide();
     lbv13->hide();
     lbv14->hide();
     lbv15->hide();
     lbv16->hide();
    break;

  case 3:
     B1G3->show();
     B1G4->hide();
     lb9->show();
     lb10->show();
     lb11->show();
     lb12->show();
     lb13->hide();
     lb14->hide();
     lb15->hide();
     lb16->hide();
     lbv9->show();
     lbv10->show();
     lbv11->show();
     lbv12->show();
     lbv13->hide();
     lbv14->hide();
     lbv15->hide();
     lbv16->hide();
     break;
  case 4:
     B1G3->show();
     B1G4->show();
     lb9->show();
     lb10->show();
     lb11->show();
     lb12->show();
     lb13->show();
     lb14->show();
     lb15->show();
     lb16->show();
     lbv9->show();
     lbv10->show();
     lbv11->show();
     lbv12->show();
     lbv13->show();
     lbv14->show();
     lbv15->show();
     lbv16->show();
     break;
}
}

void HORGAN::meteval() {
  int i = (hor->pattern_bars- 1) * (hor->Rt[hor->ae].quarter_note * 4);


lb1->value(hor->Rt[hor->ae].Line_Bass_Note[i+1]);
lb2->value(hor->Rt[hor->ae].Line_Bass_Note[i+2]);
lb3->value(hor->Rt[hor->ae].Line_Bass_Note[i+3]);
lb4->value(hor->Rt[hor->ae].Line_Bass_Note[i+4]);
lb5->value(hor->Rt[hor->ae].Line_Bass_Note[i+5]);
lb6->value(hor->Rt[hor->ae].Line_Bass_Note[i+6]);
lb7->value(hor->Rt[hor->ae].Line_Bass_Note[i+7]);
lb8->value(hor->Rt[hor->ae].Line_Bass_Note[i+8]);
lbv1->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+1]);
lbv2->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+2]);
lbv3->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+3]);
lbv4->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+4]);
lbv5->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+5]);
lbv6->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+6]);
lbv7->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+7]);
lbv8->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+8]);

if ( hor->Rt[hor->ae].quarter_note > 2)
{

lb9->value(hor->Rt[hor->ae].Line_Bass_Note[i+9]);
lb10->value(hor->Rt[hor->ae].Line_Bass_Note[i+10]);
lb11->value(hor->Rt[hor->ae].Line_Bass_Note[i+11]);
lb12->value(hor->Rt[hor->ae].Line_Bass_Note[i+12]);
lbv9->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+9]);
lbv10->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+10]);
lbv11->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+11]);
lbv12->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+12]);

}

if ( hor->Rt[hor->ae].quarter_note > 3)

{

lb13->value(hor->Rt[hor->ae].Line_Bass_Note[i+13]);
lb14->value(hor->Rt[hor->ae].Line_Bass_Note[i+14]);
lb15->value(hor->Rt[hor->ae].Line_Bass_Note[i+15]);
lb16->value(hor->Rt[hor->ae].Line_Bass_Note[i+16]);
lbv13->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+13]);
lbv14->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+14]);
lbv15->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+15]);
lbv16->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+16]);
}

SBar->value(hor->pattern_bars);
}

void HORGAN::ApagaTodo() {
  Rit1->value(0);
Rit2->value(0);
Rit3->value(0);
Rit4->value(0);
Rit5->value(0);
Rit6->value(0);
Rit7->value(0);
Rit8->value(0);
Rit9->value(0);
Rit10->value(0);
Rit11->value(0);
Rit12->value(0);
Rit13->value(0);
Rit14->value(0);
Rit15->value(0);
Rit16->value(0);
Rit17->value(0);
Rit18->value(0);
Rit19->value(0);
Rit20->value(0);
}

void HORGAN::meteprog() {
  OMaster->value(hor->Organ_Master_Volume * 100.0);


V1->value(hor->Operator[1].volumen * 100);
V2->value(hor->Operator[2].volumen * 100);
V3->value(hor->Operator[3].volumen * 100);
V4->value(hor->Operator[4].volumen * 100);
V5->value(hor->Operator[5].volumen * 100);
V6->value(hor->Operator[6].volumen * 100);
V7->value(hor->Operator[7].volumen * 100);
V8->value(hor->Operator[8].volumen * 100);
V9->value(hor->Operator[9].volumen * 100);
V10->value(hor->Operator[10].volumen * 100);


H1->value(hor->Operator[1].harmonic);
H2->value(hor->Operator[2].harmonic);
H3->value(hor->Operator[3].harmonic);
H4->value(hor->Operator[4].harmonic);
H5->value(hor->Operator[5].harmonic);
H6->value(hor->Operator[6].harmonic);
H7->value(hor->Operator[7].harmonic);
H8->value(hor->Operator[8].harmonic);
H9->value(hor->Operator[9].harmonic);
H10->value(hor->Operator[10].harmonic);


char *t;

t = (char *) malloc (20 * sizeof (char) * 12);

NV1->value(hor->lasfreq[hor->Operator[1].harmonic]);
NV2->value(hor->lasfreq[hor->Operator[2].harmonic]);
NV3->value(hor->lasfreq[hor->Operator[3].harmonic]);
NV4->value(hor->lasfreq[hor->Operator[4].harmonic]);
NV5->value(hor->lasfreq[hor->Operator[5].harmonic]);
NV6->value(hor->lasfreq[hor->Operator[6].harmonic]);
NV7->value(hor->lasfreq[hor->Operator[7].harmonic]);
NV8->value(hor->lasfreq[hor->Operator[8].harmonic]);
NV9->value(hor->lasfreq[hor->Operator[9].harmonic]);
NV10->value(hor->lasfreq[hor->Operator[10].harmonic]);

Mar1->value(hor->Operator[7].marimba);
Mar2->value(hor->Operator[8].marimba);
Mar3->value(hor->Operator[9].marimba);
Mar4->value(hor->Operator[10].marimba);


Marimba->value(hor->attack * 100);
Detune->value(hor->detune);
PLFOSpeed->value(hor->Pitch_LFO_Speed);
PLFODelay->value(hor->Pitch_LFO_Delay * 10);
LFOSpeed->value(hor->Rotary_LFO_Speed);
LFOPitch->value(hor->LFOpitch);
Rota->value(hor->E_Rotary_On);
MasterT->value(1 - hor->mastertune);
Transpose->value(hor->transpose);
calbtrans();
Nombre->value(hor->c_name);
CPrograma->value(hor->cpreset);
EchoVol->value(hor->Delay_Volume * 100);
EchoDelay->value(hor->Delay_Delay / 176400);
EchoOn->value(hor->E_Delay_On);
Rev->value((int)hor->E_Reverb_On);

if ((int)hor->E_Reverb_On == 1)
{

R1->activate();
R2->activate();
R3->activate();
R4->activate();
R5->activate();
R6->activate();
R7->activate();
R8->activate();
switch((int) hor->Reverb_Preset)
{
case 1:
R1->setonly();
break;
case 2:
R2->setonly();
break;
case 3:
R3->setonly();
break;
case 4:
R4->setonly();
break;
case 5:
R5->setonly();
break;
case 6:
R6->setonly();
break;
case 7:
R7->setonly();
break;
case 8:
R8->setonly();
break;
}
}
else
{
R1->value(0);
R2->value(0);
R3->value(0);
R4->value(0);
R5->value(0);
R6->value(0);
R7->value(0);
R8->value(0);
R1->deactivate();
R2->deactivate();
R3->deactivate();
R4->deactivate();
R5->deactivate();
R6->deactivate();
R7->deactivate();
R8->deactivate();
}
ponreverb();
Split->value(hor->split);
ChorusOn->value(hor->E_Chorus_On);
ELFOAmplitude->value(hor->Chorus_LFO_Amplitude);
POPO->value(hor->Chorus_Delay);
ELFOSpeed->value(hor->Chorus_LFO_Speed);
ChorVol->value(hor->Chorus_Volume * 100);

hor->delayclean();
hor->chorusclean();
hor->reverbclean();
}

void HORGAN::SetBassType(int type) {
  char temp[512];
const char *bassfiles[] = {"AcousticBass.wav", "FenderBass.wav", "FretlessBass.wav"};

if (prefix_trick == 1)
sprintf(temp ,"%s%s", "/usr/share/horgand/", bassfiles[type]);
if (prefix_trick == 2)
sprintf(temp, "%s%s", "/usr/local/share/horgand/", bassfiles[type]);

hor->Select_Bass(temp);
hor->frames_bass = (int) (hor->sfinfob.frames / 2.0);
}
