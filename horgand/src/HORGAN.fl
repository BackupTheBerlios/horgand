# data file for the Fltk User Interface Designer (fluid)
version 1.0104 
header_name {.h} 
code_name {.cxx}
decl {\#include <alsa/asoundlib.h>} {public
} 

decl {\#include <FL/Fl_File_Chooser.H>} {public
} 

decl {\#include <FL/Fl_Dial.H>} {public
} 

decl {\#include "Holrgan.h"} {public
} 

class Drawbar {: {public Fl_Slider}
} {
  Function {Drawbar(int x,int y, int w, int h, const char *label=0):Fl_Slider(x,y,w,h,label)} {} {}
  Function {handle(int event)} {open return_type int
  } {
    code {switch(event)
{

case FL_RELEASE:
{
draw();
vavi=1;
do_callback();
return 1;
}


case FL_DRAG: 
{
Fl_Slider::handle(FL_DRAG,x(),y(),w(),h());
draw();
do_callback();
return 1;
}

case FL_SHORTCUT:
return 0;

default:
return 1;
}} {}
  }
} 

class Rueda {: {public Fl_Dial}
} {
  Function {Rueda(int x,int y, int w, int h, const char *label=0):Fl_Dial(x,y,w,h,label)} {} {}
  Function {handle(int event)} {open return_type int
  } {
    code {switch(event)
{

case FL_RELEASE:
{
draw();
vavi=1;
do_callback();
return 1;
}


case FL_DRAG: 
{
Fl_Dial::handle(FL_DRAG,x(),y(),w(),h());
draw();
do_callback();
return 1;
}

case FL_SHORTCUT:
return 0;

default:
return 1;
}} {}
  }
} 

class HORGAN {} {
  Function {make_window()} {selected
  } {
    Fl_Window HORwindow {
      label {Horgand v1.04}
      callback {Pexitprogram=1;
o->hide();
exit(0);}
      xywh {29 91 690 620} type Double color 50 labelcolor 208 hide hotspot
    } {
      Fl_Box {} {
        xywh {460 415 230 205} box PLASTIC_UP_BOX color 0 labeltype ENGRAVED_LABEL labelsize 17 labelcolor 4 align 1
      }
      Fl_Box {} {
        xywh {0 310 310 310} box PLASTIC_UP_BOX color 0 labeltype ENGRAVED_LABEL labelcolor 0 align 5
      }
      Fl_Box {} {
        xywh {385 235 75 100} box PLASTIC_UP_BOX color 0 labeltype ENGRAVED_LABEL labelsize 17 labelcolor 4 align 1
      }
      Fl_Box {} {
        label Master
        xywh {385 335 75 285} box PLASTIC_UP_BOX color 0 labeltype ENGRAVED_LABEL labelsize 17 labelcolor 4 align 1
      }
      Fl_Box {} {
        xywh {0 95 105 215} box PLASTIC_UP_BOX color 0 labeltype ENGRAVED_LABEL labelsize 19 labelcolor 4 align 1
      }
      Fl_Box {} {
        xywh {-60 25 750 70} box PLASTIC_UP_BOX color 0 labeltype ENGRAVED_LABEL labelcolor 0 align 5
      }
      Fl_Box {} {
        xywh {310 310 75 310} box PLASTIC_UP_BOX color 0 labeltype ENGRAVED_LABEL labelcolor 0 align 5
      }
      Fl_Box {} {
        xywh {105 95 65 215} box PLASTIC_UP_BOX color 0 labeltype ENGRAVED_LABEL labelsize 19 labelcolor 4 align 1
      }
      Fl_Box {} {
        xywh {235 235 150 75} box PLASTIC_UP_BOX color 0 labeltype ENGRAVED_LABEL labelsize 17 labelcolor 4 align 1
      }
      Fl_Box {} {
        xywh {385 95 75 140} box PLASTIC_UP_BOX color 0 labeltype ENGRAVED_LABEL labelsize 17 labelcolor 4 align 1
      }
      Fl_Box {} {
        xywh {170 95 65 215} box PLASTIC_UP_BOX color 0 labeltype ENGRAVED_LABEL labelsize 19 labelcolor 4 align 1
      }
      Fl_Button PANICO {
        label {Panic!!}
        callback {hor->panico();}
        xywh {5 265 95 40} box PLASTIC_UP_BOX shortcut 0xff0d color 1 labeltype ENGRAVED_LABEL labelfont 1 labelsize 15 labelcolor 7
      }
      Fl_Menu_Bar MenuPrincipal {open
        xywh {0 0 1030 25} box THIN_UP_BOX
      } {
        submenu MFile {
          label {&File}
          callback {Fl::focus(PANICO);} open
          xywh {0 0 100 20}
        } {
          menuitem {} {
            label {&New...}
            callback {hor->New();
metelo();
Actu();
PutPrim();
sprintf(hor->temporal, "--"); 
DispNumber->label(hor->temporal);}
            xywh {0 0 100 20}
          }
          menuitem {} {
            label {&Load...}
            callback {char *filename;
Fl::focus(PANICO);
filename=fl_file_chooser("Load:","(*.hor)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".hor");
hor->loadfile(filename);
metelo();
Actu();
PutPrim();
sprintf(hor->temporal,"--");
DispNumber->label(hor->temporal);}
            xywh {0 0 100 20}
          }
          menuitem {} {
            label {&Save...}
            callback {char *filename;
\#define EXT ".hor"
filename=fl_file_chooser("Save:","(*"EXT")",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
\#undef EXT
hor->savefile(filename);
PutPrim();}
            xywh {0 0 100 20} divider
          }
          menuitem {} {
            label {Load Ryth...}
            callback {char *filename;
Fl::focus(PANICO);
filename=fl_file_chooser("Load:","(*.hrt)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".hrt");
hor->loadrhyt(filename);
meteritmos();}
            xywh {0 0 100 20}
          }
          menuitem {} {
            label {Save Rhyt...}
            callback {char *filename;
\#define EXT ".hrt"
filename=fl_file_chooser("Save:","(*"EXT")",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
\#undef EXT
hor->saverhyt(filename);}
            xywh {0 0 100 20} divider
          }
          menuitem {} {
            label {&About...}
            callback {aboutwindow->position(200,200);
aboutwindow->show();}
            xywh {0 0 100 20} divider
          }
          menuitem {} {
            label {E&xit}
            callback {Pexitprogram=1;
o->hide();
exit(0);}
            xywh {0 0 100 20}
          }
        }
        submenu MEdit {
          label {&Edit} open
          xywh {0 0 100 20}
        } {
          menuitem {} {
            label {&Undo}
            callback {Undo();}
            xywh {0 0 100 20} shortcut 0x4007a
          }
          menuitem {} {
            label {&Redo}
            callback {Redo();}
            xywh {0 0 100 20} shortcut 0x40072
          }
        }
        menuitem MBank {
          label {&Bank}
          callback {HORBank->position(1,1);
HORBank->show();
Fl::focus(BClose);}
          xywh {0 0 100 20} shortcut 0x80062
        }
        menuitem {} {
          label {&Settings}
          callback {MiraClientes();
MiraConfig();
Settingswindow->position(1,1);
Settingswindow->show();
Fl::focus(SClose);}
          xywh {0 0 100 20} shortcut 0x80073
        }
      }
      Fl_Box {} {
        xywh {180 245 46 46} box OVAL_FRAME
      }
      Fl_Box {} {
        xywh {240 139 46 46} box OVAL_FRAME
      }
      Fl_Box {} {
        xywh {255 585 47 27} box DOWN_FRAME color 0 selection_color 47
      }
      Fl_Box {} {
        xywh {115 244 46 46} box OVAL_FRAME
      }
      Fl_Box {} {
        xywh {5 584 47 27} box DOWN_FRAME color 0
      }
      Fl_Box {} {
        xywh {155 584 47 27} box DOWN_FRAME color 0
      }
      Fl_Box {} {
        xywh {180 169 46 31} box DOWN_FRAME
      }
      Fl_Box {} {
        xywh {5 319 46 246} box DOWN_FRAME color 0
      }
      Fl_Box {} {
        xywh {305 115 31 90} box DOWN_FRAME
      }
      Fl_Box {} {
        xywh {390 344 66 256} box DOWN_FRAME color 0
      }
      Fl_Box {} {
        xywh {180 99 46 46} box OVAL_FRAME
      }
      Fl_Box {} {
        xywh {105 584 47 27} box DOWN_FRAME color 0
      }
      Fl_Box {} {
        xywh {235 95 150 140} box PLASTIC_UP_BOX color 0 labeltype ENGRAVED_LABEL labelsize 19 labelcolor 4 align 1
      }
      Fl_Box {} {
        xywh {155 319 46 246} box DOWN_FRAME color 0
      }
      Fl_Box {} {
        xywh {105 319 46 246} box DOWN_FRAME color 0
      }
      Fl_Box {} {
        xywh {205 319 46 246} box DOWN_FRAME color 0
      }
      Fl_Box {} {
        xywh {55 584 47 27} box DOWN_FRAME color 0
      }
      Fl_Box {} {
        xywh {255 319 46 246} box DOWN_FRAME color 0
      }
      Fl_Box {} {
        xywh {55 319 46 246} box DOWN_FRAME color 0
      }
      Fl_Box {} {
        xywh {345 114 30 91} box DOWN_FRAME
      }
      Fl_Box {} {
        xywh {115 99 46 46} box OVAL_FRAME
      }
      Fl_Box {} {
        xywh {115 174 46 46} box OVAL_FRAME
      }
      Fl_Box {} {
        label Volume
        xywh {250 210 55 20} labeltype ENGRAVED_LABEL labelsize 10 labelcolor 208 align 16
      }
      Fl_Box {} {
        xywh {325 319 46 246} box DOWN_FRAME color 0
      }
      Fl_Box {} {
        xywh {180 204 46 31} box DOWN_FRAME
      }
      Fl_Box {} {
        label {Master Tune}
        xywh {385 240 75 20} labeltype ENGRAVED_LABEL labelsize 10 labelcolor 208 align 16
      }
      Fl_Box {} {
        label Delay
        xywh {315 240 50 15} labeltype ENGRAVED_LABEL labelsize 10 labelcolor 208 align 16
      }
      Fl_Box {} {
        xywh {205 584 47 27} box DOWN_FRAME color 0
      }
      Fl_Box {} {
        label Transpose
        xywh {385 275 75 15} labeltype ENGRAVED_LABEL labelsize 10 labelcolor 208 align 16
      }
      Fl_Box {} {
        xywh {240 139 46 46} box OVAL_FRAME
      }
      Fl_Box {} {
        xywh {240 99 46 31} box DOWN_FRAME
      }
      Fl_Box {} {
        label Volume
        xywh {315 275 50 15} labeltype ENGRAVED_LABEL labelsize 10 labelcolor 208 align 16
      }
      Fl_Box {} {
        xywh {520 555 46 45} box OVAL_FRAME
      }
      Fl_Box {} {
        xywh {240 244 46 31} box DOWN_FRAME
      }
      Fl_Light_Button CF {
        label {Compare First}
        callback {if (o->value() != 0 ) {
CL->deactivate();
MFile->deactivate();
MBank->deactivate();
MEdit->deactivate();
}
else {
CL->activate();
MFile->activate();
MBank->activate();
MEdit->activate();
}

if ( o->value() != 0 ) GetPrim(); else {
UndoCount++;
Undo();
}}
        xywh {5 225 95 40} box PLASTIC_UP_BOX color 0 labelfont 1 labelcolor 7 align 212 when 1
      }
      Fl_Light_Button CL {
        label {Compare Last}
        callback {if (o->value() != 0 ) {
CF->deactivate();
MFile->deactivate();
MBank->deactivate();
MEdit->deactivate();
}
else{

CF->activate();
MFile->activate();
MBank->activate();
MEdit->activate();
}

if ( o->value() != 0 ) Undo(); else Redo();}
        xywh {5 185 95 40} box PLASTIC_UP_BOX color 0 labelfont 1 labelcolor 7 align 212 when 1
      }
      Fl_Slider VUI1 {
        callback {o->value(vum);}
        xywh {660 35 25 50} type {Vert Fill} color 30 selection_color 207 minimum 127 maximum 0 step 1
        code0 {o->value(vum);}
      }
      Fl_Box {} {
        label {MIDI IN}
        xywh {590 60 70 20} labelsize 9 align 64
      }
      Fl_Box DMIN1 {
        callback {o->label(hor->MidiInPuerto[1].pMIDIIN);}
        xywh {475 35 180 25} box PLASTIC_DOWN_BOX color 40 labelsize 12 align 84
        code0 {o->label(hor->MidiInPuerto[1].pMIDIIN);}
      }
      Fl_Box DispNumber {
        label {--}
        xywh {15 100 75 80} box SHADOW_BOX color 0 selection_color 7 labeltype ENGRAVED_LABEL labelfont 14 labelsize 37 labelcolor 128 align 80
      }
      Fl_Counter Transpose {
        callback {hor->transpose = (int) o->value();
calbtrans();
Actu();}
        xywh {395 285 55 20} type Simple labeltype EMBOSSED_LABEL labelcolor 208 align 4 when 4 minimum -48 maximum 48 step 1
        code0 {o->value(hor->transpose);}
      }
      Fl_Slider Master {
        label Volume
        callback {hor->master = (float) o->value() / 100.0;
if (vavi == 1)
{ 
Actu();
vavi = 0;
}}
        xywh {390 345 65 255} type {Vert Knob} box PLASTIC_DOWN_BOX color 0 selection_color 1 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 4 minimum 100 maximum 0 step 1 value 70
        code0 {o->value(hor->master * 100.0);}
        class Drawbar
      }
      Fl_Input Nombre {
        label {  }
        callback {hor->nombre=(char*) o->value();
strncpy(hor->Name,hor->nombre,24);
Actu();}
        xywh {5 35 300 50} box PLASTIC_DOWN_BOX color 219 labeltype ENGRAVED_LABEL labelsize 21 labelcolor 208 align 68 textsize 29 textcolor 88
        code0 {o->value(hor->nombre);}
      }
      Fl_Counter MasterT {
        callback {hor->mastertune = 1 + (float) (o->value() / 1600);
calbtune();}
        xywh {395 255 55 20} type Simple labeltype EMBOSSED_LABEL labelcolor 208 align 4 minimum -99 maximum 99 step 1
        code0 {o->value(1 - hor->mastertune * 1000);}
      }
      Fl_Slider V1 {
        callback {hor->Operator[1].volumen = (float) o->value() / 100;
if (vavi == 1)
{ 
Actu();
vavi = 0;
}}
        xywh {5 320 45 245} type {Vert Knob} box PLASTIC_DOWN_BOX color 24 selection_color 63 labeltype ENGRAVED_LABEL labelcolor 4 align 66 maximum 99 step 1
        code0 {o->value(hor->Operator[1].volumen * 100);}
        class Drawbar
      }
      Fl_Slider V2 {
        callback {hor->Operator[2].volumen = (float) o->value() / 100;
if (vavi == 1)
{ 
Actu();
vavi = 0;
}}
        xywh {55 320 45 245} type {Vert Knob} box PLASTIC_DOWN_BOX color 24 selection_color 63 labeltype ENGRAVED_LABEL labelcolor 4 align 66 maximum 99 step 1
        code0 {o->value(hor->Operator[2].volumen * 100);}
        class Drawbar
      }
      Fl_Slider V3 {
        callback {hor->Operator[3].volumen = (float) o->value() / 100;
if (vavi == 1)
{ 
Actu();
vavi = 0;
}}
        xywh {105 320 45 245} type {Vert Knob} box PLASTIC_DOWN_BOX color 24 selection_color 63 labeltype ENGRAVED_LABEL labelcolor 4 align 66 maximum 99 step 1
        code0 {o->value(hor->Operator[3].volumen * 100);}
        class Drawbar
      }
      Fl_Slider Marimba {
        label {Perc.}
        callback {hor->attack = (float) o->value() / 100.0;
if (vavi == 1)
{ 
Actu();
vavi = 0;
}}
        xywh {325 320 45 245} type {Vert Knob} box PLASTIC_DOWN_BOX color 24 selection_color 5 labeltype ENGRAVED_LABEL labelcolor 4 minimum 4 maximum 0 step 0.01
        code0 {o->value(hor->attack * 100);}
        class Drawbar
      }
      Fl_Slider V4 {
        callback {hor->Operator[4].volumen = (float) o->value() / 100;
if (vavi == 1)
{ 
Actu();
vavi = 0;
}}
        xywh {155 320 45 245} type {Vert Knob} box PLASTIC_DOWN_BOX color 24 selection_color 63 labeltype ENGRAVED_LABEL labelcolor 4 align 66 maximum 99 step 1
        code0 {o->value(hor->Operator[4].volumen * 100);}
        class Drawbar
      }
      Fl_Slider V5 {
        callback {hor->Operator[5].volumen = (float) o->value() / 100;
if (vavi == 1)
{ 
Actu();
vavi = 0;
}}
        xywh {205 320 45 245} type {Vert Knob} box PLASTIC_DOWN_BOX color 24 selection_color 63 labeltype ENGRAVED_LABEL labelcolor 4 align 66 maximum 99 step 1
        code0 {o->value(hor->Operator[5].volumen * 100);}
        class Drawbar
      }
      Fl_Slider V6 {
        callback {hor->Operator[6].volumen = (float) o->value() / 100;
if (vavi == 1)
{ 
Actu();
vavi = 0;
}}
        xywh {255 320 45 245} type {Vert Knob} box PLASTIC_DOWN_BOX color 24 selection_color 63 labeltype ENGRAVED_LABEL labelcolor 4 align 66 maximum 99 step 1
        code0 {o->value(hor->Operator[6].volumen * 100);}
        class Drawbar
      }
      Fl_Dial Detune {
        label Detune
        callback {hor->detune = (float) o->value();
int i,k;
k = -1;
for (i=1; i<=6; i++)
{
if (k==1) k=-1; else k=1;
hor->Operator[i].harmonic_fine = (float) ((k * o->value()) / (i * 10000.0));
}
if (vavi == 1)
{ 
Actu();
vavi = 0;
}}
        xywh {180 245 45 45} box OSHADOW_BOX color 47 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 4 when 4 maximum 200 step 0.1
        code0 {o->value(hor->detune);}
        class Rueda
      }
      Fl_Dial LFOSpeed {
        label Speed
        callback {hor->LFOspeed = (float) o->value();
if (vavi == 1)
{ 
Actu();
vavi = 0;
}}
        xywh {180 100 45 45} box OSHADOW_BOX color 47 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 4 maximum 40 step 0.1
        code0 {o->value(hor->LFOspeed);}
        class Rueda
      }
      Fl_Dial LFOPitch {
        label Tremolo
        callback {hor->LFOpitch = (float) o->value();
if (vavi == 1)
{ 
Actu();
vavi = 0;
}}
        xywh {115 245 45 45} box OSHADOW_BOX color 47 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 4 maximum 20 step 0.01
        code0 {o->value(hor->LFOpitch);}
        class Rueda
      }
      Fl_Dial PLFOSpeed {
        label Speed
        callback {hor->PLFOspeed = (float) o->value();
if (vavi == 1)
{ 
Actu();
vavi = 0;
}}
        xywh {115 100 45 45} box OSHADOW_BOX color 47 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 4 maximum 20 step 0.01
        code0 {o->value(hor->PLFOspeed);}
        class Rueda
      }
      Fl_Dial PLFODelay {
        label Delay
        callback {hor->PLFOdelay = (float) o->value() / 10;
if (vavi == 1)
{ 
Actu();
vavi = 0;
}}
        xywh {115 175 45 45} box OSHADOW_BOX color 47 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 4 maximum 99 step 1
        code0 {o->value(hor->PLFOdelay * 10);}
        class Rueda
      }
      Fl_Counter EchoVol {
        callback {hor->echovol = (float) o->value() / 100;
Actu();}
        xywh {310 285 65 20} type Simple labelcolor 208 when 4 minimum 0 maximum 99 step 1
        code0 {o->value(hor->echovol * 100);}
      }
      Fl_Counter EchoDelay {
        callback {hor->echodelay = (float) o->value() * 176400;
Actu();}
        xywh {310 250 65 25} type Simple labelcolor 208 when 4 minimum 0 maximum 1 step 0.01
        code0 {o->value(hor->echodelay / 176400);}
      }
      Fl_Slider H1 {
        label 1
        callback {hor->Operator[1].harmonic = (int) o->value();

NV1->value(hor->lasfreq[(int) o->value()]);

Actu();}
        xywh {5 585 45 25} type {Horz Knob} box PLASTIC_DOWN_BOX color 0 selection_color 3 labeltype ENGRAVED_LABEL labelcolor 4 align 1 when 4 minimum 1 maximum 22 step 1
        code0 {o->value(hor->Operator[1].harmonic);}
      }
      Fl_Box {} {
        xywh {515 494 52 36} box DOWN_FRAME
      }
      Fl_Slider H2 {
        callback {hor->Operator[2].harmonic = (int) o->value();

NV2->value(hor->lasfreq[(int) o->value()]);
Actu();}
        xywh {55 585 45 25} type {Horz Knob} box PLASTIC_DOWN_BOX color 0 selection_color 3 labeltype ENGRAVED_LABEL labelcolor 4 when 4 minimum 1 maximum 22 step 1
        code0 {o->value(hor->Operator[2].harmonic);}
      }
      Fl_Slider H3 {
        callback {hor->Operator[3].harmonic = (int) o->value();


NV3->value(hor->lasfreq[(int) o->value()]);

Actu();}
        xywh {105 585 45 25} type {Horz Knob} box PLASTIC_DOWN_BOX color 0 selection_color 3 labeltype ENGRAVED_LABEL labelcolor 4 when 4 minimum 1 maximum 22 step 1
        code0 {o->value(hor->Operator[3].harmonic);}
      }
      Fl_Slider H4 {
        callback {hor->Operator[4].harmonic = (int) o->value();


NV4->value(hor->lasfreq[(int) o->value()]);

Actu();}
        xywh {155 585 45 25} type {Horz Knob} box PLASTIC_DOWN_BOX color 0 selection_color 3 labeltype ENGRAVED_LABEL labelcolor 4 when 4 minimum 1 maximum 22 step 1
        code0 {o->value(hor->Operator[4].harmonic);}
      }
      Fl_Slider H5 {
        callback {hor->Operator[5].harmonic = (int) o->value();


NV5->value(hor->lasfreq[(int) o->value()]);
Actu();}
        xywh {205 585 45 25} type {Horz Knob} box PLASTIC_DOWN_BOX color 0 selection_color 3 labeltype ENGRAVED_LABEL labelcolor 4 when 4 minimum 1 maximum 22 step 1
        code0 {o->value(hor->Operator[5].harmonic);}
      }
      Fl_Slider H6 {
        callback {hor->Operator[6].harmonic = (int) o->value();

NV6->value(hor->lasfreq[(int) o->value()]);
Actu();}
        xywh {255 585 45 25} type {Horz Knob} box PLASTIC_DOWN_BOX color 0 selection_color 3 labeltype ENGRAVED_LABEL labelcolor 4 when 4 minimum 1 maximum 22 step 1
        code0 {o->value(hor->Operator[6].harmonic);}
      }
      Fl_Button Rota {
        label Rotary
        callback {if (hor->rota == 0) hor->rota = 1; else hor->rota = 0;
Actu();}
        xywh {180 170 45 30} type Toggle box PLASTIC_UP_BOX color 31 selection_color 135 labeltype ENGRAVED_LABEL labelsize 10 align 64
        code0 {o->value(hor->rota);}
      }
      Fl_Dial ELFOSpeed {
        label Speed
        callback {hor->ELFOspeed = (float) o->value();
if (vavi == 1)
{ 
Actu();
vavi = 0;
}}
        xywh {240 140 45 45} box OSHADOW_BOX color 47 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 4 maximum 5 step 0.01
        code0 {o->value(hor->ELFOspeed);}
        class Rueda
      }
      Fl_Slider ELFOAmplitude {
        label D
        callback {hor->ELFOamplitude = (float) o->value();
if (vavi == 1)
{ 
Actu();
vavi = 0;
}}
        xywh {305 115 30 90} type {Vert Knob} box PLASTIC_DOWN_BOX color 24 selection_color 1 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 4 align 65 maximum 99 step 1
        code0 {o->value(hor->ELFOamplitude);}
        class Drawbar
      }
      Fl_Slider POPO {
        label S
        callback {hor->popo = (float) o->value();
if (vavi == 1)
{ 
Actu();
vavi = 0;
}}
        xywh {345 115 30 90} type {Vert Knob} box PLASTIC_DOWN_BOX color 24 selection_color 3 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 4 align 65 maximum 99 step 1
        code0 {o->value(hor->popo);}
        class Drawbar
      }
      Fl_Counter ChorVol {
        callback {hor->chorvol = (float) o->value() / 100;
Actu();}
        xywh {310 210 65 20} type Simple labelcolor 208 when 4 minimum 0 maximum 99 step 1
        code0 {o->value(hor->chorvol * 100);}
      }
      Fl_Button Split {
        label Split
        callback {if (hor->split == 0) hor->split = 1; else hor->split = 0;
Actu();}
        xywh {180 205 45 30} type Toggle box PLASTIC_UP_BOX color 31 selection_color 135 labeltype ENGRAVED_LABEL labelsize 10 align 64
        code0 {o->value(hor->split);}
      }
      Fl_Box DMIN2 {
        callback {switch (hor->Salida)
{
 case 1:
        o->label("OSS");
        break;
 case 2:
        o->label("Alsa");
        break;
 case 3:
        o->label("Jack");
        break;
}}
        xywh {475 60 85 25} box PLASTIC_DOWN_BOX color 40 labelsize 12 align 84
      }
      Fl_Button EchoOn {
        label Delay
        callback {hor->echoon =  o->value();
hor->procesaclean();
Actu();}
        xywh {240 245 45 30} type Toggle box PLASTIC_UP_BOX color 31 selection_color 135 labeltype ENGRAVED_LABEL labelsize 10 align 64
        code0 {o->value(hor->echoon);}
      }
      Fl_Button ChorusOn {
        label Chorus
        callback {hor->choron =  o->value();
hor->chorusclean();
Actu();}
        xywh {240 100 45 30} type Toggle box PLASTIC_UP_BOX color 31 selection_color 135 labeltype ENGRAVED_LABEL labelsize 10 align 64
        code0 {o->value(hor->choron);}
      }
      Fl_Group {} {
        xywh {385 135 75 100}
      } {
        Fl_Button R1 {
          label 1
          callback {hor->ganmod = 1;
ponreverb();
Actu();}
          xywh {395 135 25 20} type Radio box PLASTIC_UP_BOX color 31 selection_color 1 labeltype ENGRAVED_LABEL labelsize 9 deactivate
        }
        Fl_Button R2 {
          label 2
          callback {hor->ganmod = 2;
ponreverb();
Actu();}
          xywh {425 135 25 20} type Radio box PLASTIC_UP_BOX color 31 selection_color 1 labeltype ENGRAVED_LABEL labelsize 9 deactivate
        }
        Fl_Button R3 {
          label 3
          callback {hor->ganmod = 3;
ponreverb();
Actu();}
          xywh {395 160 25 20} type Radio box PLASTIC_UP_BOX color 31 selection_color 1 labeltype ENGRAVED_LABEL labelsize 9 deactivate
        }
        Fl_Button R4 {
          label 4
          callback {hor->ganmod = 4;
ponreverb();
Actu();}
          xywh {425 160 25 20} type Radio box PLASTIC_UP_BOX color 31 selection_color 1 labeltype ENGRAVED_LABEL labelsize 9 deactivate
        }
        Fl_Button R5 {
          label 5
          callback {hor->ganmod = 5;
ponreverb();
Actu();}
          xywh {395 185 25 20} type Radio box PLASTIC_UP_BOX color 31 selection_color 1 labeltype ENGRAVED_LABEL labelsize 9 deactivate
        }
        Fl_Button R6 {
          label 6
          callback {hor->ganmod = 6;
ponreverb();
Actu();}
          xywh {425 185 25 20} type Radio box PLASTIC_UP_BOX color 31 selection_color 1 labeltype ENGRAVED_LABEL labelsize 9 deactivate
        }
        Fl_Button R7 {
          label 7
          callback {hor->ganmod = 7;
ponreverb();
Actu();}
          xywh {395 210 25 20} type Radio box PLASTIC_UP_BOX color 31 selection_color 1 labeltype ENGRAVED_LABEL labelsize 9 deactivate
        }
        Fl_Button R8 {
          label 8
          callback {hor->ganmod = 8;
ponreverb();
Actu();}
          xywh {425 210 25 20} type Radio box PLASTIC_UP_BOX color 31 selection_color 1 labeltype ENGRAVED_LABEL labelsize 9 deactivate
        }
      }
      Fl_Box {} {
        xywh {390 99 46 31} box DOWN_FRAME align 64
      }
      Fl_Button Rev {
        label Reverb
        callback {if (o->value()== 0) 
{
hor->revon= 0;
R1->value(0);
R2->value(0);
R3->value(0);
R4->value(0);
R5->value(0);
R6->value(0);
R7->value(0);
R8->value(0);
R1->deactivate();
R2->deactivate();
R3->deactivate();
R4->deactivate();
R5->deactivate();
R6->deactivate();
R7->deactivate();
R8->deactivate();


}
else
{
hor->revon = 1;
R1->activate();
R2->activate();
R3->activate();
R4->activate();
R5->activate();
R6->activate();
R7->activate();
R8->activate();

if (hor->ganmod==0) hor->ganmod = 1;

switch((int) hor->ganmod)
{
case 1:
R1->setonly();
break;
case 2:
R2->setonly();
break;
case 3:
R3->setonly();
break;
case 4:
R4->setonly();
break;
case 5:
R5->setonly();
break;
case 6:
R6->setonly();
break;
case 7:
R7->setonly();
break;
case 8:
R8->setonly();
break;
}
}
hor->rclean();
Actu();}
        xywh {390 100 45 30} type Toggle box PLASTIC_UP_BOX color 31 selection_color 3 labeltype ENGRAVED_LABEL labelsize 10 align 64
        code0 {o->value((int) hor->revon);}
      }
      Fl_Slider RitVol {
        label Volume
        callback {hor->ritvol = o->value();}
        xywh {470 425 40 175} type {Vert Knob} box PLASTIC_DOWN_BOX color 24 selection_color 3 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 4 minimum 0.99 maximum 0 step 0.01 value 0.5
        code0 {o->value(hor->ritvol);}
      }
      Fl_Dial Tempo {
        label Tempo
        callback {hor->tempo = (float) o->value();
hor->frametot = (int) (hor->tempo * hor->sfinfo.frames);
hor->fracpos = hor->frametot /(4 * hor->blackn * hor->bars);}
        xywh {520 555 45 45} box OSHADOW_BOX color 47 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 4 minimum 1.7 maximum 2.7 step 0.01 value 2 deactivate
        code0 {o->value(hor->tempo);}
      }
      Fl_Slider VUI2 {
        callback {o->value(tum);}
        xywh {515 540 15 15} type {Vert Fill} color 30 selection_color 1 minimum 127 maximum 0 step 1
        code0 {o->value(tum);}
      }
      Fl_Button RitOn {
        label {Stop/Cont}
        callback {StStRiton->value(o->value());
tum = 0;
hor->riton =  o->value();}
        xywh {515 495 50 35} type Toggle box PLASTIC_UP_BOX color 31 selection_color 135 labeltype ENGRAVED_LABEL labelsize 8 align 64
        code0 {o->value(hor->riton);}
      }
      Fl_Box {} {
        xywh {515 454 51 36} box DOWN_FRAME
      }
      Fl_Button StStRiton {
        label {Start/Stop}
        callback {if (Rit == 0)
{
 o->value(0);
 VUI2->value(0);

}
if (Rit != 0)
{
// int readcounts = sf_seek (hor->infile, 0, SEEK_SET);
RitOn->value(o->value());
tum = 0;
hor->riton =  o->value();
}}
        xywh {515 455 50 35} type Toggle box PLASTIC_UP_BOX color 31 selection_color 135 labeltype ENGRAVED_LABEL labelsize 8 align 64
        code0 {o->value(hor->riton);}
      }
      Fl_Box {} {
        xywh {460 95 230 320} box PLASTIC_UP_BOX color 0 labeltype ENGRAVED_LABEL labelsize 17 labelcolor 4 align 1
      }
      Fl_Group {} {open
        xywh {460 95 230 320}
      } {
        Fl_Button Rit4 {
          callback {ApagaTodo();
o->value(1);
Rit = 4;
if (Fl::event_button()==3)
{
GetRit(Rit);
EditRit(Rit);
}
if (Fl::event_button()==1) GetRit(Rit);}
          tooltip {Right Click Edit -  Left Click Select} xywh {470 195 95 25} type Toggle box PLASTIC_UP_BOX color 31 selection_color 63 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 0 align 64
        }
        Fl_Button Rit1 {
          callback {ApagaTodo();
o->value(1);
Rit = 1;
if (Fl::event_button()==3) 
{
GetRit(Rit);
EditRit(Rit);
}
if (Fl::event_button()==1) GetRit(Rit);}
          tooltip {Right Click Edit -  Left Click Select} xywh {470 105 95 25} type Toggle box PLASTIC_UP_BOX color 31 selection_color 63 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 0 align 64
        }
        Fl_Button Rit2 {
          callback {ApagaTodo();
o->value(1);
Rit = 2;
if (Fl::event_button()==3)
{
 GetRit(Rit);
 EditRit(Rit);
}
if (Fl::event_button()==1) GetRit(Rit);}
          tooltip {Right Click Edit -  Left Click Select} xywh {470 135 95 25} type Toggle box PLASTIC_UP_BOX color 31 selection_color 63 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 0 align 64
        }
        Fl_Button Rit3 {
          callback {ApagaTodo();
o->value(1);
Rit = 3;
if (Fl::event_button()==3)
{
 GetRit(Rit);
 EditRit(Rit);
}
if (Fl::event_button()==1) GetRit(Rit);}
          tooltip {Right Click Edit -  Left Click Select} xywh {470 165 95 25} type Toggle box PLASTIC_UP_BOX color 31 selection_color 63 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 0 align 64
        }
        Fl_Button Rit5 {
          callback {ApagaTodo();
o->value(1);
Rit = 5;
if (Fl::event_button()==3)
{
GetRit(Rit);
EditRit(Rit);
}
if (Fl::event_button()==1) GetRit(Rit);}
          tooltip {Right Click Edit -  Left Click Select} xywh {470 225 95 25} type Toggle box PLASTIC_UP_BOX color 31 selection_color 63 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 0 align 64
        }
        Fl_Button Rit6 {
          callback {ApagaTodo();
o->value(1);
Rit = 6;
if (Fl::event_button()==3)
{
GetRit(Rit);
EditRit(Rit);
}
if (Fl::event_button()==1) GetRit(Rit);}
          tooltip {Right Click Edit -  Left Click Select} xywh {470 255 95 25} type Toggle box PLASTIC_UP_BOX color 31 selection_color 63 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 0 align 64
        }
        Fl_Button Rit7 {
          callback {ApagaTodo();
o->value(1);
Rit = 7;
if (Fl::event_button()==3) 
{
EditRit(Rit);
GetRit(Rit);
}

if (Fl::event_button()==1) GetRit(Rit);}
          tooltip {Right Click Edit -  Left Click Select} xywh {470 285 95 25} type Toggle box PLASTIC_UP_BOX color 31 selection_color 63 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 0 align 64
        }
        Fl_Button Rit8 {
          callback {ApagaTodo();
o->value(1);
Rit = 8;
if (Fl::event_button()==3)
{
EditRit(Rit);
GetRit(Rit);
}
if (Fl::event_button()==1) GetRit(Rit);}
          tooltip {Right Click Edit -  Left Click Select} xywh {470 315 95 25} type Toggle box PLASTIC_UP_BOX color 31 selection_color 63 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 0 align 64
        }
        Fl_Button Rit9 {
          callback {ApagaTodo();
o->value(1);
Rit = 9;
if (Fl::event_button()==3)
{
EditRit(Rit);
GetRit(Rit);
}
if (Fl::event_button()==1) GetRit(Rit);}
          tooltip {Right Click Edit -  Left Click Select} xywh {470 345 95 25} type Toggle box PLASTIC_UP_BOX color 31 selection_color 63 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 0 align 64
        }
        Fl_Button Rit10 {
          callback {ApagaTodo();
o->value(1);
Rit = 10;
if (Fl::event_button()==3)
{
EditRit(Rit);
GetRit(Rit);
}
if (Fl::event_button()==1) GetRit(Rit);}
          tooltip {Right Click Edit -  Left Click Select} xywh {470 375 95 25} type Toggle box PLASTIC_UP_BOX color 31 selection_color 63 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 0 align 64
        }
        Fl_Button Rit11 {
          callback {ApagaTodo();
o->value(1);
Rit = 11;
if (Fl::event_button()==3)
{
GetRit(Rit);
EditRit(Rit);
}
if (Fl::event_button()==1) GetRit(Rit);}
          tooltip {Right Click Edit -  Left Click Select} xywh {585 105 95 25} type Toggle box PLASTIC_UP_BOX color 31 selection_color 63 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 0 align 64
        }
        Fl_Button Rit12 {
          callback {ApagaTodo();
o->value(1);
Rit = 12;
if (Fl::event_button()==3)
{
GetRit(Rit);
EditRit(Rit);
}
if (Fl::event_button()==1) GetRit(Rit);}
          tooltip {Right Click Edit -  Left Click Select} xywh {585 135 95 25} type Toggle box PLASTIC_UP_BOX color 31 selection_color 63 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 0 align 64
        }
        Fl_Button Rit13 {
          callback {ApagaTodo();
o->value(1);
Rit = 13;
if (Fl::event_button()==3)
{
GetRit(Rit);
EditRit(Rit);
}
if (Fl::event_button()==1) GetRit(Rit);}
          tooltip {Right Click Edit -  Left Click Select} xywh {585 165 95 25} type Toggle box PLASTIC_UP_BOX color 31 selection_color 63 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 0 align 64
        }
        Fl_Button Rit14 {
          callback {ApagaTodo();
o->value(1);
Rit = 14;
if (Fl::event_button()==3)
{
GetRit(Rit);
EditRit(Rit);
}
if (Fl::event_button()==1) GetRit(Rit);}
          tooltip {Right Click Edit -  Left Click Select} xywh {585 195 95 25} type Toggle box PLASTIC_UP_BOX color 31 selection_color 63 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 0 align 64
        }
        Fl_Button Rit15 {
          callback {ApagaTodo();
o->value(1);
Rit = 15;
if (Fl::event_button()==3)
{
GetRit(Rit);
EditRit(Rit);
}
if (Fl::event_button()==1) GetRit(Rit);}
          tooltip {Right Click Edit -  Left Click Select} xywh {585 226 95 25} type Toggle box PLASTIC_UP_BOX color 31 selection_color 63 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 0 align 64
        }
        Fl_Button Rit16 {
          callback {ApagaTodo();
o->value(1);
Rit = 16;
if (Fl::event_button()==3)
{
GetRit(Rit);
EditRit(Rit);
}
if (Fl::event_button()==1) GetRit(Rit);}
          tooltip {Right Click Edit -  Left Click Select} xywh {585 255 95 25} type Toggle box PLASTIC_UP_BOX color 31 selection_color 63 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 0 align 64
        }
        Fl_Button Rit17 {
          callback {ApagaTodo();
o->value(1);
Rit = 17;
if (Fl::event_button()==3)
{
GetRit(Rit);
EditRit(Rit);
}
if (Fl::event_button()==1) GetRit(Rit);}
          tooltip {Right Click Edit -  Left Click Select} xywh {585 285 95 25} type Toggle box PLASTIC_UP_BOX color 31 selection_color 63 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 0 align 64
        }
        Fl_Button Rit18 {
          callback {ApagaTodo();
o->value(1);
Rit = 18;
if (Fl::event_button()==3)
{
GetRit(Rit);
EditRit(Rit);
}
if (Fl::event_button()==1) GetRit(Rit);}
          tooltip {Right Click Edit -  Left Click Select} xywh {585 315 95 25} type Toggle box PLASTIC_UP_BOX color 31 selection_color 63 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 0 align 64
        }
        Fl_Button Rit19 {
          callback {ApagaTodo();
o->value(1);
Rit = 19;
if (Fl::event_button()==3)
{
GetRit(Rit);
EditRit(Rit);
}
if (Fl::event_button()==1) GetRit(Rit);}
          tooltip {Right Click Edit -  Left Click Select} xywh {585 345 95 25} type Toggle box PLASTIC_UP_BOX color 31 selection_color 63 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 0 align 64
        }
        Fl_Button Rit20 {
          callback {ApagaTodo();
o->value(1);
Rit = 20;
if (Fl::event_button()==3)
{
GetRit(Rit);
EditRit(Rit);
}
if (Fl::event_button()==1) GetRit(Rit);}
          tooltip {Right Click Edit -  Left Click Select} xywh {585 375 95 25} type Toggle box PLASTIC_UP_BOX color 31 selection_color 63 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 0 align 64
        }
      }
      Fl_Slider BassVol {
        label Volume
        callback {hor->bassvol = o->value();}
        xywh {575 425 40 175} type {Vert Knob} box PLASTIC_DOWN_BOX color 24 selection_color 3 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 4 minimum 0.99 maximum 0 step 0.01 value 0.5
        code0 {o->value(hor->bassvol);}
      }
      Fl_Box {} {
        xywh {630 454 51 36} box DOWN_FRAME
      }
      Fl_Button Basson {
        label Bass
        callback {//int readcounts = sf_seek (hor->infileb, 0, SEEK_SET);
tum = 0;
hor->split = o->value();
Split->value(o->value());
hor->basson =  o->value();}
        xywh {630 455 50 35} type Toggle box PLASTIC_UP_BOX color 31 selection_color 135 labeltype ENGRAVED_LABEL labelsize 10 align 64
        code0 {o->value(hor->basson);}
      }
      Fl_Group {} {
        xywh {625 495 60 95}
      } {}
      Fl_Group {} {open
        xywh {620 500 70 85}
      } {
        Fl_Button Bass1 {
          label Acoustic
          callback {char temp[512];

if (solucion == 1)  
sprintf(temp ,"%s", "/usr/share/horgand/AcousticBass.wav");
if (solucion == 2) 
sprintf(temp, "%s", "/usr/local/share/horgand/AcousticBass.wav");

char *tmp = temp;

hor->SelectBass(tmp);
hor->framesbass = (int) (hor->sfinfob.frames / 2.0);}
          xywh {620 500 65 25} type Radio box PLASTIC_UP_BOX color 31 selection_color 63 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 0 align 64
        }
        Fl_Button Bass2 {
          label Electric
          callback {char temp[512];

if (solucion == 1)  
sprintf(temp ,"%s", "/usr/share/horgand/FenderBass.wav");
if (solucion == 2) 
sprintf(temp, "%s", "/usr/local/share/horgand/FenderBass.wav");

char *tmp = temp;

hor->SelectBass(tmp);
hor->framesbass = (int) (hor->sfinfob.frames / 2.0);}
          xywh {620 530 65 25} type Radio box PLASTIC_UP_BOX color 31 selection_color 63 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 0 align 64
        }
        Fl_Button Bass3 {
          label Fretless
          callback {char temp[512];

if (solucion == 1)  
sprintf(temp ,"%s", "/usr/share/horgand/FretlessBass.wav");
if (solucion == 2) 
sprintf(temp, "%s", "/usr/local/share/horgand/FretlessBass.wav");

char *tmp = temp;



hor->SelectBass(tmp);
hor->framesbass = (int) (hor->sfinfob.frames / 2.0);}
          xywh {620 560 65 25} type Radio box PLASTIC_UP_BOX color 31 selection_color 63 labeltype ENGRAVED_LABEL labelsize 12 labelcolor 0 align 64
        }
      }
      Fl_Box ACI {
        xywh {315 35 155 50} box PLASTIC_DOWN_BOX color 219 labeltype ENGRAVED_LABEL labelfont 1 labelsize 22 labelcolor 0 align 80
      }
      Fl_Value_Output NV1 {
        xywh {5 565 45 20} color 42 selection_color 1 align 88 maximum 16 step 0.5
      }
      Fl_Value_Output NV2 {
        xywh {55 565 45 20} color 42 selection_color 1 align 88 maximum 16 step 0.5
      }
      Fl_Value_Output NV3 {
        xywh {105 565 45 20} color 42 selection_color 1 align 88 maximum 16 step 0.5
      }
      Fl_Value_Output NV4 {
        xywh {155 565 45 20} color 42 selection_color 1 align 88 maximum 16 step 0.5
      }
      Fl_Value_Output NV5 {
        xywh {205 565 45 20} color 42 selection_color 1 align 88 maximum 16 step 0.5
      }
      Fl_Value_Output NV6 {
        xywh {255 565 45 20} color 42 selection_color 1 align 88 maximum 16 step 0.5
      }
    }
    Fl_Window aboutwindow {
      label {About...}
      xywh {1 140 340 300} type Double hide
    } {
      Fl_Box {} {
        label Horgand
        xywh {35 5 260 40} labelfont 1 labelsize 24 align 64
      }
      Fl_Box {} {
        label {      Copyright (C) 2003 by Josep Andreu
     (Holborn) 
      holborn@@telefonica.net }
        xywh {10 45 320 70} labelfont 1 align 80
      }
      Fl_Box {} {
        label {This is free software. you may redistribute and/or modify it under the terms of the version 2 of the GNU General Public License as published by the Free Software Fundation.
 This program comes with 
 ABSOLUTE NO WARRANTY. 
 See the version 2 of the 
 GNU General Public License for details.}
        xywh {0 115 340 130} labelfont 1 labelsize 11 align 210
      }
      Fl_Button {} {
        label OK
        callback {aboutwindow->hide();}
        xywh {140 250 70 40} shortcut 0xff0d
      }
    }
    Fl_Window Settingswindow {
      label Settings
      xywh {22 75 495 265} type Double hide
    } {
      Fl_Box {} {
        label {Midi Input to:}
        xywh {5 0 151 30}
      }
      Fl_Button SClose {
        label Close
        callback {Settingswindow->hide();}
        xywh {350 165 120 30} shortcut 0xff0d
      }
      Fl_Button {} {
        label Save
        callback {GrabaSettings();
fl_message("Changes will take effect the next time you restart the program");
Settingswindow->hide();}
        xywh {350 125 120 30}
      }
      Fl_Browser BMidiIn {
        callback {int valor;
valor = (int) o->value();
hor->MidiInPuerto[1].SMidiIn =(char*) o->text(valor);
o->select(valor,1);}
        xywh {5 25 295 185} type Hold selection_color 0
      }
      Fl_Group {} {
        label {Audio Output} open
        xywh {315 25 155 95} box DOWN_BOX color 25
      } {
        Fl_Check_Button OSS {
          label { OSS}
          xywh {340 30 100 25} type Radio down_box DOWN_BOX align 84
        }
        Fl_Check_Button Alsa {
          label { Alsa}
          xywh {340 60 100 25} type Radio down_box DOWN_BOX align 84
        }
        Fl_Check_Button Jack {
          label { Jack}
          xywh {340 90 100 25} type Radio down_box DOWN_BOX align 84
        }
      }
      Fl_File_Input BFiname {
        xywh {0 230 390 30}
      }
      Fl_Button {} {
        label Browse
        callback {char *filename;
filename=fl_file_chooser("Browse:","(*.horeb)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".horeb");
BFiname->value(filename);
strcpy(hor->BankFilename,filename);}
        xywh {405 230 65 30}
      }
    }
    Fl_Window HORBank {
      label {DXEmulator Bank}
      tooltip {Right Click Get  - Left Click Put} xywh {4 20 710 360} type Double hide
    } {
      Fl_Button BClose {
        label Close
        callback {HORBank->hide();
Fl::focus(PANICO);}
        xywh {275 310 145 40} box PLASTIC_UP_BOX shortcut 0xff0d labeltype ENGRAVED_LABEL
      }
      Fl_Menu_Bar {} {
        xywh {0 0 760 30}
      } {
        submenu BFile {
          label {&File} open
          xywh {0 0 100 20}
        } {
          menuitem BLoad {
            label {&Load}
            callback {char *filename;
filename=fl_file_chooser("Load:","(*.horeb)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".horeb");
hor->loadbank(filename);
metebanco()}
            xywh {0 0 100 20}
          }
          menuitem BSave {
            label {&Save}
            callback {char *filename;
\#define EXT ".horeb"
filename=fl_file_chooser("Save:","(*"EXT")",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
\#undef EXT
hor->savebank(filename);}
            xywh {0 0 100 20} divider
          }
          menuitem {} {
            label {&Close}
            callback {HORBank->hide();
Fl::focus(PANICO);}
            xywh {0 0 100 20}
          }
        }
      }
      Fl_Button Banco1 {
        callback {if (Fl::event_button()==3) GetCombi(1);
if (Fl::event_button()==1) PutCombi(1);
o->label(hor->Banco[1].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {30 60 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Box {} {
        label 1
        xywh {0 60 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Button Banco2 {
        callback {if (Fl::event_button()==3) GetCombi(2);
if (Fl::event_button()==1) PutCombi(2);
o->label(hor->Banco[2].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {205 60 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Box {} {
        label 2
        xywh {175 60 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Button Banco3 {
        callback {if (Fl::event_button()==3) GetCombi(3);
if (Fl::event_button()==1) PutCombi(3);
o->label(hor->Banco[3].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {380 60 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Box {} {
        label 3
        xywh {350 60 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Button Banco4 {
        callback {if (Fl::event_button()==3) GetCombi(4);
if (Fl::event_button()==1) PutCombi(4);
o->label(hor->Banco[4].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {555 60 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Box {} {
        label 4
        xywh {525 60 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Button Banco5 {
        callback {if (Fl::event_button()==3) GetCombi(5);
if (Fl::event_button()==1) PutCombi(5);
o->label(hor->Banco[5].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {30 90 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Button Banco6 {
        callback {if (Fl::event_button()==3) GetCombi(6);
if (Fl::event_button()==1) PutCombi(6);
o->label(hor->Banco[6].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {205 90 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Box {} {
        label 6
        xywh {175 90 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Button Banco7 {
        callback {if (Fl::event_button()==3) GetCombi(7);
if (Fl::event_button()==1) PutCombi(7);
o->label(hor->Banco[7].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {380 90 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Box {} {
        label 17
        xywh {350 90 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Button Banco8 {
        callback {if (Fl::event_button()==3) GetCombi(8);
if (Fl::event_button()==1) PutCombi(8);
o->label(hor->Banco[8].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {555 90 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Box {} {
        label 8
        xywh {525 90 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Button Banco9 {
        callback {if (Fl::event_button()==3) GetCombi(9);
if (Fl::event_button()==1) PutCombi(9);
o->label(hor->Banco[9].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {30 120 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Button Banco10 {
        callback {if (Fl::event_button()==3) GetCombi(10);
if (Fl::event_button()==1) PutCombi(10);
o->label(hor->Banco[10].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {205 120 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Box {} {
        label 10
        xywh {175 120 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Button Banco11 {
        callback {if (Fl::event_button()==3) GetCombi(11);
if (Fl::event_button()==1) PutCombi(11);
o->label(hor->Banco[11].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {380 120 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Box {} {
        label 11
        xywh {350 120 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Button Banco12 {
        callback {if (Fl::event_button()==3) GetCombi(12);
if (Fl::event_button()==1) PutCombi(12);
o->label(hor->Banco[12].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {555 120 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Box {} {
        label 12
        xywh {525 120 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Button Banco13 {
        callback {if (Fl::event_button()==3) GetCombi(13);
if (Fl::event_button()==1) PutCombi(13);
o->label(hor->Banco[13].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {30 150 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Button Banco14 {
        callback {if (Fl::event_button()==3) GetCombi(14);
if (Fl::event_button()==1) PutCombi(14);
o->label(hor->Banco[14].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {205 150 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Box {} {
        label 14
        xywh {175 150 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Button Banco15 {
        callback {if (Fl::event_button()==3) GetCombi(15);
if (Fl::event_button()==1) PutCombi(15);
o->label(hor->Banco[15].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {380 150 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Box {} {
        label 15
        xywh {350 150 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Button Banco16 {
        callback {if (Fl::event_button()==3) GetCombi(16);
if (Fl::event_button()==1) PutCombi(16);
o->label(hor->Banco[16].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {555 150 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Box {} {
        label 16
        xywh {525 150 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Button Banco17 {
        callback {if (Fl::event_button()==3) GetCombi(17);
if (Fl::event_button()==1) PutCombi(17);
o->label(hor->Banco[17].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {30 180 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Button Banco18 {
        callback {if (Fl::event_button()==3) GetCombi(18);
if (Fl::event_button()==1) PutCombi(18);
o->label(hor->Banco[18].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {205 180 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Box {} {
        label 18
        xywh {175 180 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Button Banco19 {
        callback {if (Fl::event_button()==3) GetCombi(19);
if (Fl::event_button()==1) PutCombi(19);
o->label(hor->Banco[19].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {380 180 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Box {} {
        label 19
        xywh {350 180 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Button Banco20 {
        callback {if (Fl::event_button()==3) GetCombi(20);
if (Fl::event_button()==1) PutCombi(20);
o->label(hor->Banco[20].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {555 180 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Box {} {
        label 20
        xywh {525 180 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Box {} {
        label 5
        xywh {0 90 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Box {} {
        label 9
        xywh {0 120 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Box {} {
        label 13
        xywh {0 150 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Box {} {
        label 17
        xywh {0 180 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Button Banco21 {
        callback {if (Fl::event_button()==3) GetCombi(21);
if (Fl::event_button()==1) PutCombi(21);
o->label(hor->Banco[21].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {30 210 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Box {} {
        label 21
        xywh {0 210 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Button Banco22 {
        callback {if (Fl::event_button()==3) GetCombi(22);
if (Fl::event_button()==1) PutCombi(22);
o->label(hor->Banco[22].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {205 210 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Box {} {
        label 22
        xywh {175 210 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Button Banco23 {
        callback {if (Fl::event_button()==3) GetCombi(23);
if (Fl::event_button()==1) PutCombi(23);
o->label(hor->Banco[23].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {380 210 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Box {} {
        label 23
        xywh {350 210 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Button Banco24 {
        callback {if (Fl::event_button()==3) GetCombi(24);
if (Fl::event_button()==1) PutCombi(24);
o->label(hor->Banco[24].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {555 210 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Box {} {
        label 24
        xywh {525 210 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Button Banco25 {
        callback {if (Fl::event_button()==3) GetCombi(25);
if (Fl::event_button()==1) PutCombi(25);
o->label(hor->Banco[25].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {30 240 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Box {} {
        label 25
        xywh {0 240 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Button Banco26 {
        callback {if (Fl::event_button()==3) GetCombi(26);
if (Fl::event_button()==1) PutCombi(26);
o->label(hor->Banco[26].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {205 240 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Box {} {
        label 26
        xywh {175 240 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Button Banco27 {
        callback {if (Fl::event_button()==3) GetCombi(27);
if (Fl::event_button()==1) PutCombi(27);
o->label(hor->Banco[27].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {380 240 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Box {} {
        label 27
        xywh {350 240 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Button Banco28 {
        callback {if (Fl::event_button()==3) GetCombi(28);
if (Fl::event_button()==1) PutCombi(28);
o->label(hor->Banco[28].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {555 240 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Box {} {
        label 28
        xywh {525 240 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Button Banco29 {
        callback {if (Fl::event_button()==3) GetCombi(29);
if (Fl::event_button()==1) PutCombi(29);
o->label(hor->Banco[29].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {30 270 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Box {} {
        label 29
        xywh {0 270 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Button Banco30 {
        callback {if (Fl::event_button()==3) GetCombi(30);
if (Fl::event_button()==1) PutCombi(30);
o->label(hor->Banco[30].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {205 270 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Box {} {
        label 30
        xywh {175 270 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Button Banco31 {
        callback {if (Fl::event_button()==3) GetCombi(31);
if (Fl::event_button()==1) PutCombi(31);
o->label(hor->Banco[31].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {380 270 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Box {} {
        label 31
        xywh {350 270 30 25} labeltype ENGRAVED_LABEL align 80
      }
      Fl_Button Banco32 {
        callback {if (Fl::event_button()==3) GetCombi(32);
if (Fl::event_button()==1) PutCombi(32);
o->label(hor->Banco[32].Name)}
        tooltip {Right Click Get -  Left Click Put} xywh {555 270 145 25} box PLASTIC_UP_BOX color 6 labeltype ENGRAVED_LABEL labelsize 12 align 80
      }
      Fl_Box {} {
        label 32
        xywh {525 270 30 25} labeltype ENGRAVED_LABEL align 80
      }
    }
    Fl_Window RitEdit {
      callback {if((hor->Rt[hor->ae].bars < 1) || (hor->Rt[hor->ae].bars > 4))
{
fl_alert("Bars error.");
return;
}  

if((hor->Rt[hor->ae].blackn < 2) || (hor->Rt[hor->ae].blackn > 4))
{
fl_alert("Nom. error");
return;
}  
if (hor->fe == 1)
{
GetRit(hor->ae);
}
RitEdit->hide();}
      xywh {4 20 615 175} type Double hide
    } {
      Fl_Input RtName {
        label Name
        callback {strcpy(hor->Rt[hor->ae].Nom , o->value());}
        xywh {60 20 115 25} labeltype ENGRAVED_LABEL
      }
      Fl_Input RtFile {
        label File
        callback {strcpy(hor->Rt[hor->ae].Nfile, o->value());}
        xywh {215 20 215 25} labeltype ENGRAVED_LABEL
      }
      Fl_Value_Input RtBars {
        label Bars
        callback {hor->Rt[hor->ae].bars = (int) o->value();}
        xywh {480 20 20 25} labeltype ENGRAVED_LABEL minimum 1 maximum 4 step 1 value 1
      }
      Fl_Value_Input RtDen {
        label {Nom.}
        callback {hor->Rt[hor->ae].blackn = (int)o->value();
QuitaPon();}
        xywh {545 20 20 25} labeltype ENGRAVED_LABEL minimum 2 maximum 4 step 1 value 4
      }
      Fl_Group B1G1 {
        xywh {40 115 140 60}
      } {
        Fl_Value_Input lb1 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 1;
hor->Rt[hor->ae].linb[pos] = (int) o->value();}
          xywh {50 120 25 20} maximum 12 step 1
        }
        Fl_Value_Input lb2 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 2;
hor->Rt[hor->ae].linb[pos] = (int) o->value();}
          xywh {80 120 25 20} maximum 12 step 1
        }
        Fl_Value_Input lb3 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 3;
hor->Rt[hor->ae].linb[pos] = (int) o->value();}
          xywh {110 120 25 20} maximum 12 step 1
        }
        Fl_Value_Input lb4 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 4;
hor->Rt[hor->ae].linb[pos] = (int) o->value();}
          xywh {140 120 25 20} maximum 12 step 1
        }
        Fl_Value_Input lbv1 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 1;
hor->Rt[hor->ae].linbv[pos] = (int) o->value();}
          xywh {50 145 25 20} maximum 88 step 1
        }
        Fl_Value_Input lbv2 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 2;
hor->Rt[hor->ae].linbv[pos] = (int) o->value();}
          xywh {80 145 25 20} maximum 99 step 1
        }
        Fl_Value_Input lbv3 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 3;
hor->Rt[hor->ae].linbv[pos] = (int) o->value();}
          xywh {110 145 25 20} maximum 99 step 1
        }
        Fl_Value_Input lbv4 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 4;
hor->Rt[hor->ae].linbv[pos] = (int) o->value();}
          xywh {140 145 25 20} maximum 99 step 1
        }
      }
      Fl_Group B1G2 {
        xywh {180 115 140 60}
      } {
        Fl_Value_Input lb5 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 5;
hor->Rt[hor->ae].linb[pos] = (int) o->value();}
          xywh {190 120 25 20} maximum 12 step 1
        }
        Fl_Value_Input lb6 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 6;
hor->Rt[hor->ae].linb[pos] = (int) o->value();}
          xywh {220 120 25 20} maximum 12 step 1
        }
        Fl_Value_Input lb7 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 7;
hor->Rt[hor->ae].linb[pos] = (int) o->value();}
          xywh {250 120 25 20} maximum 12 step 1
        }
        Fl_Value_Input lb8 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 8;
hor->Rt[hor->ae].linb[pos] = (int) o->value();}
          xywh {280 120 25 20} maximum 12 step 1
        }
        Fl_Value_Input lbv5 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 5;
hor->Rt[hor->ae].linbv[pos] = (int) o->value();}
          xywh {190 145 25 20} maximum 99 step 1
        }
        Fl_Value_Input lbv6 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 6;
hor->Rt[hor->ae].linbv[pos] = (int) o->value();}
          xywh {220 145 25 20} maximum 99 step 1
        }
        Fl_Value_Input lbv7 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 7;
hor->Rt[hor->ae].linbv[pos] = (int) o->value();}
          xywh {250 145 25 20} maximum 99 step 1
        }
        Fl_Value_Input lbv8 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 8;
hor->Rt[hor->ae].linbv[pos] = (int) o->value();}
          xywh {280 145 25 20} maximum 99 step 1
        }
      }
      Fl_Group B1G3 {
        xywh {325 115 140 60}
      } {
        Fl_Value_Input lb9 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 9;
hor->Rt[hor->ae].linb[pos] = (int) o->value();}
          xywh {335 120 25 20} maximum 12 step 1
        }
        Fl_Value_Input lb10 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 10;
hor->Rt[hor->ae].linb[pos] = (int) o->value();}
          xywh {365 120 25 20} maximum 12 step 1
        }
        Fl_Value_Input lb11 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 11;
hor->Rt[hor->ae].linb[pos] = (int) o->value();}
          xywh {395 120 25 20} maximum 12 step 1
        }
        Fl_Value_Input lb12 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 12;
hor->Rt[hor->ae].linb[pos] = (int) o->value();}
          xywh {425 120 25 20} maximum 12 step 1
        }
        Fl_Value_Input lbv9 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 9;
hor->Rt[hor->ae].linbv[pos] = (int) o->value();}
          xywh {335 145 25 20} maximum 99 step 1
        }
        Fl_Value_Input lbv10 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 10;
hor->Rt[hor->ae].linbv[pos] = (int) o->value();}
          xywh {365 145 25 20} maximum 99 step 1
        }
        Fl_Value_Input lbv11 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 11;
hor->Rt[hor->ae].linbv[pos] = (int) o->value();}
          xywh {395 145 25 20} maximum 99 step 1
        }
        Fl_Value_Input lbv12 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 12;
hor->Rt[hor->ae].linbv[pos] = (int) o->value();}
          xywh {425 145 25 20} maximum 99 step 1
        }
      }
      Fl_Group B1G4 {open
        xywh {470 115 140 60}
      } {
        Fl_Value_Input lb13 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 13;
hor->Rt[hor->ae].linb[pos] = (int) o->value();}
          xywh {480 120 25 20} maximum 12 step 1
        }
        Fl_Value_Input lb14 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 14;
hor->Rt[hor->ae].linb[pos] = (int) o->value();}
          xywh {510 120 25 20} maximum 12 step 1
        }
        Fl_Value_Input lb15 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 15;
hor->Rt[hor->ae].linb[pos] = (int) o->value();}
          xywh {540 120 25 20} maximum 12 step 1
        }
        Fl_Value_Input lb16 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 16;
hor->Rt[hor->ae].linb[pos] = (int) o->value();}
          xywh {570 120 25 20} maximum 12 step 1
        }
        Fl_Value_Input lbv13 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 13;
hor->Rt[hor->ae].linbv[pos] = (int) o->value();}
          xywh {480 145 25 20} maximum 99 step 1
        }
        Fl_Value_Input lbv14 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 14;
hor->Rt[hor->ae].linbv[pos] = (int) o->value();}
          xywh {510 145 25 20} maximum 99 step 1
        }
        Fl_Value_Input lbv15 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 15;
hor->Rt[hor->ae].linbv[pos] = (int) o->value();}
          xywh {540 145 25 20} maximum 99 step 1
        }
        Fl_Value_Input lbv16 {
          callback {int pos;
pos = ((hor->sbars - 1) * (4 * hor->Rt[hor->ae].blackn)) + 16;
hor->Rt[hor->ae].linbv[pos] = (int) o->value();}
          xywh {570 145 25 20} maximum 99 step 1
        }
      }
      Fl_Counter SBar {
        label {Bar }
        callback {if (o->value() > hor->Rt[hor->ae].bars) o->value(hor->Rt[hor->ae].bars);
hor->sbars = (int) o->value();
meteval();}
        xywh {45 70 65 25} type Simple labeltype ENGRAVED_LABEL align 4 minimum 1 maximum 4 step 1 value 1
        code0 {o->value(hor->sbars);}
      }
      Fl_Button CloRit {
        label Ok
        callback {if((hor->Rt[hor->ae].bars < 1) || (hor->Rt[hor->ae].bars > 4))
{
fl_alert("Bars error.");
return;
}  

if((hor->Rt[hor->ae].blackn < 2) || (hor->Rt[hor->ae].blackn > 4))
{
fl_alert("Nom. error");
return;
}  
if (hor->fe == 1)
{
GetRit(hor->ae);
}
RitEdit->hide();}
        xywh {155 70 80 25} shortcut 0xff0d labeltype ENGRAVED_LABEL
      }
      Fl_Box {} {
        label Note
        xywh {5 120 40 25} labeltype ENGRAVED_LABEL
      }
      Fl_Box {} {
        label {Vol.}
        xywh {5 140 40 25} labeltype ENGRAVED_LABEL
      }
      Fl_Box {} {
        xywh {390 50 215 65} box DOWN_BOX
      }
      Fl_Box {} {
        label {1=1   }
        xywh {395 50 45 25} labeltype ENGRAVED_LABEL labelcolor 88 align 20
      }
      Fl_Box {} {
        label {2=2m }
        xywh {395 70 45 25} labeltype ENGRAVED_LABEL labelcolor 88 align 20
      }
      Fl_Box {} {
        label {3=2M  }
        xywh {395 90 45 25} labeltype ENGRAVED_LABEL labelcolor 88 align 20
      }
      Fl_Box {} {
        label {4=3m }
        xywh {445 50 45 25} labeltype ENGRAVED_LABEL labelcolor 88 align 20
      }
      Fl_Box {} {
        label {5=3M }
        xywh {445 70 45 25} labeltype ENGRAVED_LABEL labelcolor 88 align 20
      }
      Fl_Box {} {
        label {6=4J  }
        xywh {445 90 45 25} labeltype ENGRAVED_LABEL labelcolor 88 align 20
      }
      Fl_Box {} {
        label {7=4\#   }
        xywh {500 50 45 25} labeltype ENGRAVED_LABEL labelcolor 88 align 20
      }
      Fl_Box {} {
        label {8=5J }
        xywh {500 70 45 25} labeltype ENGRAVED_LABEL labelcolor 88 align 20
      }
      Fl_Box {} {
        label {9=6m}
        xywh {500 90 45 25} labeltype ENGRAVED_LABEL labelcolor 88 align 20
      }
      Fl_Box {} {
        label {10=6M}
        xywh {550 50 45 25} labeltype ENGRAVED_LABEL labelcolor 88 align 20
      }
      Fl_Box {} {
        label {11=7m }
        xywh {550 70 45 25} labeltype ENGRAVED_LABEL labelcolor 88 align 20
      }
      Fl_Box {} {
        label {12=7M   }
        xywh {550 90 45 25} labeltype ENGRAVED_LABEL labelcolor 88 align 20
      }
      Fl_Box {} {
        label {Notes:}
        xywh {325 65 50 25} labeltype ENGRAVED_LABEL
      }
    }
  }
  Function {metelo()} {} {
    code {Master->value(hor->master * 100.0);

V1->value(hor->Operator[1].volumen * 100);
V2->value(hor->Operator[2].volumen * 100);
V3->value(hor->Operator[3].volumen * 100);
V4->value(hor->Operator[4].volumen * 100);
V5->value(hor->Operator[5].volumen * 100);
V6->value(hor->Operator[6].volumen * 100);

H1->value(hor->Operator[1].harmonic);
H2->value(hor->Operator[2].harmonic);
H3->value(hor->Operator[3].harmonic);
H4->value(hor->Operator[4].harmonic);
H5->value(hor->Operator[5].harmonic);
H6->value(hor->Operator[6].harmonic);



char *t;

t = (char *) malloc (20 * sizeof (char) * 12);

NV1->value(hor->lasfreq[hor->Operator[1].harmonic]);
NV2->value(hor->lasfreq[hor->Operator[2].harmonic]);
NV3->value(hor->lasfreq[hor->Operator[3].harmonic]);
NV4->value(hor->lasfreq[hor->Operator[4].harmonic]);
NV5->value(hor->lasfreq[hor->Operator[5].harmonic]);
NV6->value(hor->lasfreq[hor->Operator[6].harmonic]);

Marimba->value(hor->attack * 100);
Detune->value(hor->detune);
PLFOSpeed->value(hor->PLFOspeed);
PLFODelay->value(hor->PLFOdelay * 10);
LFOSpeed->value(hor->LFOspeed);
LFOPitch->value(hor->LFOpitch);
Rota->value(hor->rota);
MasterT->value(1 - hor->mastertune);
Transpose->value(hor->transpose);
calbtrans();
Nombre->value(hor->nombre);

EchoVol->value(hor->echovol * 100);
EchoDelay->value(hor->echodelay / 176400);
EchoOn->value(hor->echoon);
Rev->value((int)hor->revon);

if ((int)hor->revon == 1)
{

R1->activate();
R2->activate();
R3->activate();
R4->activate();
R5->activate();
R6->activate();
R7->activate();
R8->activate();
switch((int) hor->ganmod)
{
case 1:
R1->setonly();
break;
case 2:
R2->setonly();
break;
case 3:
R3->setonly();
break;
case 4:
R4->setonly();
break;
case 5:
R5->setonly();
break;
case 6:
R6->setonly();
break;
case 7:
R7->setonly();
break;
case 8:
R8->setonly();
break;
}
}
else
{
R1->value(0);
R2->value(0);
R3->value(0);
R4->value(0);
R5->value(0);
R6->value(0);
R7->value(0);
R8->value(0);
R1->deactivate();
R2->deactivate();
R3->deactivate();
R4->deactivate();
R5->deactivate();
R6->deactivate();
R7->deactivate();
R8->deactivate();
}
ponreverb();
Split->value(hor->split);
ChorusOn->value(hor->choron);
ELFOAmplitude->value(hor->ELFOamplitude);
POPO->value(hor->popo);
ELFOSpeed->value(hor->ELFOspeed);
ChorVol->value(hor->chorvol * 100);

switch (hor->Salida)
{
 case 1:
        DMIN2->label("OSS");
        break;
 case 2:
        DMIN2->label("Alsa");
        break;
 case 3:
        DMIN2->label("Jack");
        break;
}



hor->procesaclean();
hor->chorusclean();
hor->rclean();} {
      callback {hor->Operator[1].harmonic = (int) o->value();
char tmp[64];
sprintf(tmp, "%2.1f", hor->lasfreq[(int) o->value()]);
V1->label(tmp);
Actu();}
    }
  }
  Function {GetCombi(int i)} {} {
    code {int k;
for (k=1; k<=6; k++)
{
hor->Banco[i].Operator[k].volumen=hor->Operator[k].volumen;
hor->Banco[i].Operator[k].harmonic_fine=hor->Operator[k].harmonic_fine;
hor->Banco[i].Operator[k].harmonic=hor->Operator[k].harmonic;
}


hor->Banco[i].echoon=hor->echoon;
hor->Banco[i].echodelay=hor->echodelay;
hor->Banco[i].echovol=hor->echovol;
hor->Banco[i].PLFOspeed=hor->PLFOspeed;
hor->Banco[i].PLFOdelay=hor->PLFOdelay;
hor->Banco[i].LFOspeed=hor->LFOspeed;
hor->Banco[i].LFOpitch=hor->LFOpitch;
hor->Banco[i].rota=hor->rota;
hor->Banco[i].modulation=hor->modulation;
hor->Banco[i].transpose=hor->transpose;
hor->Banco[i].master=hor->master;

for (k=0; k<=24; k++) hor->Banco[i].Name[k]=hor->Name[k];
hor->Banco[i].attack=hor->attack;
hor->Banco[i].detune=hor->detune;
hor->Banco[i].revon=hor->revon;
hor->Banco[i].split=hor->split;
hor->Banco[i].ganmod =hor->ganmod;
hor->Banco[i].choron=hor->choron;
hor->Banco[i].ELFOamplitude=hor->ELFOamplitude;
hor->Banco[i].popo=hor->popo;
hor->Banco[i].ELFOspeed=hor->ELFOspeed;
hor->Banco[i].chorvol=hor->chorvol;} {}
  }
  Function {PutCombi(int i)} {} {
    code {int k;

for (k=1; k<=6; k++)
{
hor->Operator[k].volumen =hor->Banco[i].Operator[k].volumen;
hor->Operator[k].harmonic_fine =hor->Banco[i].Operator[k].harmonic_fine;
hor->Operator[k].harmonic =hor->Banco[i].Operator[k].harmonic;
}



hor->echoon = hor->Banco[i].echoon;
hor->echovol = hor->Banco[i].echovol;
hor->echodelay = hor->Banco[i].echodelay;
hor->PLFOspeed = hor->Banco[i].PLFOspeed;
hor->PLFOdelay = hor->Banco[i].PLFOdelay;
hor->LFOspeed = hor->Banco[i].LFOspeed;
hor->LFOpitch = hor->Banco[i].LFOpitch;
hor->rota = hor->Banco[i].rota;
hor->modulation = hor->Banco[i].modulation;
hor->transpose = hor->Banco[i].transpose;
hor->master = hor->Banco[i].master;
bzero(hor->Name, sizeof(hor->Name));
for (k=0; k<=24; k++) hor->Name[k]=hor->Banco[i].Name[k];
hor->nombre = hor->Name;
hor->revon = hor->Banco[i].revon;
hor->attack = hor->Banco[i].attack;
hor->detune = hor->Banco[i].detune;
hor->split=hor->Banco[i].split;
hor->ganmod=hor->Banco[i].ganmod;
hor->choron=hor->Banco[i].choron;
hor->ELFOamplitude=hor->Banco[i].ELFOamplitude;
hor->popo=hor->Banco[i].popo;
hor->ELFOspeed=hor->Banco[i].ELFOspeed;
hor->chorvol=hor->Banco[i].chorvol;

hor->Prim[1] = hor->Banco[i];
metelo();
Actu();
sprintf(hor->temporal, "%02d",i);
DispNumber->label(hor->temporal);} {}
  }
  Function {MiraClientes()} {} {
    code {snd_seq_client_info_t *cinfo;
        snd_seq_port_info_t *pinfo;
        int  client;
        int  err;
        int i;
        snd_seq_t *handle;
        int count = 1;
        int count1 = 1;
        char temp[80];
        char linea[256];
        BMidiIn->clear();
        BMidiIn->add("Not Connected");
        err = snd_seq_open(&handle, "hw", SND_SEQ_OPEN_DUPLEX, 0);
        if (err < 0) printf("Could not open sequencer");

        snd_seq_client_info_alloca(&cinfo);
        snd_seq_client_info_set_client(cinfo, -1);

        while (snd_seq_query_next_client(handle, cinfo) >= 0) {
                client = snd_seq_client_info_get_client(cinfo);
                snd_seq_port_info_alloca(&pinfo);
                snd_seq_port_info_set_client(pinfo, client);

                snd_seq_port_info_set_port(pinfo, -1);
                while (snd_seq_query_next_port(handle, pinfo) >= 0) {
                        unsigned int  cap;

                        cap = (SND_SEQ_PORT_CAP_SUBS_WRITE|SND_SEQ_PORT_CAP_WRITE);
                        if ((snd_seq_port_info_get_capability(pinfo) & cap) == cap) {

                           hor->CPOMidiS[count].Client = snd_seq_port_info_get_client(pinfo);
                           hor->CPOMidiS[count].Port = snd_seq_port_info_get_port(pinfo);
                           hor->CPOMidiS[count].CName = snd_seq_client_info_get_name(cinfo);
      for (i=0; i<=(int)(strlen(hor->CPOMidiS[count].CName));i++) hor->CPOMidiS[count].Nombre[i]=hor->CPOMidiS[count].CName[i];
                           hor->CPOMidiS[count].CInfo = snd_seq_port_info_get_name(pinfo);
      for (i=0; i<=(int)(strlen(hor->CPOMidiS[count].CInfo));i++) hor->CPOMidiS[count].Info[i]=hor->CPOMidiS[count].CInfo[i];
                           
                    count++;
                                             }


                        cap = (SND_SEQ_PORT_CAP_SUBS_READ|SND_SEQ_PORT_CAP_READ);
                        if ((snd_seq_port_info_get_capability(pinfo) & cap) == cap) {

                           hor->CPIMidiS[count1].Client = snd_seq_port_info_get_client(pinfo);
                           hor->CPIMidiS[count1].Port = snd_seq_port_info_get_port(pinfo);
                           hor->CPIMidiS[count1].CName = snd_seq_client_info_get_name(cinfo);
     for (i=0; i<=(int)(strlen(hor->CPIMidiS[count1].CName));i++) hor->CPIMidiS[count1].Nombre[i]=hor->CPIMidiS[count1].CName[i];
                           hor->CPIMidiS[count1].CInfo = snd_seq_port_info_get_name(pinfo);
     for (i=0; i<=(int)(strlen(hor->CPIMidiS[count1].CInfo));i++) hor->CPIMidiS[count1].Info[i]=hor->CPIMidiS[count1].CInfo[i];
                           bzero(linea,sizeof(linea));
                           sprintf(linea,"%s",hor->CPIMidiS[count1].CInfo);
                           bzero(temp,sizeof(temp));
                           sscanf(linea,"%s",temp);
                           if (strcmp(temp,"Horgand")!=0) BMidiIn->add(linea);
                           count1++;

                                       }

                }
      }} {}
  }
  Function {MiraConfig()} {} {
    code {int i = 1;

while (BMidiIn->text(i) != NULL)
{
if (strcmp(BMidiIn->text(i),hor->MidiInPuerto[1].SetMidiIn)==0 ) BMidiIn->select(i,1);
i++; 
}

switch (hor->Salida)
{
      case 1: 
             OSS->setonly();
             break;
      case 2: 
             Alsa->setonly();
             break;
      case 3:
             Jack->setonly();
             break;
      
}

BFiname->value(hor->BankFilename);} {}
  }
  Function {GrabaSettings()} {} {
    code {FILE *fn;
char *temp;
int i;
char nomfile[256];
sprintf(nomfile,"%s%s",getenv("HOME"),"/.Horgand");
fn = fopen(nomfile,"w");
i = BMidiIn->value();
temp = (char*) BMidiIn->text(i);
if (temp == NULL ) temp= strdup("Not Connected");
fputs(temp,fn);
fputs("\\n",fn);
bzero(temp,sizeof(temp));
temp = strdup("OSS");
if (OSS->value() != 0) temp = strdup("OSS");
if (Alsa->value() != 0) temp = strdup("Alsa");
if (Jack->value() != 0) temp =strdup("Jack");
fputs(temp,fn);
fputs("\\n",fn);
bzero(temp,sizeof(temp));
temp=hor->BankFilename;
fputs(temp,fn);
fputs("\\n",fn);
fclose(fn);} {}
  }
  Function {metebanco()} {} {
    code {Banco1->label(hor->Banco[1].Name);
Banco2->label(hor->Banco[2].Name);
Banco3->label(hor->Banco[3].Name);
Banco4->label(hor->Banco[4].Name);
Banco5->label(hor->Banco[5].Name);
Banco6->label(hor->Banco[6].Name);
Banco7->label(hor->Banco[7].Name);
Banco8->label(hor->Banco[8].Name);
Banco9->label(hor->Banco[9].Name);
Banco10->label(hor->Banco[10].Name);
Banco11->label(hor->Banco[11].Name);
Banco12->label(hor->Banco[12].Name);
Banco13->label(hor->Banco[13].Name);
Banco14->label(hor->Banco[14].Name);
Banco15->label(hor->Banco[15].Name);
Banco16->label(hor->Banco[16].Name);
Banco17->label(hor->Banco[17].Name);
Banco18->label(hor->Banco[18].Name);
Banco19->label(hor->Banco[19].Name);
Banco20->label(hor->Banco[20].Name);
Banco21->label(hor->Banco[21].Name);
Banco22->label(hor->Banco[22].Name);
Banco23->label(hor->Banco[23].Name);
Banco24->label(hor->Banco[24].Name);
Banco25->label(hor->Banco[25].Name);
Banco26->label(hor->Banco[26].Name);
Banco27->label(hor->Banco[27].Name);
Banco28->label(hor->Banco[28].Name);
Banco29->label(hor->Banco[29].Name);
Banco30->label(hor->Banco[30].Name);
Banco31->label(hor->Banco[31].Name);
Banco32->label(hor->Banco[32].Name);} {}
  }
  Function {HORGAN(HOR *hor_)} {C
  } {
    code {hor=hor_;
make_window();
HORwindow->position(1,1);
HORwindow->show();
Fl::focus(PANICO);
MiraClientes();
Conecta();
metebanco();
metelo();
Actu();
PutPrim();
meteritmos();
Fl::add_timeout(1.0/100,tick);} {}
  }
  Function {Conecta()} {} {
    code {char  t1[40], t2[40];
const char *tt1, *tt2;
int client=0;
char linea[256];


        int queue = 0, convert_time = 0, convert_real = 0, exclusive = 0;
        snd_seq_port_subscribe_t *subs;
        snd_seq_addr_t sender, dest;







while ( espera == 0 ) usleep(1);

int k= 0,i=0;

for (k=1; k<=46; k++)
    {

    sprintf(linea,"Horgand IN");

if (!strcmp(hor->CPOMidiS[k].Info ,linea)) hor->MidiInPuerto[1].YOIN = hor->CPOMidiS[k].Client;
if (!strcmp(hor->CPIMidiS[k].Info ,hor->MidiInPuerto[1].SetMidiIn)) hor->MidiInPuerto[1].SettingsIN = hor->CPIMidiS[k].Client;


    }






if (strcmp(hor->MidiInPuerto[1].SetMidiIn,"Not Connected") !=0 )
{

  sprintf(t1,"%d",hor->MidiInPuerto[1].YOIN); tt1 = t1;
  sprintf(t2,"%d",hor->MidiInPuerto[1].SettingsIN);tt2 = t2;

 if ((client = snd_seq_client_id(hor->MidiInPuerto[1].midi_in)) < 0) printf("can't get client id\\n");
 if (snd_seq_parse_address(hor->MidiInPuerto[1].midi_in, &sender,tt2) < 0) printf("invalid sender address %s\\n", hor->MidiInPuerto[1].SettingsIN);
 if (snd_seq_parse_address(hor->MidiInPuerto[1].midi_in, &dest,tt1) < 0) printf("invalid destination address %s\\n", hor->MidiInPuerto[1].YOIN);

        snd_seq_port_subscribe_alloca(&subs);
        snd_seq_port_subscribe_set_sender(subs, &sender);
        snd_seq_port_subscribe_set_dest(subs, &dest);
        snd_seq_port_subscribe_set_queue(subs, queue);
        snd_seq_port_subscribe_set_exclusive(subs, exclusive);
        snd_seq_port_subscribe_set_time_update(subs, convert_time);
        snd_seq_port_subscribe_set_time_real(subs, convert_real);

 if (snd_seq_get_port_subscription(hor->MidiInPuerto[1].midi_in, subs) == 0) printf("Connection is already subscribed\\n");
 if (snd_seq_subscribe_port(hor->MidiInPuerto[1].midi_in, subs) < 0)
                                          {
                                          printf("Connection failed (%s)\\n", snd_strerror(errno));
                                          DMIN1->label("Connection failed");
                                          }
                                           else
                                          {
                                           bzero(linea,sizeof(linea));
                                           sprintf(linea ,"%d %s",hor->MidiInPuerto[1].SettingsIN,hor->MidiInPuerto[1].SetMidiIn);
                                           for (i=0; i<=(int) strlen(linea);i++) hor->MidiInPuerto[1].pMIDIIN[i] = linea[i];

                                          }


}
else sprintf(hor->MidiInPuerto[1].pMIDIIN,"Not Conected");} {}
  }
  Function {Undo()} {} {
    code {UndoCount = UndoCount -1;
if (UndoCount == -1) UndoCount = 95;
int k;
for (k=1; k<=6; k++)
{
hor->Operator[k].volumen =hor->Undo[UndoCount].Operator[k].volumen;
hor->Operator[k].harmonic_fine =hor->Undo[UndoCount].Operator[k].harmonic_fine;
hor->Operator[k].harmonic =hor->Undo[UndoCount].Operator[k].harmonic;
}



hor->echoon = hor->Undo[UndoCount].echoon;
hor->echovol = hor->Undo[UndoCount].echovol;
hor->echodelay = hor->Undo[UndoCount].echodelay;
hor->PLFOspeed = hor->Undo[UndoCount].PLFOspeed;
hor->PLFOdelay = hor->Undo[UndoCount].PLFOdelay;
hor->LFOspeed = hor->Undo[UndoCount].LFOspeed;
hor->LFOpitch = hor->Undo[UndoCount].LFOpitch;
hor->rota = hor->Undo[UndoCount].rota;
hor->modulation = hor->Undo[UndoCount].modulation;
hor->transpose = hor->Undo[UndoCount].transpose;
hor->master = hor->Undo[UndoCount].master;

for (k=0; k<=24; k++) hor->Name[k]=hor->Undo[UndoCount].Name[k];
hor->nombre = hor->Name;

hor->revon=hor->Undo[UndoCount].revon;
hor->attack= hor->Undo[UndoCount].attack;
hor->detune = hor->Undo[UndoCount].detune;
hor->split=hor->Undo[UndoCount].split;
hor->ganmod=hor->Undo[UndoCount].ganmod;
hor->choron=hor->Undo[UndoCount].choron;
hor->ELFOamplitude=hor->Undo[UndoCount].ELFOamplitude;
hor->popo=hor->Undo[UndoCount].popo;
hor->ELFOspeed=hor->Undo[UndoCount].ELFOspeed;
hor->chorvol=hor->Undo[UndoCount].chorvol;




metelo();} {}
  }
  Function {Actu()} {} {
    code {if ( (CL->value() != 0 ) || (CF->value() !=0 ) ) {
           fl_alert("In Compare mode changes are deprecated");
           return;
           }

UndoCount++;
if (UndoCount == 95) UndoCount = 0;
int k;
for (k=1; k<=6; k++)
{
hor->Undo[UndoCount].Operator[k].volumen=hor->Operator[k].volumen;
hor->Undo[UndoCount].Operator[k].harmonic_fine=hor->Operator[k].harmonic_fine;
hor->Undo[UndoCount].Operator[k].harmonic=hor->Operator[k].harmonic;
}


hor->Undo[UndoCount].echoon=hor->echoon;
hor->Undo[UndoCount].echovol=hor->echovol;
hor->Undo[UndoCount].echodelay=hor->echodelay;
hor->Undo[UndoCount].PLFOspeed=hor->PLFOspeed;
hor->Undo[UndoCount].PLFOdelay=hor->PLFOdelay;
hor->Undo[UndoCount].LFOspeed=hor->LFOspeed;
hor->Undo[UndoCount].LFOpitch=hor->LFOpitch;
hor->Undo[UndoCount].rota=hor->rota;
hor->Undo[UndoCount].modulation=hor->modulation;
hor->Undo[UndoCount].transpose=hor->transpose;
hor->Undo[UndoCount].master=hor->master;

for (k=0; k<=24; k++) hor->Undo[UndoCount].Name[k]=hor->Name[k];
hor->nombre = hor->Name;
hor->Undo[UndoCount].attack=hor->attack;
hor->Undo[UndoCount].detune=hor->detune;
hor->Undo[UndoCount].revon=hor->revon;
hor->Undo[UndoCount].split=hor->split;
hor->Undo[UndoCount].ganmod =hor->ganmod;
hor->Undo[UndoCount].choron=hor->choron;
hor->Undo[UndoCount].ELFOamplitude=hor->ELFOamplitude;
hor->Undo[UndoCount].popo=hor->popo;
hor->Undo[UndoCount].ELFOspeed=hor->ELFOspeed;
hor->Undo[UndoCount].chorvol=hor->chorvol;} {}
  }
  Function {Redo()} {} {
    code {UndoCount = UndoCount + 1;
if (UndoCount == 95 ) UndoCount = 0;
int k;
for (k=1; k<=6; k++)
{
hor->Operator[k].volumen =hor->Undo[UndoCount].Operator[k].volumen;
hor->Operator[k].harmonic_fine =hor->Undo[UndoCount].Operator[k].harmonic_fine;
hor->Operator[k].harmonic =hor->Undo[UndoCount].Operator[k].harmonic;
}



hor->echoon = hor->Undo[UndoCount].echoon;
hor->echovol = hor->Undo[UndoCount].echovol;
hor->echodelay = hor->Undo[UndoCount].echodelay;


hor->PLFOspeed = hor->Undo[UndoCount].PLFOspeed;
hor->PLFOdelay = hor->Undo[UndoCount].PLFOdelay;
hor->LFOspeed = hor->Undo[UndoCount].LFOspeed;
hor->LFOpitch = hor->Undo[UndoCount].LFOpitch;
hor->rota = hor->Undo[UndoCount].rota;
hor->modulation = hor->Undo[UndoCount].modulation;
hor->transpose = hor->Undo[UndoCount].transpose;
hor->master = hor->Undo[UndoCount].master;

for (k=0; k<=24; k++) hor->Name[k]=hor->Undo[UndoCount].Name[k];
hor->nombre = hor->Name;

hor->attack = hor->Undo[UndoCount].attack;
hor->detune = hor->Undo[UndoCount].detune;

hor->revon=hor->Undo[UndoCount].revon;
hor->split=hor->Undo[UndoCount].split;
hor->ganmod=hor->Undo[UndoCount].ganmod;
hor->choron=hor->Undo[UndoCount].choron;
hor->ELFOamplitude=hor->Undo[UndoCount].ELFOamplitude;
hor->popo=hor->Undo[UndoCount].popo;
hor->ELFOspeed=hor->Undo[UndoCount].ELFOspeed;
hor->chorvol=hor->Undo[UndoCount].chorvol;






metelo();} {}
  }
  Function {PutPrim()} {} {
    code {int k;
for (k=1; k<=6; k++)
{
hor->Prim[1].Operator[k].volumen=hor->Operator[k].volumen;
hor->Prim[1].Operator[k].harmonic_fine=hor->Operator[k].harmonic_fine;
hor->Prim[1].Operator[k].harmonic=hor->Operator[k].harmonic;
}



hor->Prim[1].echoon=hor->echoon;
hor->Prim[1].echovol=hor->echovol;
hor->Prim[1].echodelay=hor->echodelay;

hor->Prim[1].PLFOspeed=hor->PLFOspeed;
hor->Prim[1].PLFOdelay=hor->PLFOdelay;
hor->Prim[1].LFOspeed=hor->LFOspeed;
hor->Prim[1].LFOpitch=hor->LFOpitch;
hor->Prim[1].rota=hor->rota;
hor->Prim[1].modulation=hor->modulation;
hor->Prim[1].transpose=hor->transpose;
hor->Prim[1].master=hor->master;

for (k=0; k<=24; k++) hor->Prim[1].Name[k]=hor->Name[k];

hor->Prim[1].attack=hor->attack;
hor->Prim[1].detune=hor->detune;
hor->Prim[1].revon=hor->revon;

hor->Prim[1].split=hor->split;
hor->Prim[1].ganmod =hor->ganmod;
hor->Prim[1].choron=hor->choron;
hor->Prim[1].ELFOamplitude=hor->ELFOamplitude;
hor->Prim[1].popo=hor->popo;
hor->Prim[1].ELFOspeed=hor->ELFOspeed;
hor->Prim[1].chorvol=hor->chorvol;} {}
  }
  Function {GetPrim()} {
    callback {hor->Operator[1].attack = (float) o->value()/100;
Actu();}
  } {
    code {int k;
for (k=1; k<=6; k++)
{
hor->Operator[k].volumen =hor->Prim[1].Operator[k].volumen;
hor->Operator[k].harmonic_fine =hor->Prim[1].Operator[k].harmonic_fine;
hor->Operator[k].harmonic =hor->Prim[1].Operator[k].harmonic;
}




hor->echoon = hor->Prim[1].echoon;
hor->echovol = hor->Prim[1].echovol;
hor->echodelay = hor->Prim[1].echodelay;
hor->PLFOspeed = hor->Prim[1].PLFOspeed;
hor->PLFOdelay = hor->Prim[1].PLFOdelay;
hor->LFOspeed = hor->Prim[1].LFOspeed;
hor->LFOpitch = hor->Prim[1].LFOpitch;
hor->rota = hor->Prim[1].rota;
hor->modulation = hor->Prim[1].modulation;
hor->transpose = hor->Prim[1].transpose;
hor->master = hor->Prim[1].master;
bzero(hor->Name,sizeof(hor->Name));
for (k=0; k<=24; k++) hor->Name[k]=hor->Prim[1].Name[k];
hor->nombre = hor->Name;
hor->attack = hor->Prim[1].attack;
hor->detune = hor->Prim[1].detune;
hor->revon = hor->Prim[1].revon;
hor->split=hor->Prim[1].split;
hor->ganmod=hor->Prim[1].ganmod;
hor->choron=hor->Prim[1].choron;
hor->ELFOamplitude=hor->Prim[1].ELFOamplitude;
hor->popo=hor->Prim[1].popo;
hor->ELFOspeed=hor->Prim[1].ELFOspeed;
hor->chorvol=hor->Prim[1].chorvol;

metelo();} {}
  }
  Function {tick(void *v)} {return_type {static void}
  } {
    code {Fl::add_timeout(1.0/100,tick);} {}
  }
  decl {HOR *hor;} {
    callback {->Operator[1].frequency_type = (int) o->value();
if (o->value() == 0)  o->label("Coarse");
if (o->value() == 1)  o->label("Fixed");
Actu();}
  }
  Function {ponreverb()} {} {
    code {hor->rclean();
switch((int) hor->ganmod)
{
case 1:
hor->rtime = 1.2;
hor->revvol = 0.45;
hor->diffussion = 0.13;

break;

case 2:
hor->rtime = 1.2;
hor->revvol = 0.65;
hor->diffussion = 0.13;
break;

case 3:
hor->rtime = 1.7;
hor->revvol = 0.45;
hor->diffussion = 0.14;
break;

case 4:
hor->rtime = 1.7;
hor->revvol = 0.65;
hor->diffussion = 0.14;
break;

case 5:
hor->rtime = 2.4;
hor->revvol = 0.45;
hor->diffussion = 0.16;
break;

case 6:
hor->rtime = 2.4;
hor->revvol = 0.65;
hor->diffussion = 0.16;

case 7:
hor->rtime = 3.2;
hor->revvol = 0.45;
hor->diffussion = 0.16;
break;

case 8:
hor->rtime = 3.2;
hor->revvol = 0.65;
hor->diffussion = 0.16;
break;
}} {}
  }
  Function {GetRit(int Rit)} {} {
    code {int i;
int rula;

char temp[512];
if (solucion == 1) sprintf(temp,"%s%s","/usr/share/horgand/",hor->Rt[Rit].Nfile);
if (solucion == 2) sprintf(temp,"%s%s","/usr/local/share/horgand/",hor->Rt[Rit].Nfile);

char *tmp = temp;

rula = hor->SelectRitmo(tmp);
if (rula != 0) 
{ 
RitOn->value(0);
StStRiton->value(0);
hor->riton = 0;
return;
}
Tempo->activate();
hor->bars = hor->Rt[Rit].bars;
hor->blackn = hor->Rt[Rit].blackn;

for (i = 1; i<=(4 * hor->blackn * hor->bars); i++)
{
 hor->linb[i] = hor->Rt[Rit].linb[i];
 hor->linbv[i] =hor->Rt[Rit].linbv[i];
}

hor->frametot = (int) (hor->tempo * hor->sfinfo.frames);
hor->fracpos = hor->frametot / (4 * hor->blackn * hor->bars);
Tempo->activate();} {}
  }
  Function {meteritmos()} {} {
    code {Rit1->label(hor->Rt[1].Nom);
Rit2->label(hor->Rt[2].Nom);
Rit3->label(hor->Rt[3].Nom);
Rit4->label(hor->Rt[4].Nom);
Rit5->label(hor->Rt[5].Nom);
Rit6->label(hor->Rt[6].Nom);
Rit7->label(hor->Rt[7].Nom);
Rit8->label(hor->Rt[8].Nom);
Rit9->label(hor->Rt[9].Nom);
Rit10->label(hor->Rt[10].Nom);
Rit11->label(hor->Rt[11].Nom);
Rit12->label(hor->Rt[12].Nom);
Rit13->label(hor->Rt[13].Nom);
Rit14->label(hor->Rt[14].Nom);
Rit15->label(hor->Rt[15].Nom);
Rit16->label(hor->Rt[16].Nom);
Rit17->label(hor->Rt[17].Nom);
Rit18->label(hor->Rt[18].Nom);
Rit19->label(hor->Rt[19].Nom);
Rit20->label(hor->Rt[20].Nom);} {}
  }
  Function {calbtrans()} {} {
    code {hor->btrans = hor->transpose;
if ( hor->btrans > 12 ) hor->btrans = hor->btrans  % 12;
if ( hor->btrans < -12 ) hor->btrans = hor->btrans  % 12;
if ( hor->transpose % 12 == 0) hor->btrans = 0;} {}
  }
  Function {calbtune()} {} {
    code {int i,k;
float btuneval =  ((float) MasterT->value() / 100.0);

for(i=0; i<=11; i++)
{
 if ( MasterT->value() > 0)

  {  k = i + 1;
     if (i == 11) k = 0; 
     hor->AB[i].bmt =  (hor->AB[k].afin - hor->AB[i].afin) * btuneval;

     if (i == 6) hor->AB[6].bmt = (2.980 - hor->AB[6].afin) * btuneval;

  }

 if (MasterT->value()== 0 ) hor->AB[i].bmt = 0;

if ( MasterT->value() < 0)

  {  k = i - 1;
     if (i == 0) k = 11; 
     hor->AB[i].bmt =  (hor->AB[i].afin - hor->AB[k].afin)  * btuneval;
      if (i == 7) hor->AB[7].bmt = (hor->AB[7].afin - 1.3980 ) * btuneval;

  }
 

}} {}
  }
  Function {EditRit(int i)} {} {
    code {hor->ae = i;
RtName->value(hor->Rt[i].Nom);
RtFile->value(hor->Rt[i].Nfile);
RtBars->value(hor->Rt[i].bars);
RtDen->value(hor->Rt[i].blackn);
QuitaPon();
hor->sbars= 1;
meteval();
char temp[512];
sprintf(temp,"%s - Bass Line Editor",hor->Rt[i].Nom);
RitEdit->label(temp);
RitEdit->show();
Fl::focus(CloRit);} {}
  }
  Function {QuitaPon()} {} {
    code {switch(hor->Rt[hor->ae].blackn)
{
  case 2:
     B1G3->hide();
     B1G4->hide();
     lb9->hide();
     lb10->hide();
     lb11->hide();
     lb12->hide();
     lb13->hide();
     lb14->hide();
     lb15->hide();
     lb16->hide();
     lbv9->hide();
     lbv10->hide();
     lbv11->hide();
     lbv12->hide();
     lbv13->hide();
     lbv14->hide();
     lbv15->hide();
     lbv16->hide();
    break;

  case 3:
     B1G3->show();
     B1G4->hide();
     lb9->show();
     lb10->show();
     lb11->show();
     lb12->show();
     lb13->hide();
     lb14->hide();
     lb15->hide();
     lb16->hide();
     lbv9->show();
     lbv10->show();
     lbv11->show();
     lbv12->show();
     lbv13->hide();
     lbv14->hide();
     lbv15->hide();
     lbv16->hide();
     break;
  case 4:
     B1G3->show();
     B1G4->show();
     lb9->show();
     lb10->show();
     lb11->show();
     lb12->show();
     lb13->show();
     lb14->show();
     lb15->show();
     lb16->show();
     lbv9->show();
     lbv10->show();
     lbv11->show();
     lbv12->show();
     lbv13->show();
     lbv14->show();
     lbv15->show();
     lbv16->show();
     break;
}} {}
  }
  Function {meteval()} {} {
    code {int i = (hor->sbars- 1) * (hor->Rt[hor->ae].blackn * 4);


lb1->value(hor->Rt[hor->ae].linb[i+1]);
lb2->value(hor->Rt[hor->ae].linb[i+2]);
lb3->value(hor->Rt[hor->ae].linb[i+3]);
lb4->value(hor->Rt[hor->ae].linb[i+4]);
lb5->value(hor->Rt[hor->ae].linb[i+5]);
lb6->value(hor->Rt[hor->ae].linb[i+6]);
lb7->value(hor->Rt[hor->ae].linb[i+7]);
lb8->value(hor->Rt[hor->ae].linb[i+8]);
lbv1->value(hor->Rt[hor->ae].linbv[i+1]);
lbv2->value(hor->Rt[hor->ae].linbv[i+2]);
lbv3->value(hor->Rt[hor->ae].linbv[i+3]);
lbv4->value(hor->Rt[hor->ae].linbv[i+4]);
lbv5->value(hor->Rt[hor->ae].linbv[i+5]);
lbv6->value(hor->Rt[hor->ae].linbv[i+6]);
lbv7->value(hor->Rt[hor->ae].linbv[i+7]);
lbv8->value(hor->Rt[hor->ae].linbv[i+8]);

if ( hor->Rt[hor->ae].blackn > 2)
{

lb9->value(hor->Rt[hor->ae].linb[i+9]);
lb10->value(hor->Rt[hor->ae].linb[i+10]);
lb11->value(hor->Rt[hor->ae].linb[i+11]);
lb12->value(hor->Rt[hor->ae].linb[i+12]);
lbv9->value(hor->Rt[hor->ae].linbv[i+9]);
lbv10->value(hor->Rt[hor->ae].linbv[i+10]);
lbv11->value(hor->Rt[hor->ae].linbv[i+11]);
lbv12->value(hor->Rt[hor->ae].linbv[i+12]);

}

if ( hor->Rt[hor->ae].blackn > 3)

{

lb13->value(hor->Rt[hor->ae].linb[i+13]);
lb14->value(hor->Rt[hor->ae].linb[i+14]);
lb15->value(hor->Rt[hor->ae].linb[i+15]);
lb16->value(hor->Rt[hor->ae].linb[i+16]);
lbv13->value(hor->Rt[hor->ae].linbv[i+13]);
lbv14->value(hor->Rt[hor->ae].linbv[i+14]);
lbv15->value(hor->Rt[hor->ae].linbv[i+15]);
lbv16->value(hor->Rt[hor->ae].linbv[i+16]);
}

SBar->value(hor->sbars);} {}
  }
  Function {ApagaTodo()} {} {
    code {Rit1->value(0);
Rit2->value(0);
Rit3->value(0);
Rit4->value(0);
Rit5->value(0);
Rit6->value(0);
Rit7->value(0);
Rit8->value(0);
Rit9->value(0);
Rit10->value(0);
Rit11->value(0);
Rit12->value(0);
Rit13->value(0);
Rit14->value(0);
Rit15->value(0);
Rit16->value(0);
Rit17->value(0);
Rit18->value(0);
Rit19->value(0);
Rit20->value(0);} {}
  }
} 
